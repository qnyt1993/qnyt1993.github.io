<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos安装mysql5.6</title>
      <link href="/2019/10/30/centos%E5%AE%89%E8%A3%85mysql5-6/"/>
      <url>/2019/10/30/centos%E5%AE%89%E8%A3%85mysql5-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境: centos7<br>mysql版本: mysql-5.6.46</p></blockquote><h2 id="安装mysql5-6"><a href="#安装mysql5-6" class="headerlink" title="安装mysql5.6"></a>安装mysql5.6</h2><pre><code># 1. 使用rz上传tar包# 2. 校验md5值,检查是否和下载页面的md5值一致md5sum mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz# 解压tar zxf mysql-5.6.46-linux-glibc2.12-x86_64.tar.gz yum install libaiogroupadd mysqluseradd -r -g mysql mysqlcd /usr/local/ln -s /root/mysql-5.6.46-linux-glibc2.12-x86_64 mysqlcd mysqlchown -R mysql .chgrp -R mysql .scripts/mysql_install_db --user=mysqlchown -R root .chown -R mysql data# 启动bin/mysqld_safe --user=mysql &amp;# 关闭mysqladmin shutdown# another start/etc/init.d/mysql.server start#         stop/etc/init.d/mysql.server stopcp support-files/mysql.server /etc/init.d/mysql.server</code></pre><h2 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h2><pre><code># 查看mysql是否开机自启chkconfig --list | grep mysql# 设置开机自启chkconfig --add mysql.server  # 配置 /usr/local/mysql/bin路径到环境变量vim /etc/profile# 在底部追加export PATH=/usr/local/mysql/bin:$PATHsource /etc/profile# 查看mysql 版本mysql -V</code></pre><h2 id="mysql5-7安装脚本"><a href="#mysql5-7安装脚本" class="headerlink" title="mysql5.7安装脚本"></a>mysql5.7安装脚本</h2><pre><code>#!/bin/shgroupadd mysqluseradd -r -g mysql mysqlcd /usr/localif [ -d mysql-5.7.9-linux-glibc2.5-x86_64 ]; then echo &quot;mysql folder is exists&quot;elsetar -xzvf  mysql-5.7.9-linux-glibc2.5-x86_64.tar.gzfiln -s  mysql-5.7.9-linux-glibc2.5-x86_64 mysqlcd mysqlecho &quot;export PATH=/usr/local/mysql/bin:$PATH&quot;&gt;&gt;/etc/profilesource /etc/profileservice iptables stopchkconfig iptables offif [ -d mysql-files ]; thenecho &quot;mysql-files is exists&quot;elsemkdir mysql-filesfichmod 770 mysql-fileschown -R mysql .chgrp -R mysql .if [ -d data ]; thenmv data data_$(date+%Y%m%d)else echo &quot;data is not exist&quot;fi./bin/mysqld --initialize --user=mysqlchown -R root .chown -R mysql data mysql-files./bin/mysqld_safe --user=mysql &amp;cp -rf support-files/mysql.server /etc/init.d/mysql.server#./usr/local/mysql/support-files/mysql.server stopps -ef|grep mysql|grep -v grep |awk -F&apos; &apos; &apos;{print $2}&apos;|xargs kill -s 9       #serivce mysql stop./bin/mysqld_safe --skip-grant-tables &amp;      #service mysql start      #./usr/local/mysql/support-files/mysql.server startmysql -uroot -puse mysql;update mysql.user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos;;flush privileges;quit;mysql -uroot -p123456set password for &apos;root&apos;@&apos;localhost&apos;=password(&quot;123456&quot;);flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境下搭建mysql主从</title>
      <link href="/2019/10/29/windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAmysql%E4%B8%BB%E4%BB%8E/"/>
      <url>/2019/10/29/windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAmysql%E4%B8%BB%E4%BB%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 <a href="https://www.cnblogs.com/naruto123/p/8138708.html" target="_blank" rel="noopener">windows环境下mysql主从配置</a></p></blockquote><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>主库所在的操作系统</td><td>win7</td></tr><tr><td>主库的版本</td><td>mysql-5.6.46-winx64</td></tr><tr><td>主库的ip地址</td><td>127.0.0.1</td></tr><tr><td>主库的端口</td><td>3306</td></tr></tbody></table><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>从库所在的操作系统</td><td>win7</td></tr><tr><td>从库的版本</td><td>mysql-5.6.46-winx64</td></tr><tr><td>从库的ip地址</td><td>127.0.0.1</td></tr><tr><td>从库的端口</td><td>3307</td></tr></tbody></table><p><a href="下载地址：https://www.mysql.com/downloads/">mysql下载地址</a></p><blockquote><p>主库和从库版本可以一致也可以不一致，需要说明一点，如果两者版本不一致，一般主库的版本需要比从库的版本低，这样就可以避免由于版本问题，有些sql不能执行的问题。</p></blockquote><h2 id="2-数据库安装"><a href="#2-数据库安装" class="headerlink" title="2. 数据库安装"></a>2. 数据库安装</h2><p>下载的是zip包的mysql 将其解压到本机即可</p><p><img src="https://i.loli.net/2019/10/29/8vUCn4QMHLicwFZ.png" alt="QQ截图20191028092215.png"></p><h3 id="2-1-主库（master）的安装及配置"><a href="#2-1-主库（master）的安装及配置" class="headerlink" title="2.1 主库（master）的安装及配置"></a>2.1 主库（master）的安装及配置</h3><p>进入主库mysql-5.6.46-winx64目录中，在此目录中新建<code>my.ini</code>文件并添加一下配置。</p><pre><code>[mysqld]# 以下内容手动添加[client]port=3307default-character-set=utf8[mysqld]#主库配置server_id=1log_bin=master-binlog_bin-index=master-bin.index# 跳过密码skip-grant-tables#端口port=3306character_set_server=utf8#解压目录basedir=D:\program\mysql-5.6.46-winx64#解压目录下data目录datadir=D:\program\mysql-5.6.46-winx64\datasql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[WinMySQLAdmin]D:\program\mysql-5.6.46-winx64\bin\mysqld.exe</code></pre><blockquote><p>将里面的路径修改成你自己的主库路径</p></blockquote><p>以管理员权限打开<code>cmd</code></p><pre><code>cd /d D:\program\mysql-5.6.46-winx64\bin mysqld --install master --defaults-file=&quot;D:\program\mysql-5.6.46-winx64\my.ini&quot;</code></pre><p>出现以下提示，表示服务安装成功。</p><p><img src="https://i.loli.net/2019/10/29/5KJAMycda326T1r.png" alt="QQ截图20191028093401.png"></p><blockquote><p>将里面的路径修改成你自己的主库路径<br><br>其中的master为主库mysql的服务名称<br><br>删除master服务用sc delete master</p></blockquote><p>启动主库的mysql服务器</p><pre><code>net start master</code></pre><blockquote><p>net stop master 为停止命令</p></blockquote><p><img src="https://i.loli.net/2019/10/29/15L8XVUb37JiWm4.png" alt="QQ截图20191028093656.png"></p><p>使用命令<code>&gt;mysql -uroot -P3306 -p</code>登录<code>master</code>数据库（默认安装好的mysql的root用户是没有密码的）</p><p><img src="https://i.loli.net/2019/10/29/PA7kI4rBGo2cLTa.png" alt="QQ截图20191028100818.png"></p><p>　登录上之后修改root用户的密码（这里修改成root）</p><p>执行命令</p><pre><code>　　use mysql;　　update  user set password=password(&quot;root&quot;) where user=&quot;root&quot;;　　flush privileges;</code></pre><p><img src="https://i.loli.net/2019/10/29/DY1852m7vkLgWAj.png" alt="QQ截图20191028101003.png"></p><p>这样就设置好了root用户的密码了。(记得注销my.ini中的跳过密码配置，并重启master)</p><p><img src="https://i.loli.net/2019/10/29/JvtpBigN1nkXs8R.png" alt="QQ截图20191028101235.png"></p><h3 id="2-2-从库（slave）的安装与配置"><a href="#2-2-从库（slave）的安装与配置" class="headerlink" title="2.2 从库（slave）的安装与配置　　"></a>2.2 从库（slave）的安装与配置　　</h3><p>进入主库D:\program\mysql-5.6.46-winx64-02目录中，在此目录中新建<code>my.ini</code>文件并添加一下配置。</p><pre><code>[mysqld]# 以下内容手动添加[client]port=3307default-character-set=utf8[mysqld]#从库配置server_id=2relay-log-index=slave-relay-bin.indexrelay-log=slave-relay-bin# 跳过密码skip-grant-tables#端口port=3307character_set_server=utf8#解压目录basedir=D:\program\mysql-5.6.46-winx64-02#解压目录下data目录datadir=D:\program\mysql-5.6.46-winx64-02\datasql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[WinMySQLAdmin]D:\program\mysql-5.6.46-winx64-02\bin\mysqld.exe</code></pre><p>安装从库服务。</p><pre><code>cd /d D:\program\mysql-5.6.46-winx64-02\binmysqld --install slave --defaults-file=&quot;D:\program\mysql-5.6.46-winx64-02\my.ini&quot;</code></pre><p><img src="https://i.loli.net/2019/10/29/Mci2lnKAwtfCpzD.png" alt="QQ截图20191028101840.png"></p><p>启动从的mysql服务器</p><pre><code>net start slave</code></pre><p><img src="https://i.loli.net/2019/10/29/H6ictSTINPnQuxB.png" alt="QQ截图20191028101943.png"></p><p>同样的登录从库(<code>mysql -uroot -P3307 -p</code>)</p><p><img src="https://i.loli.net/2019/10/29/BbiImGA3T1ykgsP.png" alt="QQ截图20191028102101.png"></p><p>修改从库root用户的密码为root</p><pre><code>　　use mysql;　　update  user set password=password(&quot;root&quot;) where user=&quot;root&quot;;　　flush privileges;    </code></pre><p><img src="https://i.loli.net/2019/10/29/bUvH2sFkCE6D8NA.png" alt="QQ截图20191028102208.png"></p><p>注销从库中的my.ini中的跳过密码配置,重启slave服务</p><p><img src="https://i.loli.net/2019/10/29/tnBrcPdlya3EZIQ.png" alt="QQ截图20191028102348.png"></p><p>　至此，主、从数据库的安装及配置就完成了。</p><h2 id="3-关联主库（master）与从库（slave）"><a href="#3-关联主库（master）与从库（slave）" class="headerlink" title="3. 关联主库（master）与从库（slave）"></a>3. 关联主库（master）与从库（slave）</h2><p>上面我们已经把master和slave相关配置文件都已添加，并分别启动了master与slave，现在我们分别登录到master和slave的mysql中，</p><p>master的mysql 执行命令 <code>show master status</code>查看master的状态</p><p><img src="https://i.loli.net/2019/10/29/26ud34PImqpXwFO.png" alt="QQ截图20191028102756.png"></p><p>slave的mysql  执行命令 <code>show slave status</code>查看slave的状态</p><p><img src="https://i.loli.net/2019/10/29/3mpNBVv4nxtUhr1.png" alt="QQ截图20191028102818.png"></p><p>我们可以发现 ，master的状态下，生成了一个二进制的日志文件，而slave下是空的，所以我们现在就要把主库与从库关联起来。只需要让从库（slave）知道主库（master）的地址就可以了。</p><p>　　首先我们需要在主库（master）中创建一个用户用于与从库同步的用户名和密码（这里我创建一个test用户，密码为mysql），并给test用户授权，以用于主库操作从库。</p><pre><code>create user test;grant replication slave on *.* to &apos;从库用户名(test)&apos;@&apos;从库主机地址(127.0.0.1)&apos;identified by &apos;密码(mysql)&apos;;flush privileges;</code></pre><p><img src="https://i.loli.net/2019/10/29/JNXxP3Ub5hdOHQr.png" alt="QQ截图20191028103132.png"></p><p>现在我们切到从库（slave），把主库与从库联系起来。</p><pre><code>change master to master_host=&apos;127.0.0.1&apos;,master_port=3306,master_user=&apos;test&apos;,master_password=&apos;mysql&apos;,master_log_file=&apos;master-bin.000001&apos;,master_log_pos=0;</code></pre><p><img src="https://i.loli.net/2019/10/29/iT6m37pMKanoBwD.png" alt="QQ截图20191028103256.png"></p><p>然后执行命令 <code>start slave;</code> 开启主从同步   </p><p><img src="https://i.loli.net/2019/10/29/tEMPkziCAGxfrJc.png" alt="QQ截图20191028103406.png"></p><p>后执行命令查看 slave的状态</p><pre><code>show slave status \G; </code></pre><p>出现如下图，则开启主从跟踪成功</p><p><img src="https://i.loli.net/2019/10/29/Tt1Q2pLnceMH5rz.png" alt="QQ截图20191028103506.png"></p><h2 id="4-验证主从同步"><a href="#4-验证主从同步" class="headerlink" title="4. 验证主从同步"></a>4. 验证主从同步</h2><p>我们进入master和slave并查看他们的数据库，如下图：<br>然后我们在主库中创建一个数据库user，看一下从库有没有变化。</p><p><img src="https://i.loli.net/2019/10/29/ngV4LK8NtQmvXSd.png" alt="QQ截图20191028104211.png"></p><p>至此，主从同步已配置完毕。</p><blockquote><p>注意不要往从库中写数据，如果从库写入数据，master_log_pos是不会变化的，主库的信息没有发生变化，当主库又变化和从库一样的操作时就有可能会产生冲突，因此，只能在主库中写数据，从库只能读数据，当然主库也可以读数据。</p></blockquote><h2 id="5-主从恢复-补充"><a href="#5-主从恢复-补充" class="headerlink" title="5. 主从恢复(补充)"></a>5. 主从恢复(补充)</h2><p>在主库上使用<code>show master status</code>获取<code>master_log_file</code>和<code>master_log_pos</code><br>再在从库上执行如下命令</p><pre><code>stop slave; change master to master_host=&apos;127.0.0.1&apos;,master_port=3306,master_user=&apos;test&apos;,master_password=&apos;mysql&apos;,master_log_file=&apos;master-bin.000001&apos;,master_log_pos=0;start slave;</code></pre><blockquote><p>注意修改 <code>master_log_file</code>和<code>master_log_pos</code>以及其他配置信息</p></blockquote><p>在从库上执行查询<code>show slave status</code>状态</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 数据库 </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Robots.txt 完整使用指南</title>
      <link href="/2019/10/25/Robots-txt-%E5%AE%8C%E6%95%B4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/10/25/Robots-txt-%E5%AE%8C%E6%95%B4%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载: <a href="https://www.simcf.cc/3442.html" target="_blank" rel="noopener">Robots.txt 完整使用指南</a></p></blockquote><p><code>Robots.txt</code>是一个小文本文件，位于网站的根目录中。它告诉抓取工具是否要抓取网站的某些部分。该文件使用简单的语法，以便爬虫可以放置到位。</p><p>写得好，你将在索引天堂。写得不好，最终可能会从搜索引擎中隐藏整个网站,该文件没有官方标准。但你可以使用<code>Robots.txt</code>做更多的工作，而不是网站大纲，比如使用通配符，站点地图链接，和<code>Allow</code>指令，所有主要搜索引擎都支持这些 扩展。</p><p>在一个完美的世界里，没有人需要<code>Robots.txt</code>。如果网站上的所有页面都是供公众使用的，那么理想情况下，应该允许搜索引擎抓取所有页面。但我们并不是生活在一个完美的世界里。许多站点都有蜘蛛陷阱，规范URL问题以及需要远离搜索引擎的非公共页面，而<code>Robots.txt</code>用于使您的网站更接近完美。</p><h2 id="Robots-txt如何工作"><a href="#Robots-txt如何工作" class="headerlink" title="Robots.txt如何工作"></a><code>Robots.txt</code>如何工作</h2><p>如果你已经熟悉了<code>Robots.txt</code>的指令，但担心你做错了，请跳到常见错误部分。如果你是新手，请继续阅读 。</p><p>可以使用任何纯文本编辑器制作<code>Robots.txt</code>文件，但它必须位于站点的根目录中，并且必须命名为<code>Robots.txt</code>，您不能在子目录中使用该文件。</p><p>如果域名是example.com，则<code>Robots.txt</code>网址应为：</p><pre><code>http://example.com/`Robots.txt`</code></pre><p>HTTP规范将<code>user-agent</code>定义为发送请求的东西（与接收请求的<code>服务器</code>相对）。严格来说，用户代理可以是请求网页的任何内容，包括搜索引擎抓取工具，Web浏览器或模糊的命令行 实用程序。</p><h2 id="用户代理指令"><a href="#用户代理指令" class="headerlink" title="用户代理指令"></a>用户代理指令</h2><p>在<code>Robots.txt</code>文件中，<code>user-agent</code>指令用于指定哪个爬网程序应遵守给定的规则集。该指令可以是通配符，用于指定规则适用于所有爬网程序：</p><pre><code>User-agent： *</code></pre><p>或者它可以是特定爬虫的名称：</p><pre><code>User-agent：Googlebot</code></pre><h2 id="禁止指令"><a href="#禁止指令" class="headerlink" title="禁止指令"></a>禁止指令</h2><p>您应该通过一个或多个<code>disallow</code>指令来遵循用户代理行 ：</p><pre><code>User-agent：* Disallow：/junk-page</code></pre><p>上面的示例将阻止路径以<code>/junk-page</code>开头的所有URL ：</p><pre><code>http://example.com/junk-page http://example.com/junk-page?usefulness=0 http://example.com/junk-page/whatever </code></pre><p>它不会阻止任何路径不以<code>/junk-page</code>开头的URL 。以下网址不会被 阻止：</p><pre><code>http://example.com/subdir/junk-page</code></pre><p>这里的关键是<code>disallow</code>是一个简单的文本匹配。无论<code>Disallow：</code>之后出现什么都被视为一个简单的字符串（除了*和$之外，我将在下面提到）。将此字符串与URL的路径部分的开头（从域之后的第一个斜杠到URL的末尾的所有内容）进行比较，该字符串也被视为简单字符串。如果匹配，则会阻止该URL。如果他们不这样做，那就 不是。</p><h2 id="允许指令"><a href="#允许指令" class="headerlink" title="允许指令"></a>允许指令</h2><p><code>Allow</code>指令不是原始标准的一部分，但现在所有主要搜索引擎都支持它。</p><p>您可以使用此伪指令指定禁止规则的例外，例如，如果您有一个要阻止的子目录，但希望抓取该子目录中的一个页面：</p><pre><code>User-agent：* Allow：/nothing-good-in-here/except-this-one-page Disallow：/nothing-good-in-here/</code></pre><p>此示例将阻止以下 URL：</p><pre><code>http://example.com/nothing-good-in-here/http://example.com/nothing-good-in-here/somepage http://example.com/nothing-good-in-here/otherpage http://example.com/nothing-good-in-here/?x=y</code></pre><p>但它不会阻止以下任何一种情况：</p><pre><code>http://example.com/nothing-good-in-here/except-this-one-page http://example.com/nothing-good-in-here/except-this-one-page-because-i -said-so http://example.com/nothing-good-in-here/except-this-one-page/that-is-really-a-directory </code></pre><p>同样，这是一个简单的文本匹配。将<code>Allow：</code>之后的文本与URL的路径部分的开头进行比较。如果它们匹配，即使在通常阻止它的其他地方禁止该页面，也将允许该页面。</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>所有主要搜索引擎也支持通配符运算符。这允许您在路径的一部分未知或可变时阻止页面。对于 例如：</p><pre><code>Disallow：/users/*/settings</code></pre><p>*（星号）表示<code>匹配任何文本。</code>上述指令将阻止以下所有 URL：</p><pre><code>http://example.com/users/alice/settings http://example.com/users/bob/settings http://example.com/users/tinkerbell/settings </code></pre><p>小心！以上还将阻止以下URL（可能不是您想要的）：</p><pre><code>http://example.com/users/alice/extra/directory/levels/settings http://example.com/users/alice/search?q=/settings </code></pre><p>字符串结束运算符<br>另一个有用的扩展是字符串结尾运算符：</p><pre><code>Disallow：/useless-page $</code></pre><p>$表示URL必须在该点结束，该指令将阻止以下 URL：</p><pre><code>http://example.com/useless-page</code></pre><p>但它不会阻止 以下任何一种情况：</p><pre><code>http://example.com/useless-pages-and-how-to-avoid-creating-them http://example.com/useless-page/http://example.com/useless-page?a=b</code></pre><h2 id="阻止一切"><a href="#阻止一切" class="headerlink" title="阻止一切"></a>阻止一切</h2><p>您可能希望使用<code>Robots.txt</code>阻止所有暂存站点（稍后会详细介绍）或镜像站点。如果您有一个私人网站供少数知道如何找到它的人使用，那么您还希望阻止整个网站被抓取。</p><p>要阻止整个站点，请使用禁止后跟斜杠：</p><pre><code>User-agent：* Disallow：/</code></pre><h2 id="允许一切"><a href="#允许一切" class="headerlink" title="允许一切"></a>允许一切</h2><p>当您计划允许 所有内容时，我可以想到您可能选择创建<code>Robots.txt</code>文件的两个原因：</p><p>作为占位符，要向在网站上工作的任何其他人明确表示您允许一切都是故意的。</p><p>防止对<code>Robots.txt</code>的请求失败，以显示在请求日志中。</p><p>要允许整个站点，您可以使用空的禁令：</p><pre><code>User-agent：* Disallow：</code></pre><p>或者，您可以将<code>Robots.txt</code>文件留空，或者根本没有。爬行者会抓取所有内容，除非你告诉他们不要 。</p><h2 id="Sitemap-指令"><a href="#Sitemap-指令" class="headerlink" title="Sitemap 指令"></a>Sitemap 指令</h2><p>虽然它是可选的，但许多<code>Robots.txt</code>文件都包含一个<code>sitemap</code> 指令：</p><p>网站地图：http：//example.com/sitemap.xml</p><p>这指定了站点地图文件的位置。站点地图是一种特殊格式的文件，列出了您要抓取的所有网址。如果您的站点具有XML网站地图，则最好包含此指令。</p><h2 id="使用-Robots-txt的常见错误"><a href="#使用-Robots-txt的常见错误" class="headerlink" title="使用 Robots.txt的常见错误"></a>使用 <code>Robots.txt</code>的常见错误</h2><p>我看到很多很多不正确的<code>Robots.txt</code>用法。其中最严重的是尝试使用该文件保密某些目录或尝试使用它来阻止恶意爬虫。</p><p>滥用<code>Robots.txt</code>的最严重后果是意外地将您的整个网站隐藏在抓取工具中。密切关注这些 事情。</p><h3 id="当你去制作时忘记隐藏"><a href="#当你去制作时忘记隐藏" class="headerlink" title="当你去制作时忘记隐藏"></a>当你去制作时忘记隐藏</h3><p>所有暂存站点（尚未隐藏在密码后面）都应该包含<code>Robots.txt</code>文件，因为它们不适合公众查看。但是当您的网站上线时，您会希望每个人都能看到它。不要忘记删除或编辑此 文件。</p><p>否则，整个实时网站将从搜索结果中消失。</p><pre><code>User-agent：* Disallow：/</code></pre><p>您可以在测试时检查实时<code>Robots.txt</code>文件，或进行设置，这样您就不必记住这一额外步骤。使用摘要式身份验证等简单协议将登台服务器置于密码之后。然后，您可以为登台服务器提供您打算在实际站点上部署的相同<code>Robots.txt</code>文件。部署时，只需复制所有内容即可。</p><h3 id="试图阻止敌对爬虫"><a href="#试图阻止敌对爬虫" class="headerlink" title="试图阻止敌对爬虫"></a>试图阻止敌对爬虫</h3><p>我见过<code>Robots.txt</code>文件试图明确阻止已知的恶意抓取程序，如下所示：</p><pre><code>User-agent：DataCha0s/2.0 Disallow：/User-agent：ExtractorPro Disallow：/User-agent：EmailSiphon Disallow：/User-agent：EmailWolf 1.00 Disallow：/</code></pre><p>这就像在汽车仪表板上留下一张纸条说：<code>亲爱的小偷：请不要偷这辆车。 谢谢！</code></p><p>这毫无意义。这就像在汽车仪表板上留下一张纸条说：<code>亲爱的小偷：请不要偷这辆车。 谢谢！</code></p><p><code>Robots.txt</code>完全是自愿的，像搜索引擎这样的礼貌爬虫会遵守它。敌意爬行器，如电子邮件收割机，不会。爬虫没有义务遵守<code>Robots.txt</code>中的指南，但主要的选择是这样做的。</p><p>如果您正在尝试阻止错误的抓取工具，请使用用户代理阻止或IP阻止 。</p><h3 id="试图保持目录的秘密"><a href="#试图保持目录的秘密" class="headerlink" title="试图保持目录的秘密"></a>试图保持目录的秘密</h3><p>如果您要保留对公众隐藏的文件或目录，请不要将它们全部列在<code>Robots.txt</code>中，如下所示：</p><pre><code>User-agent：* Disallow：/secret-stuff/Disallow：/compromising-photo.jpg Disallow：/big-list-of-plaintext-passwords.csv</code></pre><p>出于显而易见的原因，这将弊大于利。它为敌对爬虫提供了一种快速，简便的方法来查找您不希望他们找到的文件 。</p><p>这就像在你的车上留下一张纸条上写着：<code>亲爱的小偷：请不要看着隐藏在这辆车的杂物箱中的标有’紧急现金’的黄色信封。 谢谢！</code></p><p>保持目录隐藏的唯一可靠方法是将其置于密码之后。如果你绝对不能把它放在密码后面，这里有三个创可贴解决方案。</p><ol><li>基于目录名称的前几个字符进行阻止。<br>如果目录是<code>/xyz-secret-stuff/</code>，则将其阻塞如下：</li></ol><pre><code>Disallow：/xyz-</code></pre><ol start="2"><li>阻止机器人元标记<br>将以下内容添加到HTML代码中：</li></ol><pre><code>&lt;meta name =`robots`content =`noindex，nofollow`&gt;</code></pre><ol start="3"><li>使用X-Robots-Tag标头阻止。<br>将这样的内容添加到目录的.htaccess文件中：</li></ol><pre><code>标题集X-Robots-Tag`noindex，nofollow`</code></pre><p>同样，这些是创可贴解决方案，这些都不是实际安全的替代品。如果确实需要保密，那么它确实需要在密码后面。</p><h2 id="意外阻止不相关的页面"><a href="#意外阻止不相关的页面" class="headerlink" title="意外阻止不相关的页面"></a>意外阻止不相关的页面</h2><p>假设您需要阻止该 页面：</p><pre><code>http://example.com/admin</code></pre><p>还有 目录中的所有内容：</p><pre><code>http://example.com/admin/</code></pre><p>显而易见的方法是这样做 ：</p><pre><code>Disallow：/admin</code></pre><p>这会阻止你想要的东西，但现在你也不小心阻止了关于宠物护理的文章页面：</p><pre><code>http://example.com/administer-medication-to-your-cat-the-easy-way.html</code></pre><p>本文将与您实际尝试 阻止的页面一起从搜索结果中消失。</p><p>是的，这是一个人为的例子，但我已经看到这种事情发生在现实世界中。最糟糕的是，它通常会被忽视很长一段时间。</p><p>阻止/admin和/admin/而不阻塞任何其他内容的最安全方法是使用两个单独的行：</p><pre><code>Disallow：/admin $ Disallow：/admin/</code></pre><p>请记住，美元符号是一个字符串结尾的运算符，表示<code>URL必须在此处结束。</code>该指令将匹配/admin但不匹配/管理。</p><h2 id="试图将Robots-txt放在子目录中"><a href="#试图将Robots-txt放在子目录中" class="headerlink" title="试图将Robots.txt放在子目录中"></a>试图将<code>Robots.txt</code>放在子目录中</h2><p>假设您只能控制一个巨大网站的一个子目录。</p><pre><code>http://example.com/userpages/yourname/</code></pre><p>如果您需要阻止某些页面，可能会尝试添加<code>Robots.txt</code>文件，如下所示：</p><pre><code>http://example.com/userpages/yourname/`Robots.txt`</code></pre><p>这不起作用，该文件将被忽略。您可以放置​​<code>Robots.txt</code>文件的唯一位置是站点根目录。</p><p>如果您无权访问站点根目录，则无法使用<code>Robots.txt</code>。一些替代选项是使用机器人元标记来阻止页面。或者，如果您可以控制<code>.htaccess</code>文件（或等效文件），则还可以使用X-Robots-Tag标头阻止页面。</p><h2 id="尝试定位特定的子域"><a href="#尝试定位特定的子域" class="headerlink" title="尝试定位特定的子域"></a>尝试定位特定的子域</h2><p>假设您有一个包含许多不同子域的站点：</p><pre><code>http://example.com/http://admin.example.com/http://members.example.com/http://blog.example.com/http://store.example.com/</code></pre><p>您可能想要创建单个<code>Robots.txt</code>文件，然后尝试阻止它的子域，如下所示：</p><p><a href="http://example.com/`Robots.txt`" target="_blank" rel="noopener">http://example.com/`Robots.txt`</a> </p><pre><code> User-agent：* Disallow：admin.example.com Disallow：members.example.com</code></pre><p>这不起作用，无法在<code>Robots.txt</code>文件中指定子域（或域）。给定的<code>Robots.txt</code>文件仅适用于从中加载的子域 。</p><p>那么有没有办法阻止某些子域？是。要阻止某些子域而不阻止其他子域，您需要提供来自不同子域的不同<code>Robots.txt</code>文件。</p><p>这些<code>Robots.txt</code>文件会阻止所有内容：</p><pre><code>http://admin.example.com/`Robots.txt` http://members.example.com/`Robots.txt` </code></pre><hr><pre><code>User-agent：* Disallow：/</code></pre><p>这些将允许一切：</p><pre><code>http://example.com/http://blog.example.com/http://store.example.com/</code></pre><hr><pre><code>User-agent：* Disallow：</code></pre><h2 id="使用不一致的类型情况"><a href="#使用不一致的类型情况" class="headerlink" title="使用不一致的类型情况"></a>使用不一致的类型情况</h2><p>路径区分大小写。</p><pre><code>Disallow：/acme/</code></pre><p>不会阻止<code>/Acme/</code>或 <code>/ACME/</code>。</p><p>如果你需要全部阻止它们，你需要为每个禁用一行：</p><pre><code>Disallow：/acme/Disallow：/Acme/Disallow：/ACME/</code></pre><h2 id="忘记了用户代理线"><a href="#忘记了用户代理线" class="headerlink" title="忘记了用户代理线"></a>忘记了用户代理线</h2><p>所述用户代理线是使用<code>Robots.txt</code>关键的。在任何允许或禁止之前，文件必须具有用户代理行。如果整个文件看起来像这样：</p><pre><code>Disallow：/this Disallow：/that Disallow：/what</code></pre><p>实际上什么都不会被阻止，因为顶部没有用户代理行。该文件必须为：</p><pre><code>User-agent：* Disallow：/this Disallow：/that Disallow：/whatever</code></pre><h2 id="其他用户代理陷阱"><a href="#其他用户代理陷阱" class="headerlink" title="其他用户代理陷阱"></a>其他用户代理陷阱</h2><p>使用不正确的用户代理还存在其他缺陷。假设您有三个目录需要为所有抓取工具阻止，还有一个页面应该仅在Google上明确允许。显而易见（但不正确）的方法可能是尝试这样的事情 ：</p><pre><code>User-agent：* Disallow：/admin/Disallow：/private/Disallow：/dontcrawl/User-agent：Googlebot Allow：/dontcrawl/exception</code></pre><p>此文件实际上允许Google抓取网站上的所有内容。Googlebot（以及大多数其他抓取工具）只会遵守更具体的用户代理行下的规则，并会忽略所有其他规则。在此示例中，它将遵守<code>User-agent：Googlebot</code>下的规则，并将忽略<code>User-agent： *</code> 下的规则。</p><p>要实现此目标，您需要为每个用户代理块重复相同的禁止规则，如下所示：</p><pre><code>User-agent：* Disallow：/admin/Disallow：/private/Disallow：/dontcrawl/User-agent：Googlebot Disallow：/admin/Disallow：/private/Disallow：/dontcrawl/Allow：/dontcrawl/exception</code></pre><h2 id="忘记路径中的主要斜线"><a href="#忘记路径中的主要斜线" class="headerlink" title="忘记路径中的主要斜线"></a>忘记路径中的主要斜线</h2><p>假设您要阻止该 URL：</p><pre><code>http://example.com/badpage</code></pre><p>你有以下（不正确的）<code>Robots.txt</code> 文件：</p><pre><code>User-agent：* Disallow：错误页面</code></pre><p>这根本不会阻止任何事情，路径必须以斜杠开头。如果没有，它永远不会匹配任何东西。阻止URL的正确方法 是：</p><pre><code>User-agent：* Disallow：/badpage</code></pre><h2 id="使用-Robots-txt的提示"><a href="#使用-Robots-txt的提示" class="headerlink" title="使用 Robots.txt的提示"></a>使用 <code>Robots.txt</code>的提示</h2><p>既然您知道如何不将敌对抓取工具发送到您的秘密内容或从搜索结果中消失您的网站，这里有一些提示可以帮助您改进<code>Robots.txt</code>文件。做得好不会提高你的排名（这是战略搜索引擎优化和内容的用途），但至少你会知道爬虫正在找到你想要他们找到的东西。</p><h2 id="竞争允许和不允许"><a href="#竞争允许和不允许" class="headerlink" title="竞争允许和不允许"></a>竞争允许和不允许</h2><p>allow指令用于指定disallow规则的例外。disallow规则阻塞整个目录（例如），allow规则取消阻止该目录中的某些URL。这提出了一个问题，如果给定的URL可以匹配两个规则中的任何一个，爬虫如何决定使用哪个？</p><p>并非所有抓取工具都以完全相同的方式处理竞争允许和禁止，但Google优先考虑路径较长的规则（就字符数而言）。如果两个路径长度相同，则allow优先于disallow。例如，假设<code>Robots.txt</code>文件 是：</p><pre><code>User-agent：* Allow：/baddir/goodpage Disallow：/baddir/</code></pre><p>路径<code>/baddir/goodpage</code>长度为16个字符，路径<code>/baddir/</code>长度仅为8个字符。在这种情况下，允许胜过 不允许。</p><p>将 允许以下URL ：</p><pre><code>http://example.com/baddir/goodpage http://example.com/baddir/goodpagesarehardtofind http://example.com/baddir/goodpage?x=y</code></pre><p>以下内容将被 阻止：</p><pre><code>http://example.com/baddir/http://example.com/baddir/otherpage</code></pre><p>现在考虑以下示例：</p><pre><code>User-agent：* Aloow：/某些Disallow：/*页面</code></pre><p>这些指令会阻止以下 URL吗？</p><pre><code>http://example.com/somepage</code></pre><p>是。路径<code>/some</code>长度为5个字符，路径<code>/* page</code>长度为6个字符，因此disallow获胜。允许被忽略，URL将被阻止。</p><h2 id="阻止特定的查询参数"><a href="#阻止特定的查询参数" class="headerlink" title="阻止特定的查询参数"></a>阻止特定的查询参数</h2><p>假设您要阻止包含查询参数<code>id</code>的所有URL，例如 ：</p><pre><code>http://example.com/somepage?id=123 http://example.com/somepage?a=b&amp;id=123</code></pre><p>你可能想做这样的事情 ：</p><pre><code>Disallow：/* id =</code></pre><p>这将阻止您想要的URL，但也会阻止以 <code>id</code> 结尾的任何其他查询参数：</p><pre><code>http://example.com/users?userid=a0f3e8201b http://example.com/auction?num=9172&amp;bid=1935.00</code></pre><p>那么如何在不阻止<code>用户ID</code>或 <code>出价</code>的情况下阻止<code>id</code>？</p><p>如果您知道<code>id</code>将始终是第一个参数，请使用问号，如下 所示：</p><pre><code>Disallow：/*？id =</code></pre><p>该指令将阻止：</p><pre><code>http://example.com/somepage?id=123</code></pre><p>但它不会阻止：</p><pre><code>http://example.com/somepage?a=b&amp;id=123</code></pre><p>如果您知道<code>id</code>永远不会是第一个参数，请使用＆符号，如下 所示：</p><pre><code>Disallow：/*＆id =</code></pre><p>该指令将阻止：</p><pre><code>http://example.com/somepage?a=b&amp;id=123</code></pre><p>但它不会阻止：</p><pre><code>http://example.com/somepage?id=123</code></pre><p>最安全的方法是 两者兼顾：</p><pre><code>Disallow：/*？id = Disallow：/*＆id =</code></pre><p>没有可靠的方法来匹配两条线。</p><h2 id="阻止包含不安全字符的URL"><a href="#阻止包含不安全字符的URL" class="headerlink" title="阻止包含不安全字符的URL"></a>阻止包含不安全字符的URL</h2><p>假设您需要阻止包含不安全URL的字符的URL，可能发生这种情况的一种常见情况是服务器端模板代码意外暴露给Web。对于 例如：</p><pre><code>http://example.com/search?q=&lt;% var_name％&gt;</code></pre><p>如果您尝试像这样阻止该URL，它将无法 工作：</p><pre><code>User-agent：* Disallow：/search？q=&lt;％var_name％&gt;</code></pre><p>如果您在Google的<code>Robots.txt</code>测试工具（在Search Console中提供）中测试此指令，您会发现它不会阻止该网址。为什么？因为该指令实际上是根据 URL 检查的：</p><pre><code>http://example.com/search?q=%3C%%20var_name%20%%3E</code></pre><p>所有Web 用户代理（包括抓取工具）都会自动对任何不符合URL安全的字符进行URL编码。这些字符包括：空格，小于或大于符号，单引号， 双引号和非ASCII 字符。</p><p>阻止包含不安全字符的URL的正确方法是阻止转义版本：</p><pre><code>User-agent：* Disallow：/search？q =％3C %% 20var_name％20 %% 3E</code></pre><p>获取URL的转义版本的最简单方法是单击浏览器中的链接，然后从地址 字段中复制并粘贴URL 。</p><h2 id="如何匹配美元符号"><a href="#如何匹配美元符号" class="headerlink" title="如何匹配美元符号"></a>如何匹配美元符号</h2><p>假设您要阻止包含美元符号的所有网址，例如 ：</p><pre><code>http://example.com/store?price=$10</code></pre><p>以下内容 不起作用：</p><pre><code>Disallow：/* $</code></pre><p>该指令实际上会阻止站点上的所有内容。当在指令末尾使用时，美元符号表示<code>URL在此处结束。</code>因此，上面将阻止路径以斜杠开头的每个URL，后跟零个或多个字符，后跟URL的结尾。此规则适用于任何有效的URL。为了解决这个问题，诀窍是在美元符号后添加一个额外的星号，如下所示：</p><pre><code>Disallow：/* $ *</code></pre><p>在这里，美元符号不再位于路径的尽头，因此它失去了它的特殊含义。该指令将匹配包含文字美元符号的任何URL。请注意，最终星号的唯一目的是防止美元符号成为最后一个 字符。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>有趣的事实：谷歌在进行语义搜索的过程中，通常会正确地解释拼写错误或格式错误的指令。例如，Google会在没有投诉的情况下接受以下任何内容：</p><pre><code>UserAgent：* Disallow /this Dissalow：/that</code></pre><p>这并不意味着你应该忽略指令的格式和拼写，但如果你确实犯了错误，谷歌通常会让你逃脱它。但是，其他爬虫可能 不会。</p><p>人们经常在<code>Robots.txt</code>文件中使用尾随通配符。这是无害的，但它也没用; 我认为这是糟糕的形式。</p><p>对于例如：</p><pre><code>Disallow：/somedir/*</code></pre><p>与以下内容完全相同 ：</p><pre><code>Disallow：/somedir/</code></pre><p>当我看到这个时，我想，<code>这个人不明白</code>Robots.txt<code>是如何工作的。</code>我看到它很多。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>请记住，<code>Robots.txt</code>必须位于根目录中，必须以用户代理行开头，不能阻止恶意爬虫，也不应该用于保密目录。使用此文件的许多困惑源于人们期望它比它更复杂的事实。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea使用Vue的v-bind，v-on报错</title>
      <link href="/2019/10/21/idea%E4%BD%BF%E7%94%A8Vue%E7%9A%84v-bind%EF%BC%8Cv-on%E6%8A%A5%E9%94%99/"/>
      <url>/2019/10/21/idea%E4%BD%BF%E7%94%A8Vue%E7%9A%84v-bind%EF%BC%8Cv-on%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考<a href="https://blog.csdn.net/weixin_42795449/article/details/84103312" target="_blank" rel="noopener">解决在WebStorm中使用Vue的v-bind，v-on报错</a></p></blockquote><p><code>File</code>–&gt;<code>Settings</code>–&gt;<code>Editor</code>–&gt;<code>Inspections</code>–&gt;<code>XML</code></p><p>把 <code>Unbound XML namespace prefix</code>的勾去掉<br><code>应用</code>即可</p><p><img src="https://i.loli.net/2019/10/29/AL1RE8er5xZtgco.png" alt="QQ截图20191021172004.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea配置less自动编译</title>
      <link href="/2019/10/21/idea%E9%85%8D%E7%BD%AEless%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/"/>
      <url>/2019/10/21/idea%E9%85%8D%E7%BD%AEless%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考: <a href="http://www.bmqy.net/1473.html" target="_blank" rel="noopener">idea配置less自动编译</a></p></blockquote><h2 id="1-电脑安装node-js环境；"><a href="#1-电脑安装node-js环境；" class="headerlink" title="1. 电脑安装node.js环境；"></a>1. 电脑安装<code>node.js</code>环境；</h2><p>window下直接上<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">官网</a>下载node.msi文件下载安装即可<br>安装完成后在命令行执行如下命令表明安装成功</p><pre><code>npm -vnode -v</code></pre><p><img src="https://i.loli.net/2019/10/29/uNP6zsQTBr7ljXC.png" alt="QQ截图20191021085827.png"></p><h2 id="2-全局安装less"><a href="#2-全局安装less" class="headerlink" title="2. 全局安装less"></a>2. 全局安装<code>less</code></h2><pre><code>npm install -g less</code></pre><h2 id="3-配置idea"><a href="#3-配置idea" class="headerlink" title="3. 配置idea"></a>3. 配置<code>idea</code></h2><h4 id="3-1-安装nodejs插件"><a href="#3-1-安装nodejs插件" class="headerlink" title="3.1 安装nodejs插件"></a>3.1 安装<code>nodejs</code>插件</h4><p>打开<code>idea</code>→<code>settings</code>→<code>plugins</code>安装：<code>nodejs</code>插件，并按以下步骤进行配置：</p><p><img src="https://i.loli.net/2019/10/29/gCRXmz1WN7Shv56.png" alt="1480587751120337.png"><br> 安装完毕后重启idea</p><h4 id="3-2-添加less组件"><a href="#3-2-添加less组件" class="headerlink" title="3.2 添加less组件"></a>3.2 添加<code>less</code>组件</h4><ol><li>打开<code>idea</code>→<code>settings</code>→<code>Languages &amp; Frameworks</code>→<code>Node.js and NPM</code>；</li><li>在打开的面板中点击右侧<code>+</code>加号按钮添加需要的<code>less</code>组件（如果此处不能添加，请使用npm命令进行全局安装）。</li></ol><p><img src="https://i.loli.net/2019/10/29/AQtv3oMhwEJIaTq.png" alt="QQ截图20191021091846.png"></p><h4 id="3-3-安装file-watchers插件"><a href="#3-3-安装file-watchers插件" class="headerlink" title="3.3 安装file watchers插件"></a>3.3 安装<code>file watchers</code>插件</h4><p>打开<code>idea</code>→<code>settings</code>→<code>plugins</code>安装：<code>file watchers</code>插件，并按以下步骤进行设置：</p><p><img src="https://i.loli.net/2019/10/29/mdBFGQoka4S7Y1l.png" alt="1480587731788935.png"></p><p>安装完后重启idea</p><h4 id="3-4-配置file-watchers"><a href="#3-4-配置file-watchers" class="headerlink" title="3.4 配置file watchers"></a>3.4 配置<code>file watchers</code></h4><ol><li><p>打开<code>idea</code>→<code>settings</code>→<code>tools</code>→<code>file watchers</code>；</p></li><li><p>在打开的面板中点击右侧加号按钮添加less配置，貌似插件自动就配置好了</p></li></ol><p><img src="https://i.loli.net/2019/10/29/3ouUSaehO4wMEN1.png" alt="QQ截图20191021091922.png"></p><p>以上步骤成功后，编辑less文件即可自动编译成css文件。</p><p><img src="https://i.loli.net/2019/10/29/gtUcJLRCKbHWBM7.png" alt="QQ截图20191021092045.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过IP获取到对应的地理位置信息</title>
      <link href="/2019/10/17/%E9%80%9A%E8%BF%87IP%E8%8E%B7%E5%8F%96%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
      <url>/2019/10/17/%E9%80%9A%E8%BF%87IP%E8%8E%B7%E5%8F%96%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载: <a href="https://learnku.com/courses/laravel-package/2019/get-the-corresponding-geo-location-information-through-ip-toranngeoip/2024" target="_blank" rel="noopener">通过 IP 获取到对应的地理位置信息——torann/geoip</a></p></blockquote><p><a href="https://github.com/Torann/laravel-geoip" target="_blank" rel="noopener">torann/geoip</a> 是一个通过 IP 获取到对应的地理位置信息的扩展包，有的时候我们需要记录或者显示用户的地理位置信息，那么这个扩展包就非常有用了。</p><h2 id="场景说明"><a href="#场景说明" class="headerlink" title="场景说明"></a>场景说明</h2><p>在 LaraBBS 中我们可以尝试完成在  <code>footer</code> 中显示当前用户 IP 对应的位置信息。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先可以看一下扩展包的 <a href="http://lyften.com/projects/laravel-geoip/doc/" target="_blank" rel="noopener">文档</a>，能够快速的了解这个扩展包。</p><pre><code>$ composer require torann/geoip</code></pre><p><img src="https://i.loli.net/2019/10/29/45NsLmpMUAgqJkQ.png" alt="SJHTvv9T78.png"></p><p>将配置文件发布出来：</p><pre><code>$ php artisan vendor:publish --provider=&quot;Torann\GeoIP\GeoIPServiceProvider&quot; --tag=config</code></pre><p><img src="https://i.loli.net/2019/10/29/jKvep168lTVEWf2.png" alt="4DaCxfVcae.png"></p><blockquote><p>注意如果不发布配置文件会遇到报错： <code>Exception with message &#39;The GeoIP service is not valid.&#39;</code></p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>torann/geoip</code> 使用起来非常方便，它已经提供了辅助方法和 Facade：</p><pre><code>- `geoip($ip);` ；- `GeoIp::getLocation($ip)`。</code></pre><p>上面两种方式效果相同，都会根据传入的 IP 返回 <code>\Torann\GeoIP\Location</code> 对象。这个对象包含了对应的位置信息。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>先来 <code>tinker</code> 中测试一下：</p><p><code>php artisan tinker</code> 打开 Tinker：</p><pre><code>$ip = &apos;119.4.121.109&apos;;geoip($ip)-&gt;toArray();</code></pre><p><img src="https://i.loli.net/2019/10/29/pG2FELT9PHfXzIO.png" alt="Jvkj64w9Ww.png"></p><p>可以看到 IP 对应的地址信息了，但是返回的信息都是英文的，我们需要中文的数据，方便显示。</p><h3 id="修改为中文"><a href="#修改为中文" class="headerlink" title="修改为中文"></a>修改为中文</h3><p>修改语言只需要修改 <code>geoip.php</code> 中的配置即可，将 <code>services.ipapi.lang</code> 修改为 <code>zh-CN</code>：</p><p><em>config/geoip.php</em></p><pre><code>&apos;services&apos; =&gt; [...    &apos;ipapi&apos; =&gt; [        &apos;class&apos; =&gt; \Torann\GeoIP\Services\IPApi::class,        &apos;secure&apos; =&gt; true,        &apos;key&apos; =&gt; env(&apos;IPAPI_KEY&apos;),        &apos;continent_path&apos; =&gt; storage_path(&apos;app/continents.json&apos;),        &apos;lang&apos; =&gt; &apos;zh-CN&apos;,    ],]</code></pre><p>关闭 <code>tinker</code>，任何的代码修改都需要重启 <code>tinker</code> 才会生效，同时使用 <code>cache:clear</code> 清除缓存，再次打开 tinker，运行上述调试代码：</p><p><img src="https://i.loli.net/2019/10/29/ltLQZ9RgmMwvoJC.png" alt="oKPIA0vcm5.png"></p><p>正确的返回了中文数据。</p><h3 id="修改页面显示"><a href="#修改页面显示" class="headerlink" title="修改页面显示"></a>修改页面显示</h3><p>调试成功以后可以开始开发我们的功能了，我们需要再全局的 <code>footer</code> 视图中显示当前用户的位置信息，那么就需要将数据提供给 <code>footer</code> 视图，这时候就可以利用 <a href="https://learnku.com/docs/laravel/5.6/views/1369#b492db" target="_blank" rel="noopener">视图合成器</a> 了，不是太了解的同学可以看一下文档。</p><p>首先创建  <code>ComposerServiceProvider</code>：</p><pre><code>$ php artisan make:provider ComposerServiceProvider</code></pre><p><img src="https://i.loli.net/2019/10/29/wRfYrN1OgkpeSo4.png" alt="TtWe2QvX57.png"></p><p>将 ComposerServiceProvider 增加到 <code>config/app.php</code> 中:<br><em>config/app.php</em></p><pre><code>...        App\Providers\EventServiceProvider::class,        App\Providers\RouteServiceProvider::class,        App\Providers\ComposerServiceProvider::class,...</code></pre><p>在 <code>ComposerServiceProvider</code> 的 <code>boot</code> 方法中为视图提供数据：<br><em>app/Providers/ComposerServiceProvider.php</em></p><pre><code>&lt;?phpnamespace App\Providers;use Illuminate\Support\ServiceProvider;use Illuminate\Http\Request;class ComposerServiceProvider extends ServiceProvider{    /**     * Bootstrap the application services.     *     * @return void     */    public function boot(Request $request)    {        // 在 footer 视图中绑定 location 数据        view()-&gt;composer(&apos;layouts._footer&apos;, function($view) use ($request) {            $location = geoip($request-&gt;ip());            $view-&gt;with(&apos;location&apos;, $location-&gt;country.&apos; - &apos;.$location-&gt;state_name.&apos; - &apos;.$location-&gt;city);        });    }}</code></pre><p>我们为 <code>layouts._footer</code> 提供了数据 <code>location</code>，通过 <code>$request-&gt;ip()</code> 即可获取当前用户的 IP，然后通过 <code>geoip</code> 获取用户的位置信息，最终将 <code>country</code>，<code>state_name</code>，<code>city</code> 三个值拼接赋值给 <code>$location</code>。</p><p>修改 footer 页面：</p><p><em>resources/views/layouts/footer.blade.php</em></p><pre><code>&lt;footer class=&quot;footer&quot;&gt;    &lt;div class=&quot;container&quot;&gt;    .    .    .        &lt;p class=&quot;pull-right&quot;&gt;&lt;a href=&quot;mailto:{{ setting('contact_email') }}&quot;&gt;联系我们&lt;/a&gt;&lt;/p&gt;        &lt;p class=&quot;pull-right&quot; style=&quot;margin-right: 20px&quot;&gt; 来自: {{$location}}&lt;/p&gt;    &lt;/div&gt;&lt;/footer&gt;</code></pre><p>只是在 最后增加了一行数据  <code>&lt;p class=&quot;pull-right&quot; style=&quot;margin-right: 20px&quot;&gt; 来自: &lt;/p&gt;</code> 直接显示了 <code>$location</code>。</p><p>打开 <a href="http://larabbs.test/" target="_blank" rel="noopener">http://larabbs.test/</a> 查看底部的 <code>footer</code>:</p><p><img src="https://i.loli.net/2019/10/29/rcyT7kOzuYpKNgB.png" alt="JL4N3IQRM8.png"></p><p>显示了数据，但是显示的是数据貌似有点问题，这是因为我们在本地的虚拟机中调试，并没有真实的 IP，所以 <code>torann/geoip</code> 显示了一个默认的位置信息，这个信息配置在了 <code>geoip.default_location</code> 中，我们可以修改一下默认的配置：</p><p><em>config/geoip.php</em></p><pre><code>...    &apos;default_location&apos; =&gt; [        &apos;ip&apos; =&gt; &apos;127.0.0.0&apos;,        &apos;iso_code&apos; =&gt; &apos;CN&apos;,        &apos;country&apos; =&gt; &apos;中国&apos;,        &apos;city&apos; =&gt; &apos;成都(本地调试)&apos;,        &apos;state&apos; =&gt; &apos;SC&apos;,        &apos;state_name&apos; =&gt; &apos;四川省&apos;,        &apos;postal_code&apos; =&gt; &apos;&apos;,        &apos;lat&apos; =&gt; null,        &apos;lon&apos; =&gt; null,        &apos;timezone&apos; =&gt; &apos;Asia/Shanghai&apos;,        &apos;continent&apos; =&gt; &apos;NA&apos;,        &apos;default&apos; =&gt; true,        &apos;currency&apos; =&gt; &apos;CNY&apos;,    ],...</code></pre><p>刷新 <a href="http://larabbs.test/" target="_blank" rel="noopener">http://larabbs.test/</a> 显示了我们配置的默认信息。</p><p><img src="https://i.loli.net/2019/10/29/1P6GBdQeDsEMFr3.png" alt="jxpqAQyIpC.png"></p><h2 id="使用其他-Service"><a href="#使用其他-Service" class="headerlink" title="使用其他 Service"></a>使用其他 Service</h2><p><code>torann/geoip</code> 提供了三种根据 IP 获取位置信息的服务：</p><pre><code>- ipapi —— 默认的方式，利用了 http://ip-api.com/ 的接口来获取位置信息；- maxmind_database —— 由 [www.maxmind.com](https://www.maxmind.com/) 提供的开源数据，需要下载数据到本地；- maxmind_api —— 利用 [www.maxmind.com](https://www.maxmind.com/) 提供的接口获取位置信息，需要付费，本文不做讲解。</code></pre><p>上文中我们使用了默认的方式 <code>ipapi</code>，也就是请求了 <a href="http://ip-api.com/" target="_blank" rel="noopener">http://ip-api.com/</a> 的接口，那么如果处于某些原因，无法请求到接口，那么就可以使用 <code>maxmind_database</code> 的方式，将数据同步至本地，进行本地查询。</p><h3 id="使用-maxmind"><a href="#使用-maxmind" class="headerlink" title="使用 maxmind"></a>使用 maxmind</h3><p>要使用 <code>maxmind_database</code> 需要先安装 <code>geoip2/geoip2</code> 这个扩展包。</p><p><img src="https://i.loli.net/2019/10/29/IWTH61VZ8cv2PS7.png" alt="wQQm73abnC.png"></p><p>安装成功后，修改一下配置，将使用的 service 切换为 <code>maxmind_database</code>，同时修改使用的语言为 <code>zh-CN</code>：</p><pre><code>...    &apos;service&apos; =&gt; &apos;maxmind_database&apos;,    .    .    .    &apos;services&apos; =&gt; [        &apos;maxmind_database&apos; =&gt; [                &apos;class&apos; =&gt; \Torann\GeoIP\Services\MaxMindDatabase::class,                &apos;database_path&apos; =&gt; storage_path(&apos;app/geoip.mmdb&apos;),                &apos;update_url&apos; =&gt; &apos;https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz&apos;,                &apos;locales&apos; =&gt; [&apos;zh-CN&apos;],            ],...</code></pre><p>直接调用 <code>geoip:update</code> 命令可以将数据信息同步至本地：</p><pre><code>$ php artisan geoip:update</code></pre><p><img src="https://i.loli.net/2019/10/29/UNdVXavGr1JpH74.png" alt="uKKbZ90mpe.png"></p><p>数据文件下载到了 <code>storage/app/geoip.mmdb</code> 中。</p><p>清空缓存，打开tinker，随便输入一个 IP 进行调试：</p><p><img src="https://i.loli.net/2019/10/29/zO18KnfmR3EaYov.png" alt="1WXJU1t21w.png"></p><p>可以得到正确的结果。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel修改用户模块的密码验证</title>
      <link href="/2019/10/16/laravel%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/10/16/laravel%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E7%9A%84%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>做项目的时候，用户认证几乎是必不可少的，如果我们的项目由于一些原因不得不使用 <code>users</code> 之外的用户表进行认证，那么就需要多做一点工作来完成这个功能。</p></blockquote><blockquote><p>现在假设我们只需要修改登录用户的表，表名和表结构都与框架默认的表<code>users</code>不同，文档没有教我们如何去做，但是别慌，稍微看下框架实现用户认证的源码就能轻松实现。</p></blockquote><p>首先，自定义一张表用来登录，表结构和模拟数据如下：</p><blockquote><p>表 admins</p></blockquote><table><thead><tr><th>id</th><th>login_name</th><th>login_pass</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>$2y$10$2MUhp7b6ghVOngb/.b/x6uuEW/yL3FqPKJztawrM0U577Clf07xda</td></tr></tbody></table><h4 id="从配置文件入手"><a href="#从配置文件入手" class="headerlink" title="从配置文件入手"></a>从配置文件入手</h4><p>用户认证相关的配置都保存在<code>config/auth.php</code>文件中，先来看看配置文件的内容：</p><pre><code>    &lt;?php    return [        /*        |--------------------------------------------------------------------------        | Authentication Defaults        |--------------------------------------------------------------------------        |        | This option controls the default authentication &quot;guard&quot; and password        | reset options for your application. You may change these defaults        | as required, but they&apos;re a perfect start for most applications.        |        */        &apos;defaults&apos; =&gt; [            &apos;guard&apos; =&gt; &apos;web&apos;,            &apos;passwords&apos; =&gt; &apos;users&apos;,        ],        /*    |--------------------------------------------------------------------------    | Authentication Guards    |--------------------------------------------------------------------------    |    | Next, you may define every authentication guard for your application.    | Of course, a great default configuration has been defined for you    | here which uses session storage and the Eloquent user provider.    |    | All authentication drivers have a user provider. This defines how the    | users are actually retrieved out of your database or other storage    | mechanisms used by this application to persist your user&apos;s data.    |    | Supported: &quot;session&quot;, &quot;token&quot;    |    */    &apos;guards&apos; =&gt; [        &apos;web&apos; =&gt; [            &apos;driver&apos; =&gt; &apos;session&apos;,            &apos;provider&apos; =&gt; &apos;users&apos;,        ],        &apos;api&apos; =&gt; [            &apos;driver&apos; =&gt; &apos;passport&apos;,            &apos;provider&apos; =&gt; &apos;users&apos;,        ],    ],    /*    |--------------------------------------------------------------------------    | User Providers    |--------------------------------------------------------------------------    |    | All authentication drivers have a user provider. This defines how the    | users are actually retrieved out of your database or other storage    | mechanisms used by this application to persist your user&apos;s data.    |    | If you have multiple user tables or models you may configure multiple    | sources which represent each model / table. These sources may then    | be assigned to any extra authentication guards you have defined.    |    | Supported: &quot;database&quot;, &quot;eloquent&quot;    |    */    &apos;providers&apos; =&gt; [        &apos;users&apos; =&gt; [            &apos;driver&apos; =&gt; &apos;eloquent&apos;,            &apos;model&apos; =&gt; App\User::class,        ],        // &apos;users&apos; =&gt; [        //     &apos;driver&apos; =&gt; &apos;database&apos;,        //     &apos;table&apos; =&gt; &apos;users&apos;,        // ],    ],    /*    |--------------------------------------------------------------------------    | Resetting Passwords    |--------------------------------------------------------------------------    |    | You may specify multiple password reset configurations if you have more    | than one user table or model in the application and you want to have    | separate password reset settings based on the specific user types.    |    | The expire time is the number of minutes that the reset token should be    | considered valid. This security feature keeps tokens short-lived so    | they have less time to be guessed. You may change this as needed.    |    */    &apos;passwords&apos; =&gt; [        &apos;users&apos; =&gt; [            &apos;provider&apos; =&gt; &apos;users&apos;,            &apos;table&apos; =&gt; &apos;password_resets&apos;,            &apos;expire&apos; =&gt; 60,        ],    ],];</code></pre><p>默认使用的守卫是<code>web</code>，而<code>web</code>守卫使用的认证驱动是<code>session</code>，用户提供器是<code>users</code>。假设我们的需求只是将用户的提供器由<code>users</code>改为<code>admins</code>，那么我们需要做两步操作：</p><ul><li>修改默认的用户提供器，将<code>provider=&gt;&#39;users&#39;</code>改为<code>provider=&gt;&#39;admins&#39;</code></li></ul><pre><code>&apos;guards&apos; =&gt; [      &apos;web&apos; =&gt; [          &apos;driver&apos; =&gt; &apos;session&apos;,          &apos;provider&apos; =&gt; &apos;users&apos;,      ],  ],</code></pre><ul><li>配置<code>admins</code>提供器，假设依旧使用<code>eloquent</code>作为驱动，并创建好了<code>admins</code>表的模型</li></ul><pre><code>&apos;providers&apos; =&gt; [        &apos;admins&apos; =&gt; [            &apos;driver&apos; =&gt; &apos;eloquent&apos;,            &apos;model&apos; =&gt; App\Admin::class        ]    ],</code></pre><h4 id="使用Auth门面的attempt方法进行登录"><a href="#使用Auth门面的attempt方法进行登录" class="headerlink" title="使用Auth门面的attempt方法进行登录"></a>使用<code>Auth</code>门面的<code>attempt</code>方法进行登录</h4><p><code>SessionGuard</code> 中的<code>attempt</code>方法：</p><pre><code>//Illuminate\Auth\SessionGuard public function attempt(array $credentials = [], $remember = false)    {        $this-&gt;fireAttemptEvent($credentials, $remember);        $this-&gt;lastAttempted = $user = $this-&gt;provider-&gt;retrieveByCredentials($credentials);        // If an implementation of UserInterface was returned, we&apos;ll ask the provider        // to validate the user against the given credentials, and if they are in        // fact valid we&apos;ll log the users into the application and return true.        if ($this-&gt;hasValidCredentials($user, $credentials)) {            $this-&gt;login($user, $remember);            return true;        }        // If the authentication attempt fails we will fire an event so that the user        // may be notified of any suspicious attempts to access their account from        // an unrecognized user. A developer may listen to this event as needed.        $this-&gt;fireFailedEvent($user, $credentials);        return false;    }</code></pre><p>该方法中调用 <code>UserProvider</code> 接口的<code>retrieveByCredentials</code>方法检索用户，根据我们的配置，<code>UserProvider</code>接口的具体实现应该是<code>EloquentUserProvider</code>，因此，我们定位到<code>EloquentUserProvider</code>的<code>retrieveByCredentials</code>方法：</p><pre><code>//Illuminate\Auth\EloquentUserProviderpublic function retrieveByCredentials(array $credentials)    {        if (empty($credentials) ||           (count($credentials) === 1 &amp;&amp;            array_key_exists(&apos;password&apos;, $credentials))) {            return;        }        // First we will add each credential element to the query as a where clause.        // Then we can execute the query and, if we found a user, return it in a        // Eloquent User &quot;model&quot; that will be utilized by the Guard instances.        $query = $this-&gt;createModel()-&gt;newQuery();        foreach ($credentials as $key =&gt; $value) {            if (Str::contains($key, &apos;password&apos;)) {                continue;            }            if (is_array($value) || $value instanceof Arrayable) {                $query-&gt;whereIn($key, $value);            } else {                $query-&gt;where($key, $value);            }        }        return $query-&gt;first();    }</code></pre><p>该方法会使用传入的参数（不包含<code>password</code>）到我们配置的数据表中搜索数据，查询到符合条件的数据之后返回对应的用户信息，然后<code>attempt</code>方法会进行密码校验，校验密码的方法为：</p><pre><code>//Illuminate\Auth\SessionGuard/**     * Determine if the user matches the credentials.     *     * @param  mixed  $user     * @param  array  $credentials     * @return bool     */    protected function hasValidCredentials($user, $credentials)    {        return ! is_null($user) &amp;&amp; $this-&gt;provider-&gt;validateCredentials($user, $credentials);    }</code></pre><p>进一步查看<code>EloquentUserProvider</code>中的<code>validateCredentials</code>方法</p><pre><code>//Illuminate\Auth\EloquentUserProviderpublic function validateCredentials(UserContract $user, array $credentials){    $plain = $credentials[&apos;password&apos;];    return $this-&gt;hasher-&gt;check($plain, $user-&gt;getAuthPassword());}</code></pre><p>通过<code>validateCredentials</code>可以看出，提交的认证数据中密码字段名必须是<code>password</code>，这个无法自定义。同时可以看到，入参<code>$user</code>必须实现<code>Illuminate\Contracts\Auth\Authenticatable</code>接口（<code>UserContract</code>是别名）。</p><h4 id="修改-Admin-模型"><a href="#修改-Admin-模型" class="headerlink" title="修改 Admin 模型"></a>修改 <code>Admin</code> 模型</h4><p>Admin模型必须实现<code>Illuminate\Contracts\Auth\Authenticatable</code>接口，可以借鉴一下<code>User</code>模型，让<code>Admin</code>直接继承<code>Illuminate\Foundation\Auth\User</code> 就可以，然后重写<code>getAuthPassword</code>方法，正确获取密码字段：</p><pre><code>// App\Adminpublic function getAuthPassword(){    return $this-&gt;login_pass;}</code></pre><p>不出意外的话，这个时候就能使用<code>admins</code>表进行登录了。</p><hr><p>Larval 5.4的默认Auth登陆传入邮件和用户密码到attempt 方法来认证，通过email 的值获取，如果用户被找到，经哈希运算后存储在数据中的password将会和传递过来的经哈希运算处理的passwrod值进行比较。如果两个经哈希运算的密码相匹配那么将会为这个用户开启一个认证Session。</p><p>参考上面的分析，我们就需要对<code>EloquentUserProvider</code>中的<code>validateCredentials</code>方法进行重写,步骤如下</p><h4 id="1-修改-App-Models-User-php-添加如下代码"><a href="#1-修改-App-Models-User-php-添加如下代码" class="headerlink" title="1. 修改 App\Models\User.php 添加如下代码"></a>1. 修改 App\Models\User.php 添加如下代码</h4><pre><code>public function getAuthPassword()    {        return [&apos;password&apos; =&gt; $this-&gt;attributes[&apos;password&apos;], &apos;salt&apos; =&gt; $this-&gt;attributes[&apos;salt&apos;]];    }</code></pre><h4 id="2-建立一个自己的UserProvider-php-的实现"><a href="#2-建立一个自己的UserProvider-php-的实现" class="headerlink" title="2. 建立一个自己的UserProvider.php 的实现"></a>2. 建立一个自己的UserProvider.php 的实现</h4><pre><code>&lt;?php namespace App\Foundation\Auth;use Illuminate\Auth\EloquentUserProvider;use Illuminate\Contracts\Auth\Authenticatable;use Illuminate\Support\Str;/** * 重写用户密码校验逻辑 * Class GfzxEloquentUserProvider * @package App\Foundation\Auth */class GfzxEloquentUserProvider extends EloquentUserProvider{    /**     * Validate a user against the given credentials.     *     * @param  \Illuminate\Contracts\Auth\Authenticatable $user     * @param  array $credentials     * @return bool     */    public function validateCredentials(Authenticatable $user, array $credentials)    {        $plain = $credentials[&apos;password&apos;];        $authPassword = $user-&gt;getAuthPassword();        return md5($plain . $authPassword[&apos;salt&apos;]) == $authPassword[&apos;password&apos;];    }}</code></pre><h4 id="3-将User-Providers换成我们自己的GfzxEloquentUserProvider"><a href="#3-将User-Providers换成我们自己的GfzxEloquentUserProvider" class="headerlink" title="3. 将User Providers换成我们自己的GfzxEloquentUserProvider"></a>3. 将User Providers换成我们自己的GfzxEloquentUserProvider</h4><p>修改 <code>app/Providers/AuthServiceProvider.php</code></p><pre><code>&lt;?phpnamespace App\Providers;use App\Foundation\Auth\GfzxEloquentUserProvider;use Auth;use Illuminate\Support\Facades\Gate;use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;class AuthServiceProvider extends ServiceProvider{    .    .    .    /**     * Register any authentication / authorization services.     *     * @return void     */    public function boot()    {        $this-&gt;registerPolicies();        Auth::provider(&apos;gfzx-eloquent&apos;, function ($app, $config) {            return new GfzxEloquentUserProvider($this-&gt;app[&apos;hash&apos;], $config[&apos;model&apos;]);        });    }}</code></pre><h4 id="4-修改-config-auth-php"><a href="#4-修改-config-auth-php" class="headerlink" title="4. 修改 config/auth.php"></a>4. 修改 config/auth.php</h4><pre><code>&apos;providers&apos; =&gt; [     &apos;users&apos; =&gt; [         &apos;driver&apos; =&gt; &apos;gfzx-eloquent&apos;,         &apos;model&apos; =&gt; App\Models\User::class,     ], ],</code></pre><p>这是就可以用过salt+passwrod的方式密码认证了</p><h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><p><a href="https://blog.csdn.net/wepe12/article/details/78749326" target="_blank" rel="noopener">laravel 修改用户模块密码验证</a></p><p><a href="https://learnku.com/index.php/articles/27806" target="_blank" rel="noopener">Laravel 中自定义用户登录的数据表</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel结合webuploader(单页面单个上传插件)</title>
      <link href="/2019/10/16/laravel%E7%BB%93%E5%90%88webuploader-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%8D%95%E4%B8%AA%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/16/laravel%E7%BB%93%E5%90%88webuploader-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%8D%95%E4%B8%AA%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="1-配置css"><a href="#1-配置css" class="headerlink" title="1. 配置css"></a>1. 配置css</h4><pre><code> &lt;script src=&quot;{{asset('js/jquery.min.js')}}&quot;&gt;&lt;/script&gt;&lt;!--引入CSS--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ asset('resources/webuploader-0.1.5/webuploader.css') }}&quot;&gt;&lt;!--引入JS--&gt;&lt;script type=&quot;text/javascript&quot;        src=&quot;{{ asset('resources/webuploader-0.1.5/webuploader.js')  }}&quot;&gt;&lt;/script&gt;</code></pre><h4 id="2-配置html"><a href="#2-配置html" class="headerlink" title="2. 配置html"></a>2. 配置html</h4><pre><code>&lt;!--dom结构部分--&gt;&lt;div id=&quot;uploader-demo&quot;&gt;    &lt;!--用来存放item--&gt;    &lt;div id=&quot;fileList&quot; class=&quot;uploader-list&quot;&gt;&lt;/div&gt;    &lt;div id=&quot;filePicker&quot;&gt;选择图片&lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="3-执行js代码"><a href="#3-执行js代码" class="headerlink" title="3. 执行js代码"></a>3. 执行js代码</h4><pre><code>&lt;script&gt;    // 初始化Web Uploader    var thumbnailWidth = 100;    var thumbnailHeight = 100;    var uploader = WebUploader.create({        // 选完文件后，是否自动上传。        auto: true,        formData: {            // 这里的token是外部生成的长期有效的，如果把token写死，是可以上传的。            _token:&apos;{{ csrf_token() }}&apos;        },        // swf文件路径        swf: &quot;{{ asset('resources/webuploader-0.1.5/Uploader.swf') }}&quot;,        // 文件接收服务端。        server: &quot;{{ route('user.imageUploader') }}&quot;,        // 选择文件的按钮。可选。        // 内部根据当前运行是创建，可能是input元素，也可能是flash.        pick: {            id : &apos;#filePicker&apos;,            multiple : false        },        // 只允许选择图片文件。        accept: {            title: &apos;Images&apos;,            extensions: &apos;gif,jpg,jpeg,bmp,png&apos;,            mimeTypes: &apos;image/*&apos;        },    });    // 当有文件添加进来的时候    uploader.on(&apos;fileQueued&apos;, function (file) {        var $list = $(&quot;#fileList&quot;);        var $li = $(            &apos;&lt;div id=&quot;&apos; + file.id + &apos;&quot; class=&quot;file-item thumbnail&quot;&gt;&apos; +            &apos;&lt;img&gt;&apos; +            &apos;&lt;div class=&quot;info&quot;&gt;&apos; + file.name + &apos;&lt;/div&gt;&apos; +            &apos;&lt;/div&gt;&apos;            ),            $img = $li.find(&apos;img&apos;);        // $list为容器jQuery实例        $list.append($li);        // 创建缩略图        // 如果为非图片文件，可以不用调用此方法。        // thumbnailWidth x thumbnailHeight 为 100 x 100        uploader.makeThumb(file, function (error, src) {            if (error) {                $img.replaceWith(&apos;&lt;span&gt;不能预览&lt;/span&gt;&apos;);                return;            }            $img.attr(&apos;src&apos;, src);        }, thumbnailWidth, thumbnailHeight);    });    // 文件上传过程中创建进度条实时显示。    uploader.on(&apos;uploadProgress&apos;, function (file, percentage) {        var $li = $(&apos;#&apos; + file.id),            $percent = $li.find(&apos;.progress span&apos;);        // 避免重复创建        if (!$percent.length) {            $percent = $(&apos;&lt;p class=&quot;progress&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&apos;)                .appendTo($li)                .find(&apos;span&apos;);        }        $percent.css(&apos;width&apos;, percentage * 100 + &apos;%&apos;);    });    // 文件上传成功，给item添加成功class, 用样式标记上传成功。    uploader.on(&apos;uploadSuccess&apos;, function (file,response) {        var imgurl = response.data.path;        $( &apos;#&apos;+file.id ).addClass(&apos;upload-state-done&apos;);    });    // 文件上传失败，显示上传出错。    uploader.on(&apos;uploadError&apos;, function (file,response) {        var fileerror = response.message;        var $li = $(&apos;#&apos; + file.id),            $error = $li.find(&apos;div.error&apos;);        // 避免重复创建        if (!$error.length) {            $error = $(&apos;&lt;div class=&quot;error&quot;&gt;&lt;/div&gt;&apos;).appendTo($li);        }        $error.text(&apos;上传失败&apos;+fileerror);    });    // 完成上传完了，成功或者失败，先删除进度条。    uploader.on(&apos;uploadComplete&apos;, function (file) {        $(&apos;#&apos; + file.id).find(&apos;.progress&apos;).remove();    });&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel结合webuploader(单页面多上传插件)</title>
      <link href="/2019/10/16/laravel%E7%BB%93%E5%90%88webuploader-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%A4%9A%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/16/laravel%E7%BB%93%E5%90%88webuploader-%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%A4%9A%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="1-引入css资源"><a href="#1-引入css资源" class="headerlink" title="1. 引入css资源"></a>1. 引入css资源</h4><pre><code>&lt;meta name=&quot;_token&quot; content=&quot;{{ csrf_token() }}&quot;/&gt;  &lt;script src=&quot;{{asset('js/jquery.min.js')}}&quot;&gt;&lt;/script&gt;  &lt;!--引入CSS--&gt;  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{ asset('resources/webuploader-0.1.5/webuploader.css') }}&quot;&gt;  &lt;!--引入JS--&gt;  &lt;script type=&quot;text/javascript&quot;          src=&quot;{{ asset('resources/webuploader-0.1.5/webuploader.js')  }}&quot;&gt;&lt;/script&gt;</code></pre><h4 id="2-定义html"><a href="#2-定义html" class="headerlink" title="2. 定义html"></a>2. 定义html</h4><pre><code>&lt;form id=&quot;register-user&quot; class=&quot;form-horizontal&quot;&gt;    ...      &lt;div class=&quot;form-group&quot;&gt;          &lt;label for=&quot;inputPhone&quot; class=&quot;col-sm-4 control-label&quot;&gt;用户头像&lt;/label&gt;          &lt;div class=&quot;col-sm-4&quot;&gt;              &lt;!--用来存放item--&gt;              &lt;input type=&quot;hidden&quot; name=&quot;photo&quot; id=&quot;photo&quot;&gt;              &lt;div id=&quot;photoPreId&quot; class=&quot;uploader-list&quot;&gt;&lt;/div&gt;              &lt;div id=&quot;photoBtnId&quot;&gt;选择图片&lt;/div&gt;          &lt;/div&gt;      &lt;/div&gt;      &lt;div class=&quot;form-group&quot;&gt;          &lt;label for=&quot;inputPhone2&quot; class=&quot;col-sm-4 control-label&quot;&gt;资质证明&lt;/label&gt;          &lt;div class=&quot;col-sm-4&quot;&gt;              &lt;!--用来存放item--&gt;              &lt;input type=&quot;hidden&quot; name=&quot;certificate&quot; id=&quot;certificate&quot;&gt;              &lt;div id=&quot;certificatePreId&quot; class=&quot;uploader-list&quot;&gt;&lt;/div&gt;              &lt;div id=&quot;certificateBtnId&quot;&gt;选择图片&lt;/div&gt;          &lt;/div&gt;      &lt;/div&gt;     ...  &lt;/form&gt;</code></pre><h4 id="3-编写js"><a href="#3-编写js" class="headerlink" title="3. 编写js"></a>3. 编写js</h4><pre><code>&lt;script src=&quot;{{asset('js/webupload.js')}}&quot;&gt;&lt;/script&gt;&lt;script&gt;    var SCOPO = {        &apos;upload_url&apos;: &quot;{{ route('user.imageUploader') }}&quot;,        &apos;swf_url&apos;: &quot;{{ asset('resources/webuploader-0.1.5/Uploader.swf') }}&quot;,    };    var photo = new $WebUpload(&quot;photo&quot;, SCOPO.upload_url, SCOPO.swf_url, 100, 100);    photo.init();    var certificate = new $WebUpload(&quot;certificate&quot;, SCOPO.upload_url, SCOPO.swf_url, 100, 100);    certificate.init();&lt;/script&gt;/** web-upload 工具类（只适用于上传一个图片） 约定： 上传按钮的id = 图片隐藏域id + &apos;BtnId&apos; 图片预览框的id = 图片隐藏域id + &apos;PreId&apos; author：fengshuonan */(function () {    var $WebUpload = function (pictureId, uploadUrl, swfUrl, picWidth, picHeight) {        this.pictureId = pictureId;        this.uploadBtnId = pictureId + &quot;BtnId&quot;;        this.uploadPreId = pictureId + &quot;PreId&quot;;        this.uploadUrl = uploadUrl;        this.fileSizeLimit = 10 * 1024 * 1024;        this.picWidth = picWidth;        this.picHeight = picHeight;        this.swfUrl = swfUrl;    };    $WebUpload.prototype = {        /**         * 初始化webUploader         */        init: function () {            var uploader = this.create();            this.bindEvent(uploader);            return uploader;        },        /**         * 创建webuploader对象         */        create: function () {            var webUploader = WebUploader.create({                auto: true,                pick: {                    id: &apos;#&apos; + this.uploadBtnId,                    multiple: false,// 只上传一个                },                formData: {                    // 这里的token是外部生成的长期有效的，如果把token写死，是可以上传的。                    &apos;_token&apos;: $(&apos;meta[name=&quot;_token&quot;]&apos;).attr(&apos;content&apos;),                },                accept: {                    title: &apos;Images&apos;,                    extensions: &apos;gif,jpg,jpeg,bmp,png&apos;,                    mimeTypes: &apos;image/*&apos;                },                swf: this.swfUrl,                disableGlobalDnd: true,                duplicate: true,                server: this.uploadUrl,                fileSingleSizeLimit: this.fileSizeLimit            });            return webUploader;        },        /**         * 绑定事件         */        bindEvent: function (bindedObj) {            var me = this;            bindedObj.on(&apos;fileQueued&apos;, function (file) {                var $li = $(&apos;&lt;div&gt;&lt;img width=&quot;100px&quot; height=&quot;100px&quot;&gt;&lt;/div&gt;&apos;);                var $img = $li.find(&apos;img&apos;);                $(&quot;#&quot; + me.uploadPreId).html($li);                // 生成缩略图                bindedObj.makeThumb(file, function (error, src) {                    if (error) {                        $img.replaceWith(&apos;&lt;span&gt;不能预览&lt;/span&gt;&apos;);                        return;                    }                    $img.attr(&apos;src&apos;, src);                }, me.picWidth, me.picHeight);            });            // 文件上传过程中创建进度条实时显示。            bindedObj.on(&apos;uploadProgress&apos;, function (file, percentage) {                var $li = $(&apos;#&apos; + file.id),                    $percent = $li.find(&apos;.progress span&apos;);                // 避免重复创建                if (!$percent.length) {                    $percent = $(&apos;&lt;p class=&quot;progress&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&apos;)                        .appendTo($li)                        .find(&apos;span&apos;);                }                $percent.css(&apos;width&apos;, percentage * 100 + &apos;%&apos;);            });            // 文件上传成功，给item添加成功class, 用样式标记上传成功。            bindedObj.on(&apos;uploadSuccess&apos;, function (file, response) {                var imgurl = response.data.path;                $(&quot;#&quot;+this.pictureId).val(imgurl);                $(&quot;#&quot; + me.pictureId).val(imgurl).addClass(&apos;upload-state-done&apos;);            });            // 文件上传失败，显示上传出错。            bindedObj.on(&apos;uploadError&apos;, function (file) {                var fileerror = response.message;                var $li = $(&apos;#&apos; + file.id),                    $error = $li.find(&apos;div.error&apos;);            // 避免重复创建                if (!$error.length) {                    $error = $(&apos;&lt;div class=&quot;error&quot;&gt;&lt;/div&gt;&apos;).appendTo($li);                }                $error.text(&apos;上传失败&apos; + fileerror);            });            // 完成上传完了，成功或者失败            bindedObj.on(&apos;uploadComplete&apos;, function (file) {            });        }    };    window.$WebUpload = $WebUpload;}());</code></pre><h4 id="4-laravel-端上传代码"><a href="#4-laravel-端上传代码" class="headerlink" title="4. laravel 端上传代码"></a>4. <code>laravel</code> 端上传代码</h4><pre><code>&lt;?php/** * Created by PhpStorm. * User: lenovo * Date: 2019/6/28 * Time: 8:43 */namespace App\Http\Controllers\Traits;use Illuminate\Http\Request;trait ImageUpload{    /**     * 抽取的文件上传方法     * @param Request $request     * @param $filename 待上传的文件名     * @param array $exts 文件的后缀数组     * @return array     */    private function uploadFire(Request $request, $filename, $exts = [&apos;jpeg&apos;, &apos;jpg&apos;, &apos;png&apos;])    {        $file = $request-&gt;file($filename);        $uploadFilesize = $_FILES[$filename][&apos;size&apos;];        // 检验一下上传的文件是否有效.        if ($file &amp;&amp; $file-&gt;isValid()) {            //判断上传文件的大小            if ($uploadFilesize &gt; 1024 * 10 * 1000) {                return responseServer(false, &quot;图片大小不能超过10M&quot;);            }            // 上传文件的后缀.            $entension = $file-&gt;getClientOriginalExtension();            if (!in_array($entension, $exts)) {                return responseServer(false, &quot;文件格式不正确（必须为.jpg/.jpeg/.png文件）&quot;);            }            //定义生成目录            $dir = $_SERVER[&apos;DOCUMENT_ROOT&apos;] . &apos;/data&apos; . date(&apos;/Y/m/d/&apos;);            //文件重新命名            $filename = rand(100000, 999999) . str_replace(&apos;.&apos;, &apos;&apos;, uniqid(&quot;&quot;, TRUE)) . &quot;.&quot; . $entension;            //如果目录不存在则创建目录            makeDir($dir);            $file-&gt;move($dir, $filename);            $picPath = Config(&quot;app.upload_url&quot;) . &apos;/data&apos; . date(&apos;/Y/m/d/&apos;) . $filename;            return responseServer(true, &quot;上传成功&quot;, [&apos;path&apos; =&gt; $picPath]);        } else {            return responseServer(false, &quot;文件不合法&quot;);        }    }} //实现图片ajax异步上传    public function imageUploader(Request $request)    {        return $this-&gt;uploadFire($request, &quot;file&quot;);    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>faker数据填充详解</title>
      <link href="/2019/10/16/faker%E6%95%B0%E6%8D%AE%E5%A1%AB%E5%85%85%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/10/16/faker%E6%95%B0%E6%8D%AE%E5%A1%AB%E5%85%85%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在<code>laravel</code>中已经自动集成，无需手动安装。如需在其他地方使用，可使用以下命令进行安装。</p><pre><code>composer require fzaninotto/faker</code></pre><p>为<code>Faker</code>指定中文支持<br>可通过在 <code>config/app.php</code> 增加如下配置使其支持中文：</p><pre><code>&apos;faker_locale&apos; =&gt; &apos;zh_CN&apos;,</code></pre><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><h5 id="Formatters-格式化器"><a href="#Formatters-格式化器" class="headerlink" title="Formatters 格式化器"></a>Formatters 格式化器</h5><h6 id="Faker-Provider-Base-基本"><a href="#Faker-Provider-Base-基本" class="headerlink" title="Faker\Provider\Base 基本"></a>Faker\Provider\Base 基本</h6><pre><code>$randomDigit = $faker-&gt;randomDigit;//生成0-9之间的随机数$randomDigitNotNull = $faker-&gt;randomDigitNotNull;//生成1-9之间的随机数$randomNumber = $faker-&gt;randomNumber(5, true);//生成5位整数，true表示严格模式，即只能5位$randomFloat = $faker-&gt;randomFloat(2, 0, 10);//生成浮点数，两位小数点，范围是0-10之间$numberBetween = $faker-&gt;numberBetween(0, 100);//生成随机整数，范围是0-100之间$randomLetter = $faker-&gt;randomLetter;//返回a-z之间任意的一个小写字符$randomElements = $faker-&gt;randomElements([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], 2);//返回数组中的随机两个元素$randomElement = $faker-&gt;randomElement([&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;, &apos;dd&apos;]);//随机返回数组中的一个元素$suffle = $faker-&gt;shuffle(&apos;hello, world&apos;); //将字串中的字符打乱返回$suffle = $faker-&gt;shuffle([&apos;aa&apos;, &apos;bb&apos;, &apos;cc&apos;, &apos;dd&apos;]); //将数组中的元素打乱返回$numerify = $faker-&gt;numerify(&apos;Hello #####&apos;);//#####替换为随机数字，输出类似：Hello 03501$lexify = $faker-&gt;lexify(&apos;Hello ???&apos;);//???替换为3个随机小写字符，输出类似：Hello krg$bothify = $faker-&gt;bothify(&apos;hello ##??&apos;);//#替换为随机数字,?替换为随机小写字符.输出类似：hello 15cr$asciify = $faker-&gt;asciify(&apos;hello *****&apos;);//*替换为随机字符，输出类似：hello 5Ynt[$regexify = $faker-&gt;regexify(&apos;[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}&apos;);//根据正则表达式返回字串</code></pre><h6 id="Faker-Provider-Lorem-文本"><a href="#Faker-Provider-Lorem-文本" class="headerlink" title="Faker\Provider\Lorem 文本"></a>Faker\Provider\Lorem 文本</h6><pre><code>$word = $faker-&gt;word;//返回一个单词$words = $faker-&gt;words(3, false);//返回3个单词，false表示返回一个数组；true表示返回一个字符串，单词之间用空格分开$sentence = $faker-&gt;sentence(5, true);//返回一个句子，false表示只能含有5个单词，true表示可以在5个单词左右$sentences = $faker-&gt;sentences(3, false);//返回3条句子，false表示返回一个数组，true表示将三条句子拼成一条返回$paragraph = $faker-&gt;paragraph(3, true);//返回一个段落，由3条句子组成。false表示只能有3条句子，true表示可以在3条句子左右$paragraphs = $faker-&gt;paragraphs(4, false);//返回4个段落。false表示返回一个数组，true表示将段落拼接在一起，并且用换行符分割$text = $faker-&gt;text(200);//返回一段文本，最多只能含有200个字符</code></pre><h6 id="Faker-Provider-en-US-Person-人物"><a href="#Faker-Provider-en-US-Person-人物" class="headerlink" title="Faker\Provider\en_US\Person 人物"></a>Faker\Provider\en_US\Person 人物</h6><pre><code>$title = $faker-&gt;title(&apos;female&apos;);//参数：title($gender = null|&apos;male&apos;|&apos;female&apos;) .返回称呼。例如：Mrs.|Prof.|Dr.$titleMale = $faker-&gt;titleMale;//返回男性称呼$titleFemale = $faker-&gt;titleFemale;//返回女性称呼$name = $faker-&gt;name(&apos;female&apos;);//参数：name($gender = null|&apos;male&apos;|&apos;female&apos;) .返回姓名$firstName = $faker-&gt;firstName(&apos;female&apos;);//参数：firstName($gender = null|&apos;male&apos;|&apos;female&apos;) .返回名$firstNameMale = $faker-&gt;firstNameMale;//男性名字$firstNameFemale = $faker-&gt;firstNameFemale;//女性名字$lastName = $faker-&gt;lastName;//姓</code></pre><h6 id="Faker-Provider-en-US-Address-地址"><a href="#Faker-Provider-en-US-Address-地址" class="headerlink" title="Faker\Provider\en_US\Address  地址"></a>Faker\Provider\en_US\Address  地址</h6><pre><code>$cityPrefix = $faker-&gt;cityPrefix;//城市前缀.如：Lake$secondaryAddress = $faker-&gt;secondaryAddress;//二级地址.如：Suite 061$state = $faker-&gt;state;//州、省（如：Colorado、四川省）$stateAbbr = $faker-&gt;stateAbbr;//省份简称.如：晋、蒙、浙、冀$citySuffix = $faker-&gt;citySuffix;//城市后缀.如：side、land、port、Ville$streetSuffix = $faker-&gt;streetSuffix;//街道后缀.如：Ramp、Plains$buildingNumber = $faker-&gt;buildingNumber;//建筑物编号$city = $faker-&gt;city;//城市$streetName = $faker-&gt;streetName;//街道名称$streetAddress = $faker-&gt;streetAddress;//街道地址$postcode = $faker-&gt;postcode;//邮政编码$address = $faker-&gt;address;//地址（城市+区）$country = $faker-&gt;country;//国家$latitude = $faker-&gt;latitude;//纬度 latitude($min = -90, $max = 90)$longitude = $faker-&gt;longitude;//经度 longitude($min = -180, $max = 180)</code></pre><h6 id="Faker-Provider-en-US-PhoneNumber-电话号码"><a href="#Faker-Provider-en-US-PhoneNumber-电话号码" class="headerlink" title="Faker\Provider\en_US\PhoneNumber 电话号码"></a>Faker\Provider\en_US\PhoneNumber 电话号码</h6><pre><code>$phoneNumber = $faker-&gt;phoneNumber;//手机号码$tollFreePhoneNumber = $faker-&gt;tollFreePhoneNumber;$e164PhoneNumber = $faker-&gt;e164PhoneNumber;</code></pre><h6 id="Faker-Provider-en-US-Company-公司"><a href="#Faker-Provider-en-US-Company-公司" class="headerlink" title="Faker\Provider\en_US\Company 公司"></a>Faker\Provider\en_US\Company 公司</h6><pre><code>$catchPhrase = $faker-&gt;catchPhrase;//口号$bs = $faker-&gt;bs;$company = $faker-&gt;company;//公司名称$companySuffix = $faker-&gt;companySuffix;//公司名称后缀$jobTitle = $faker-&gt;jobTitle;//职称</code></pre><h6 id="Faker-Provider-en-US-Text-文本"><a href="#Faker-Provider-en-US-Text-文本" class="headerlink" title="Faker\Provider\en_US\Text 文本"></a>Faker\Provider\en_US\Text 文本</h6><pre><code>$realText = $faker-&gt;realText();//一段叙事文本</code></pre><h5 id="Faker-Provider-DateTime-日期时间"><a href="#Faker-Provider-DateTime-日期时间" class="headerlink" title="Faker\Provider\DateTime 日期时间"></a>Faker\Provider\DateTime 日期时间</h5><pre><code>$unixTime = $faker-&gt;unixTime;//返回随机时间戳$unixTime = $faker-&gt;unixTime(&apos;now&apos;);//返回随机时间戳 可选最后截止时间$dateTime = $faker-&gt;dateTime;//返回一个随机的DateTime对象$dateTime = $faker-&gt;dateTime(&apos;now&apos;, &apos;PRC&apos;);//返回一个随机的DateTime对象，可选择最后截止时间和时区$dateTimeAD = $faker-&gt;dateTimeAD;//返回一个随机的DateTime对象$dateTimeAD = $faker-&gt;dateTimeAD(&apos;now&apos;, &apos;PRC&apos;);//返回一个随机的DateTime对象，可选择最后截止时间和时区$iso8601 = $faker-&gt;iso8601;//返回一个随机的字符串形式的时间$iso8601 = $faker-&gt;iso8601(&apos;now&apos;);//返回一个随机的字符串形式的时间,可选择最后截止时间$date = $faker-&gt;date(&quot;Y-m-d H:i:s&quot;, &apos;now&apos;);//指定格式返回时间,可选择最后截止时间$time = $faker-&gt;time(&apos;Y-m-d H:i:s&apos;, &apos;now&apos;);//(同上)指定格式返回时间,可选择最后截止时间$dateTimeBetween = $faker-&gt;dateTimeBetween(&apos;2019-01-01&apos;, &apos;now&apos;, &apos;PRC&apos;);//返回指定时间区间的DateTime对象，可选时区$dateTimeInInterval = $faker-&gt;dateTimeInInterval(&apos;-5 years&apos;, &apos;+5 days&apos;, &apos;PRC&apos;);//返回指定时间区间的DateTime对象，可选时区(第一个参数：开始时间，第二个参数：时间范围)$dateTimeThisCentury = $faker-&gt;dateTimeThisCentury;//返回一个本世纪内的DateTime对象$dateTimeThisCentury = $faker-&gt;dateTimeThisCentury(&apos;1950-01-01&apos;, &apos;PRC&apos;);//返回一个本世纪内的DateTime对象.指定截止时间和时区$dateTimeThisDecade = $faker-&gt;dateTimeThisDecade;//返回一个前十年内的DateTime对象$dateTimeThisDecade = $faker-&gt;dateTimeThisDecade(&apos;2015-01-01&apos;, &apos;PRC&apos;);//返回一个前十年内的DateTime对象.指定允许的最后时间和时区$dateTimeThisYear = $faker-&gt;dateTimeThisYear;//返回一个前一年内的DateTime对象$dateTimeThisYear = $faker-&gt;dateTimeThisYear(&apos;now&apos;, &apos;PRC&apos;);//返回一个前一年内的DateTime对象.指定允许的最后时间和时区$dateTimeThisMonth = $faker-&gt;dateTimeThisMonth;//返回一个前一个月内的DateTime对象$dateTimeThisMonth = $faker-&gt;dateTimeThisMonth(&apos;-15 days&apos;, &apos;PRC&apos;);//返回一个前一个月内的DateTime对象.指定允许的最后时间和时区$amPm = $faker-&gt;amPm;//上午/下午$dayOfMonth = $faker-&gt;dayOfMonth;//返回几号$dayOfWeek = $faker-&gt;dayOfWeek;//返回星期几$month = $faker-&gt;month;//返回月份$monthName = $faker-&gt;monthName;//返回月份名称$year = $faker-&gt;year;//返回年份$year = $faker-&gt;year(&apos;2000-01-01&apos;);//返回年份.可指定最后截止日期$timezone = $faker-&gt;timezone;//返回时区</code></pre><h6 id="Faker-Provider-Internet-互联网"><a href="#Faker-Provider-Internet-互联网" class="headerlink" title="Faker\Provider\Internet 互联网"></a>Faker\Provider\Internet 互联网</h6><pre><code>$email = $faker-&gt;email;//返回一个随机邮箱$safeEmail = $faker-&gt;safeEmail;//返回一个以@example.com结尾的安全邮箱$freeEmail = $faker-&gt;freeEmail;//返回一个随机邮箱$companyEmail = $faker-&gt;companyEmail;//返回企业邮箱（中文语言包下不可用）$freeEmailDomain = $faker-&gt;freeEmailDomain;//返回一个邮件域名$safeEmailDomain = $faker-&gt;safeEmailDomain;//返回安全的邮件域名$userName = $faker-&gt;userName;//用户名$password = $faker-&gt;password;//密码$domainName = $faker-&gt;domainName;//域名（中文语言包下不可用）$domainWord = $faker-&gt;domainWord;//不带后缀的域名（中文语言包下不可用）$tld = $faker-&gt;tld;//域名后缀：如com、org（中文语言包下不可用）$url = $faker-&gt;url;//返回一个随机url（中文语言包下不可用）$slug = $faker-&gt;slug;$ipv4 = $faker-&gt;ipv4;//返回一个ipv4地址$ipv6 = $faker-&gt;ipv6;//返回一个ipv6地址$localIpv4 = $faker-&gt;localIpv4;$macAddress = $faker-&gt;macAddress;//mac地址</code></pre><h6 id="Faker-Provider-UserAgent-用户代理"><a href="#Faker-Provider-UserAgent-用户代理" class="headerlink" title="Faker\Provider\UserAgent 用户代理"></a>Faker\Provider\UserAgent 用户代理</h6><pre><code>$userAgent = $faker-&gt;userAgent;//返回一个随机的用户代理信息$chrome = $faker-&gt;chrome;//返回一个chrome浏览器的用户代理信息$firefox = $faker-&gt;firefox;//返回一个firefox浏览器的用户代理信息$safari = $faker-&gt;safari;//返回一个safari浏览器的用户代理信息$opera = $faker-&gt;opera;//返回一个opera浏览器的用户代理信息$internetExplorer = $faker-&gt;internetExplorer;//返回一个internetExplorer浏览器的用户代理信息</code></pre><h5 id="Faker-Provider-Payment-支付"><a href="#Faker-Provider-Payment-支付" class="headerlink" title="Faker\Provider\Payment 支付"></a>Faker\Provider\Payment 支付</h5><pre><code>$creditCardType = $faker-&gt;creditCardType;//信用卡类型$creditCardNumber = $faker-&gt;creditCardNumber;//信用卡号$creditCardExpirationDate = $faker-&gt;creditCardExpirationDate;//信用卡到期日 (DateTime对象)$creditCardExpirationDateString = $faker-&gt;creditCardExpirationDateString;//信用卡到期日期字符串$creditCardDetails = $faker-&gt;creditCardDetails;//信用卡详情（数组）$swiftBicNumber = $faker-&gt;swiftBicNumber;$iban = $faker-&gt;iban;//国际银行账户</code></pre><h5 id="Faker-Provider-Color-颜色"><a href="#Faker-Provider-Color-颜色" class="headerlink" title="Faker\Provider\Color 颜色"></a>Faker\Provider\Color 颜色</h5><pre><code>$hexcolor = $faker-&gt;hexcolor;//十六进制的随机色：&apos;#fa3cc2&apos;$rgbcolor = $faker-&gt;rgbcolor;//RGB格式的随机色（字串形式）：&apos;0,255,122&apos;$rgbColorAsArray = $faker-&gt;rgbColorAsArray;//RGB格式的随机色（数组形式）：array(0,255,122)$rgbCssColor = $faker-&gt;rgbCssColor;//RGB格式的随机色的css表示：&apos;rgb(0,255,122)&apos;$safeColorName = $faker-&gt;safeColorName;//一个安全的随机色名称$colorName = $faker-&gt;colorName;//随机色名称</code></pre><h5 id="Faker-Provider-File-文件"><a href="#Faker-Provider-File-文件" class="headerlink" title="Faker\Provider\File 文件"></a>Faker\Provider\File 文件</h5><pre><code>$fileExtension = $faker-&gt;fileExtension;//文件后缀$mimeType = $faker-&gt;mimeType;//mime类型// 将一个随机文件从源文件复制到目标目录，并返回fullpath$file = $faker-&gt;file($sourceDir = &apos;./up1&apos;, $targetDir = &apos;./up2&apos;);// 将一个随机文件从源文件复制到目标目录，并返回basename$file = $faker-&gt;file($sourceDir = &apos;./up1&apos;, $targetDir = &apos;./up2&apos;, false);</code></pre><h6 id="Faker-Provider-Image-图片"><a href="#Faker-Provider-Image-图片" class="headerlink" title="Faker\Provider\Image 图片"></a>Faker\Provider\Image 图片</h6><pre><code>$imageUrl = $faker-&gt;imageUrl();//https://lorempixel.com/640/480/?93028$imageUrl = $faker-&gt;imageUrl(320, 320, &apos;cats&apos;);//https://lorempixel.com/320/320/cats/?68416$imageUrl = $faker-&gt;imageUrl(320, 320, &apos;cats&apos;, true, &apos;Faker&apos;);//https://lorempixel.com/320/320/cats/Faker/?68118$imageUrl = $faker-&gt;imageUrl(320, 320, &apos;cats&apos;, true, &apos;Faker&apos;, true);//https://lorempixel.com/gray/320/320/cats/Faker/?28732//生成图片并保存到本地 &apos;/tmp/13b73edae8443990be1aa8f1a483bc27.jpg&apos;$image = $faker-&gt;image(&apos;./tmp&apos;, 320, 320);//设置类别并生成图片保存到本地  &apos;tmp/13b73edae8443990be1aa8f1a483bc27.jpg&apos;$image = $faker-&gt;image(&apos;./tmp&apos;, 320, 320, &apos;cats&apos;);//设置类别并生成图片保存到本地，只返回文件名 &apos;13b73edae8443990be1aa8f1a483bc27.jpg&apos;$image = $faker-&gt;image(&apos;./tmp&apos;, 320, 320, &apos;cats&apos;, false);// 生成没有随机化的图像$image = $faker-&gt;image(&apos;./tmp&apos;, 320, 320, &apos;cats&apos;, true, false);//生成图片并加上水印字体  &apos;tmp/13b73edae8443990be1aa8f1a483bc27.jpg&apos;$image = $faker-&gt;image(&apos;./tmp&apos;, 320, 320, &apos;cats&apos;, true, true, &apos;Faker&apos;);</code></pre><h6 id="Faker-Provider-Uuid-UUID"><a href="#Faker-Provider-Uuid-UUID" class="headerlink" title="Faker\Provider\Uuid UUID"></a>Faker\Provider\Uuid UUID</h6><pre><code>$uuid = $faker-&gt;uuid;//生成一个uuid</code></pre><h5 id="Faker-Provider-Barcode-条形码"><a href="#Faker-Provider-Barcode-条形码" class="headerlink" title="Faker\Provider\Barcode 条形码"></a>Faker\Provider\Barcode 条形码</h5><pre><code>$ean13 = $faker-&gt;ean13;//8105964964473$ean8 = $faker-&gt;ean8;//05994441$isbn13 = $faker-&gt;isbn13;//9780971408739$isbn10 = $faker-&gt;isbn10;//0813387299</code></pre><h6 id="Faker-Provider-Miscellaneous-各种各样的"><a href="#Faker-Provider-Miscellaneous-各种各样的" class="headerlink" title="Faker\Provider\Miscellaneous 各种各样的"></a>Faker\Provider\Miscellaneous 各种各样的</h6><pre><code>$boolean = $faker-&gt;boolean;//生成一个布尔值$md5 = $faker-&gt;md5;//生成一个md5码$sha1 = $faker-&gt;sha1;//生成一个sha1$sha256 = $faker-&gt;sha256;//生成一个sha256$locale = $faker-&gt;locale;//生成一个地区编码：如zh_CN$countryCode = $faker-&gt;countryCode;//生成一个国家编码。如：UK$languageCode = $faker-&gt;languageCode;//生成一个语言编码.如：en$currencyCode = $faker-&gt;currencyCode;//生成一个货币代码.如：EUR$emoji = $faker-&gt;emoji;//生成一个emoji表情</code></pre><h6 id="Faker-Provider-Biased-偏向的"><a href="#Faker-Provider-Biased-偏向的" class="headerlink" title="Faker\Provider\Biased 偏向的"></a>Faker\Provider\Biased 偏向的</h6><pre><code>//得到10到20之间的随机数，并且更多机会接近20$biasedNumberBetween = $faker-&gt;biasedNumberBetween($min = 10, $max = 20, $function = &apos;sqrt&apos;);</code></pre><h6 id="Faker-Provider-HtmlLorem-html文本"><a href="#Faker-Provider-HtmlLorem-html文本" class="headerlink" title="Faker\Provider\HtmlLorem html文本"></a>Faker\Provider\HtmlLorem html文本</h6><pre><code>//生成不超过2级深度的HTML文档，并且在任何级别上都不超过3个元素。$randomHtml = $faker-&gt;randomHtml(2, 3);</code></pre><h4 id="Language-specific-formatters-特定于语言的格式器"><a href="#Language-specific-formatters-特定于语言的格式器" class="headerlink" title="Language specific formatters 特定于语言的格式器"></a>Language specific formatters 特定于语言的格式器</h4><h6 id="Faker-Provider-zh-CN-Payment"><a href="#Faker-Provider-zh-CN-Payment" class="headerlink" title="Faker\Provider\zh_CN\Payment"></a>Faker\Provider\zh_CN\Payment</h6><pre><code>// 生成一个随机的银行名称(基于真实的中国银行的列表)echo $faker-&gt;bank; // &apos;中国建设银行&apos;</code></pre><h6 id="Faker-Provider-zh-TW-Person"><a href="#Faker-Provider-zh-TW-Person" class="headerlink" title="Faker\Provider\zh_TW\Person"></a>Faker\Provider\zh_TW\Person</h6><pre><code>// Generates a random personal identify numberecho $faker-&gt;personalIdentityNumber; // A223456789</code></pre><h6 id="Faker-Provider-zh-TW-Company"><a href="#Faker-Provider-zh-TW-Company" class="headerlink" title="Faker\Provider\zh_TW\Company"></a>Faker\Provider\zh_TW\Company</h6><pre><code>// Generates a random VAT / Company Tax numberecho $faker-&gt;VAT; //23456789</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视差滚动插件</title>
      <link href="/2019/10/15/%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/15/%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>视差滚动（<code>Parallax Scrolling</code>）指网页滚动过程中，多层次的元素进行不同程度的移动，视觉上形成立体运动效果的网页展示技术<br><br>主要核心就是前景和背景以不同的速度移动，从而创造出3D效果。 这种效果可以给网站一个很好的补充。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><pre><code>视差滚动效果酷炫，适合于个性展示的场合。视差滚动徐徐展开，适合于娓娓道来，讲故事的场合。视差滚动容易迷航，需要具备较强的导航功能。</code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>传统的网页的文字、图片、背景都是一起按照相同方向相同速度滚动的，而视差滚动则是在滚动的时候，内容和多层次的背景实现或不同速度，或不同方向的运动。</p><p>有的时候也可以加上一些透明度、大小的动画来优化显示。 </p><p>利用<code>background-attachment</code>属性实现。</p><p><strong>background-attachment: fixed || scroll || local</strong></p><h2 id="Stellar-js是什么？"><a href="#Stellar-js是什么？" class="headerlink" title="Stellar.js是什么？"></a><code>Stellar.js</code>是什么？</h2><p>[<code>stellar.js</code>]是一个 jQuery插件，能很容易地给网站添加视差滚动效果。 尽管已经停止了维护，但它非常稳定，与最新版本的<code>jQuery</code>兼容，很多开发者也在使用它。 这个插件在<code>jQuery</code>插件库里很流行。</p><p><code>http://markdalgleish.com/projects/stellar.js/</code>  官网</p><h3 id="引用-js包"><a href="#引用-js包" class="headerlink" title="引用 js包"></a>引用 js包</h3><pre><code>&lt;script src=&quot;path/to/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;path/to/jquery.stellar.min.js&quot;&gt;&lt;/script&gt;</code></pre><h3 id="引用html"><a href="#引用html" class="headerlink" title="引用html"></a>引用html</h3><pre><code>&lt;div class=&quot;content&quot; id=&quot;content1&quot;&gt;    &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;content&quot; id=&quot;content2&quot;&gt;    &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;content&quot; id=&quot;content3&quot; data-stellar-background-ratio=&quot;0.5&quot;&gt;    &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;content&quot; id=&quot;content4&quot; data-stellar-background-ratio=&quot;0.5&quot;&gt;    &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;content&quot; id=&quot;content5&quot; data-stellar-background-ratio=&quot;0.5&quot;&gt;    &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;content&quot; id=&quot;content6&quot; data-stellar-background-ratio=&quot;0.5&quot;&gt;    &lt;p&gt;TEXT HERE&lt;/p&gt;&lt;/div&gt; </code></pre><h3 id="引入CSS"><a href="#引入CSS" class="headerlink" title="引入CSS"></a>引入CSS</h3><pre><code>body {    font-size: 20px;    color: white;    text-shadow: 0 1px 0 black, 0 0 5px black;}p {    padding: 0 0.5em;    margin: 0;}.content {    background-attachment: fixed;    height: 400px;}#content1 {    background-image: url(&quot;xxx.jpg&quot;);}#content2 {    background-image: url(&quot;xxx.jpg&quot;);}#content3 {    background-image: url(&quot;xxx.jpg&quot;);}#content4 {   background-image: url(&quot;xxx.jpg&quot;);}#content5 {   background-image: url(&quot;xxx.jpg&quot;);&quot;);}#content6 {    background-image: url(&quot;xxx.jpg&quot;);}</code></pre><h3 id="js调用函数"><a href="#js调用函数" class="headerlink" title="js调用函数"></a>js调用函数</h3><pre><code>$.stellar({    horizontalScrolling: false,    responsive: true});</code></pre><h3 id="详细参数"><a href="#详细参数" class="headerlink" title="详细参数"></a>详细参数</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>horizontalScrolling 和 verticalScrolling</td><td>该配置项用来设置视差效果的方向。horizontalScrolling设置水平方向，verticalScro设置垂直方向， 为布尔值，默认为true</td></tr><tr><td>responsive</td><td>该配置项用来制定load或者resize时间触发时是否刷新页面，其值为布尔值，默认为false</td></tr><tr><td>hideDistantElements</td><td>该配置项用来设置移出视线的元素是否隐藏，其值为布尔值，若不想隐藏则设置为false`</td></tr><tr><td>data-stellar-ratio=”2”</td><td>定义了此元素针对页面滚动的速度比率，比如，0.5为页面滚动的50%，2为页面滚动的200%，所以数值越大，你可以看到页面元素滚动速度越快。</td></tr><tr><td>data-stellar-background-ratio</td><td>该配置项用在单个元素中，其值为一个正数，用来改变被设置元素的影响速度。 例如 值为0.3时，则表示背景的滚动速度为正常滚动速度的0.3倍。如果值为小数时最好在样式表中设置</td></tr></tbody></table><h3 id="效果实例"><a href="#效果实例" class="headerlink" title="效果实例"></a>效果实例</h3><p><a href="https://share.weiyun.com/5X1aO1P" target="_blank" rel="noopener">Stellar视差demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地代码推送到远程git仓库</title>
      <link href="/2019/10/15/%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93/"/>
      <url>/2019/10/15/%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<pre><code># 1. 在远程新建一个代码仓库(如码云,github..)# 2. 将本地代码提交git initgit add *git commit -am &quot;first init&quot;git remote add origin https://gitee.com/an1993/mmall_learning.git(这里替换为需要的仓库地址)git branchgit push -u  origin mastergit pullgit push -u -f  origin master</code></pre><p>执行完以上步骤基本就可以将本地代码推送到远程仓库了</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360度3D 旋转插件</title>
      <link href="/2019/10/15/360%E5%BA%A63D-%E6%97%8B%E8%BD%AC%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/15/360%E5%BA%A63D-%E6%97%8B%E8%BD%AC%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Circlr</code>插件是一款基于<code>jQuery</code>的可以对图片进行360度全方位旋转展示的插件。<code>Circlr</code>通过按一定角度规律拍摄的产品图片，制作出可以使用鼠标拖动、鼠标滚轮和移动触摸来进行图片逐帧旋转的效果。比先前的<code>Rollerblade</code>，动画顺畅，也更易于控制，非常适合于商品的展示。</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><pre><code>1. 支持水平或垂直方向旋转。2. 支持移动触摸事件。3. 支持滚动事件。4. 图片预加载处理。5. 可以反向和循环旋转图片。</code></pre><h2 id="代码基本使用"><a href="#代码基本使用" class="headerlink" title="代码基本使用"></a>代码基本使用</h2><p>使用方法：</p><h4 id="1-引用js文件包"><a href="#1-引用js文件包" class="headerlink" title="1. 引用js文件包"></a>1. 引用js文件包</h4><pre><code>&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/circlr.min.js&quot;&gt;&lt;/script&gt;</code></pre><h4 id="2-书写结构："><a href="#2-书写结构：" class="headerlink" title="2.书写结构："></a>2.书写结构：</h4><pre><code>&lt;div class=&quot;container&quot;&gt;        &lt;div id=&quot;circlr&quot;&gt;             &lt;img data-src=&quot;picture/1.png&quot; /&gt;             &lt;img data-src=&quot;picture/2.png&quot; /&gt;              &lt;img data-src=&quot;picture/3.png&quot; /&gt;               ...  //  这里放入所需图片即可， 图片太多可用js动态添加            &lt;div id=&quot;loader&quot;&gt;&lt;/div&gt;        &lt;/div&gt; &lt;/div&gt;</code></pre><p>注意， 是 自定义属性  <code>data-src</code> 里面写路径    2.  <code>loader</code> 是 加载项 </p><p>图片太多了可以用js动态添加</p><pre><code>&lt;div class=&quot;container&quot;&gt;    &lt;div id=&quot;circlr&quot;&gt;        &lt;div id=&quot;loader&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        // 需要准备 74个图片        for (var i = 1; i &lt;= 74; i++) {            // 创建图片   别忘更换属性            var img = $(&quot;&lt;img  data-src=&apos;images/&quot; + i + &quot;.png&apos;/&gt;&quot;);            // 追加到 circlr里面            $(&quot;#circlr&quot;).append(img);// prepend 内部的前面添加  append 内部的后面添加        }    &lt;/script&gt;&lt;/div&gt;</code></pre><h4 id="3-书写css"><a href="#3-书写css" class="headerlink" title="3. 书写css"></a>3. 书写css</h4><pre><code>#circlr {  cursor: move;  margin: 0 auto;  min-height: 100px;  position: relative;}#circlr #loader {  background: url(../images/loader.gif) center center no-repeat;  bottom: 0;  display: none;  left: 0;  position: absolute;  right: 0;  top: 0;}</code></pre><h4 id="4-调用文件对象"><a href="#4-调用文件对象" class="headerlink" title="4.调用文件对象"></a>4.调用文件对象</h4><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    var crl = circlr(&apos;circlr&apos;, {      scroll : true,      loader : &apos;loader&apos;    });&lt;/script&gt;</code></pre><p><img src="https://i.loli.net/2019/10/29/FwSnUcdk2OM3Xp4.png" alt></p><h2 id="参数和方法"><a href="#参数和方法" class="headerlink" title="参数和方法"></a>参数和方法</h2><p>参数</p><table><thead><tr><th align="left">参数名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">mouse</td><td align="left">是否通过鼠标进行图片旋转，默认值为true。</td></tr><tr><td align="left">scroll</td><td align="left">是否通过scroll进行图片旋转，默认值为false。</td></tr><tr><td align="left">vertical</td><td align="left">是否在垂直方向上移动鼠标时旋转图片，默认值为false。</td></tr><tr><td align="left">reverse</td><td align="left">是否反转方向，默认值为false。</td></tr><tr><td align="left">cycle</td><td align="left">是否循环旋转图片，默认值为true。</td></tr><tr><td align="left">start</td><td align="left">开始动画帧，默认值为0。</td></tr><tr><td align="left">speed</td><td align="left">动画帧通过circlr.turn(i)切换的速度，默认值为50毫秒。</td></tr><tr><td align="left">autoplay</td><td align="left">是否自动进行图片360度旋转播放，默认值为false。</td></tr><tr><td align="left">playSpeed</td><td align="left">动画序列的播放速度，默认值为100毫秒。</td></tr><tr><td align="left">loader</td><td align="left">预加载DOM元素的ID。</td></tr><tr><td align="left">ready</td><td align="left">图片加载完成后的回调函数。</td></tr><tr><td align="left">change</td><td align="left">动画帧改编之后的回调函数（以当前帧和总帧数为参数）。</td></tr></tbody></table><p>方法</p><table><thead><tr><th align="left">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">crl.el</td><td align="left">返回对象的DOM元素节点。</td></tr><tr><td align="left">crl.length</td><td align="left">返回对象的总的动画帧数。</td></tr><tr><td align="left">crl.turn(i)</td><td align="left">动画旋转到第i帧。</td></tr><tr><td align="left">crl.go(i)</td><td align="left">动画跳转到第i帧。</td></tr><tr><td align="left">crl.play()</td><td align="left">开始动画序列的播放。</td></tr><tr><td align="left">crl.stop()</td><td align="left">停止动画播放。</td></tr><tr><td align="left">crl.hide()</td><td align="left">隐藏对象的DOM元素节点。</td></tr><tr><td align="left">crl.show()</td><td align="left">显示对象的DOM元素节点。</td></tr><tr><td align="left">crl.set(options)</td><td align="left">在插件初始化之后改变对象的参数：vertical reverse cycle speed playSpeed</td></tr></tbody></table><h2 id="相关代码资源"><a href="#相关代码资源" class="headerlink" title="相关代码资源"></a>相关代码资源</h2><p>码云<br><a href="https://gitee.com/an1993/3D-car" target="_blank" rel="noopener">3d旋转car</a></p><p>微云<br><a href="https://share.weiyun.com/5NzLozb" target="_blank" rel="noopener">3d旋转car</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/zero________________/article/details/80373248" target="_blank" rel="noopener">基于jquery Circlr插件实现360度3D旋转 商品展示案例</a></p><p><a href="https://www.jb51.net/article/72460.htm" target="_blank" rel="noopener">基于jQuery Circlr插件实现产品图片360度旋转</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信JSSdk实现分享功能</title>
      <link href="/2019/10/15/%E5%BE%AE%E4%BF%A1JSSdk%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/"/>
      <url>/2019/10/15/%E5%BE%AE%E4%BF%A1JSSdk%E5%AE%9E%E7%8E%B0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="微信JSSdk实现分享功能"><a href="#微信JSSdk实现分享功能" class="headerlink" title="微信JSSdk实现分享功能"></a>微信JSSdk实现分享功能</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p> 微信分享服务器的作用是为用户在微信浏览器端对来自网站以及客户端的页面进行二次分享链接时更友好的展示提供服务。为实现二次分享功能需要使用微信JS-SDK来开发.</p><blockquote><p>微信<code>JS-SDK</code>是<a href="https://mp.weixin.qq.com/cgi-bin/loginpage?t=wxm2-login&lang=zh_CN" target="_blank" rel="noopener">微信公众平台</a> 面向网页开发者提供的基于微信内的网页开发工具包。微信<code>JS-SDK</code>功能很多。<br>通过使用微信JS-SDK，网页开发者可借助微信高效地使用拍照、选图、语音、位置等手机系统的能力，同时可以直接使用微信分享、扫一扫、卡券、支付等微信特有的能力，为微信用户提供更优质的网页体验。</p></blockquote><h2 id="2-流程图"><a href="#2-流程图" class="headerlink" title="2. 流程图"></a>2. 流程图</h2><p><img src="https://i.loli.net/2019/10/29/V9bszSwYZAIJgy6.png" alt="QQ截图20191015103943.png"></p><h2 id="3-微信二次分享功能实现的具体步骤"><a href="#3-微信二次分享功能实现的具体步骤" class="headerlink" title="3. 微信二次分享功能实现的具体步骤"></a>3. 微信二次分享功能实现的具体步骤</h2><h4 id="步骤一：绑定域名-微信公众平台配置"><a href="#步骤一：绑定域名-微信公众平台配置" class="headerlink" title="步骤一：绑定域名(微信公众平台配置)"></a><strong>步骤一：绑定域名</strong>(微信公众平台配置)</h4><p>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><p>备注：登录后可在“开发者中心”查看对应的接口权限。</p><p><img src="https://i.loli.net/2019/10/29/pVliaIkF3L9SGX8.png" alt="20190103210645498.png"></p><p>需要配置白名单</p><h4 id="步骤二：引入JS文件（需要分享的页面）"><a href="#步骤二：引入JS文件（需要分享的页面）" class="headerlink" title="步骤二：引入JS文件（需要分享的页面）"></a><strong>步骤二：引入<code>JS</code>文件</strong>（需要分享的页面）</h4><p>在需要调用<code>JS</code>接口的页面引入如下<code>JS</code>文件，（支持<code>https</code>）：<a href="http://res.wx.qq.com/open/js/jweixin-1.4.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.4.0.js</a></p><p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href="http://res2.wx.qq.com/open/js/jweixin-1.4.0.js" target="_blank" rel="noopener">http://res2.wx.qq.com/open/js/jweixin-1.4.0.js</a> （支持<code>https</code>）。</p><pre><code>&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.4.0.js&quot;&gt;&lt;/script&gt;</code></pre><h4 id="步骤三：通过config接口注入权限验证配置-微信分享服务器主要提供下面参数生成"><a href="#步骤三：通过config接口注入权限验证配置-微信分享服务器主要提供下面参数生成" class="headerlink" title="步骤三：通过config接口注入权限验证配置(微信分享服务器主要提供下面参数生成)"></a><strong>步骤三：通过<code>config</code>接口注入权限验证配置</strong>(微信分享服务器主要提供下面参数生成)</h4><p>所有需要使用<code>JS-SDK</code>的页面必须先注入配置信息，否则将无法调用</p><pre><code>wx.config({  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。  appId: &apos;&apos;, // 必填，公众号的唯一标识  timestamp: , // 必填，生成签名的时间戳  nonceStr: &apos;&apos;, // 必填，生成签名的随机串  signature: &apos;&apos;,// 必填，签名  jsApiList: [] // 必填，需要使用的JS接口列表});</code></pre><p>签名算法见文末的<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#62" target="_blank" rel="noopener">附录1</a>，所有<code>JS</code>接口列表见文末的<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#63" target="_blank" rel="noopener">附录2</a></p><h4 id="步骤四：通过ready接口处理成功验证（待分享的页面配置二次分享的页面信息如标题，缩略图，描述等）"><a href="#步骤四：通过ready接口处理成功验证（待分享的页面配置二次分享的页面信息如标题，缩略图，描述等）" class="headerlink" title="步骤四：通过ready接口处理成功验证（待分享的页面配置二次分享的页面信息如标题，缩略图，描述等）"></a><strong>步骤四：通过ready接口处理成功验证</strong>（待分享的页面配置二次分享的页面信息如标题，缩略图，描述等）</h4><pre><code>wx.ready(function(){  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。    # 分享到朋友圈按钮点击状态及自定义分享内容    wx.onMenuShareTimeline({      title: &apos;&apos;, // 分享标题      link: &apos;&apos;, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致      imgUrl: &apos;&apos;, // 分享图标      success: function () {      // 用户点击了分享后执行的回调函数        }    });    # 分享到QQ按钮点击状态及自定义分享内容    wx.onMenuShareQQ({      title: &apos;&apos;, // 分享标题      desc: &apos;&apos;, // 分享描述      link: &apos;&apos;, // 分享链接      imgUrl: &apos;&apos;, // 分享图标      success: function () {      // 用户确认分享后执行的回调函数      },      cancel: function () {      // 用户取消分享后执行的回调函数      }    });    # 分享到腾讯微博按钮点击状态及自定义分享内容    wx.onMenuShareWeibo({      title: &apos;&apos;, // 分享标题      desc: &apos;&apos;, // 分享描述      link: &apos;&apos;, // 分享链接      imgUrl: &apos;&apos;, // 分享图标      success: function () {      // 用户确认分享后执行的回调函数      },      cancel: function () {      // 用户取消分享后执行的回调函数      }    });    # 分享到QQ空间按钮点击状态及自定义分享内容    wx.onMenuShareQZone({      title: &apos;&apos;, // 分享标题      desc: &apos;&apos;, // 分享描述      link: &apos;&apos;, // 分享链接      imgUrl: &apos;&apos;, // 分享图标      success: function () {      // 用户确认分享后执行的回调函数      },      cancel: function () {      // 用户取消分享后执行的回调函数      }    });});</code></pre><h2 id="4-如何提供权限验证配置（微信分享服务器的业务功能）"><a href="#4-如何提供权限验证配置（微信分享服务器的业务功能）" class="headerlink" title="4. 如何提供权限验证配置（微信分享服务器的业务功能）"></a>4. 如何提供权限验证配置（微信分享服务器的业务功能）</h2><p>即如下参数</p><pre><code>wx.config({  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。  appId: &apos;&apos;, // 必填，公众号的唯一标识  timestamp: , // 必填，生成签名的时间戳  nonceStr: &apos;&apos;, // 必填，生成签名的随机串  signature: &apos;&apos;,// 必填，签名  jsApiList: [] // 必填，需要使用的JS接口列表这里我们使用微信分享相关的js接口列表[&quot;checkJsApi&quot;,&quot;onMenuShareTimeline&quot;,&quot;onMenuShareAppMessage&quot;,&quot;onMenuShareQQ&quot;,&quot;onMenuShareWeibo&quot;] });</code></pre><p>下面主要说明<code>signature</code>的生成流程</p><ol><li><p>获取<code>access_token</code></p></li><li><p>使用获取到的<code>access_token</code>获取<code>jsapi_ticket</code></p></li><li><p>将排序后的参数URL键值对的格式（即<code>key1=value1&amp;key2=value</code>）拼接成字符串,<code>sha1</code>签名，得到<code>signature</code></p></li></ol><h3 id="4-1-获取access-token"><a href="#4-1-获取access-token" class="headerlink" title="4.1 获取access_token"></a>4.1 获取<code>access_token</code></h3><blockquote><p><code>access_token</code>是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用<code>access_token</code>。开发者需要进行妥善保存。<code>access_token</code>的存储至少要保留512个字符空间。<code>access_token</code>的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的<code>access_token</code>失效。</p></blockquote><p><strong>接口调用请求说明</strong></p><pre><code>## https请求方式: GEThttps://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</code></pre><p><strong>参数说明</strong></p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>grant_type</code></td><td align="left">是</td><td align="left">获取<code>access_token</code>填写<code>client_credential</code></td></tr><tr><td align="left"><code>appid</code></td><td align="left">是</td><td align="left">第三方用户唯一凭证</td></tr><tr><td align="left"><code>secret</code></td><td align="left">是</td><td align="left">第三方用户唯一凭证密钥，即<code>appsecret</code></td></tr></tbody></table><p><strong>返回说明</strong></p><p>正常情况下，微信会返回下述<code>JSON</code>数据包给公众号：</p><pre><code>{    &quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,    &quot;expires_in&quot;:7200}</code></pre><p><strong>参数说明</strong></p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>access_token</code></td><td align="left">获取到的凭证</td></tr><tr><td align="left"><code>expires_in</code></td><td align="left">凭证有效时间，单位：秒</td></tr></tbody></table><h3 id="4-2-获取jsapi-ticket"><a href="#4-2-获取jsapi-ticket" class="headerlink" title="4.2 获取jsapi_ticket"></a>4.2 获取<code>jsapi_ticket</code></h3><blockquote><p><code>jsapi_ticket</code>是公众号用于调用微信<code>JS</code>接口的临时票据。正常情况下，<code>jsapi_ticket</code>的有效期为7200秒，通过<code>access_token</code>来获取。由于获取<code>jsapi_ticket</code>的<code>api</code>调用次数非常有限，频繁刷新<code>jsapi_ticket</code>会导致<code>api</code>调用受限，影响自身业务，开发者必须在自己的服务全局缓存<code>jsapi_ticket</code> 。</p></blockquote><ol><li>参考以下文档获取<code>access_token</code>（有效期7200秒，开发者必须在自己的服务全局缓存<code>access_token</code>）：<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html</a></li><li>用第一步拿到的<code>access_token</code>采用<code>http</code> <code>GET</code>方式请求获得<code>jsapi_ticket</code>（有效期7200秒，开发者必须在自己的服务全局缓存<code>jsapi_ticket</code>）：<a href="https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a></li></ol><p>成功返回如下<code>JSON</code>：</p><pre><code>{  &quot;errcode&quot;:0,  &quot;errmsg&quot;:&quot;ok&quot;,  &quot;ticket&quot;:&quot;bxLdikRXVbTPdHSM05e5u5sUoXNKd8-41ZO3MhKoyN5OfkWITDGgnr2fwJ0m9E8NYzWKVZvdVtaUgWvsdshFKA&quot;,  &quot;expires_in&quot;:7200}</code></pre><p>获得<code>jsapi_ticket</code>之后，就可以生成<code>JS-SDK</code>权限验证的签名了。</p><h3 id="4-3-生成签名"><a href="#4-3-生成签名" class="headerlink" title="4.3 生成签名"></a>4.3 生成签名</h3><p>签名生成规则如下：参与签名的字段包括<code>noncestr</code>（随机字符串）, 有效的<code>jsapi_ticket</code>, <code>timestamp</code>（时间戳）, <code>url</code>（当前待分享网页URL，不包含#及其后面部分） 。对所有待签名参数按照字段名的ASCII 码从小到大排序（字典序）后，使用URL键值对的格式（即<code>key1=value1&amp;key2=value2…</code>）拼接成字符串<code>string1</code>。这里需要注意的是所有参数名均为小写字符。对<code>string1</code>作<code>sha1</code>加密，字段名和字段值都采用原始值，不进行<code>URL</code> 转义。</p><p>即<code>signature=sha1(string1)</code>。 示例：</p><pre><code>noncestr=Wm3WZYTPz0wzccnWjsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qgtimestamp=1414587457url=当前待分享网页URL</code></pre><p>步骤1. 对所有待签名参数按照字段名的<code>ASCII</code>码从小到大排序（字典序）后，使用URL键值对的格式（即<code>key1=value1&amp;key2=value2…</code>）拼接成字符串<code>string1</code>：</p><pre><code>jsapi_ticket=sM4AOVdWfPE4DxkXGEs8VMCPGGVi4C3VM0P37wVUCFvkVAy_90u5h9nbSlYy3-Sl-HhTdfl2fzFy1AOcHKP7qg&amp;noncestr=Wm3WZYTPz0wzccnW&amp;timestamp=1414587457&amp;url=http://mp.weixin.qq.com?params=value</code></pre><p>步骤2. 对<code>string1</code>进行<code>sha1</code>签名，得到<code>signature</code>：</p><pre><code>0f9de62fce790f9a083d5c99e95740ceb90c27ed</code></pre><p>注意事项</p><ol><li>签名用的<code>noncestr</code>和<code>timestamp</code>必须与<code>wx.config</code>中的<code>nonceStr</code>和<code>timestamp</code>相同。</li><li>签名用的<code>url</code>必须是调用<code>JS</code>接口页面的完整<code>URL</code>。</li><li>出于安全考虑，开发者必须在服务器端实现签名的逻辑。</li></ol><h3 id="最终效果如下"><a href="#最终效果如下" class="headerlink" title="最终效果如下"></a>最终效果如下</h3><p><img src="https://i.loli.net/2019/10/29/LNr8mvMtgdxC4yQ.png" alt="QQ截图20191029185426.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weixin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ie低版本不认识html5标签</title>
      <link href="/2019/10/14/%E8%A7%A3%E5%86%B3ie%E4%BD%8E%E7%89%88%E6%9C%AC%E4%B8%8D%E8%AE%A4%E8%AF%86html5%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/10/14/%E8%A7%A3%E5%86%B3ie%E4%BD%8E%E7%89%88%E6%9C%AC%E4%B8%8D%E8%AE%A4%E8%AF%86html5%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="解决ie低版本不认识html5-css3标签"><a href="#解决ie低版本不认识html5-css3标签" class="headerlink" title="解决ie低版本不认识html5,css3标签"></a>解决ie低版本不认识html5,css3标签</h1><blockquote><p>在不支持<code>HTML5</code>新标签的浏览器里，会将这些新的标签解析成行内元素(<code>inline</code>)对待，所以我们只需要将其转换成块元素(<code>block</code>)即可使用，但是在<code>IE9</code>版本以下，并不能正常解析这些新标签，但是却可以识别通过<code>document.createElement(&#39;tagName&#39;)</code>创建的自定义标签，于是我们的解决方案就是将<code>HTML5</code>的新标签全部通过<code>document.createElement</code>(‘tagName’)来创建一遍，这样<code>IE</code>低版本也能正常解析<code>HTML5</code>新标签了。</p></blockquote><h4 id="处理方式：在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载三方的一个JS库来解决兼容问题（测试在IE下面的兼容性：ieTester软件的使用）"><a href="#处理方式：在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载三方的一个JS库来解决兼容问题（测试在IE下面的兼容性：ieTester软件的使用）" class="headerlink" title="处理方式：在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载三方的一个JS库来解决兼容问题（测试在IE下面的兼容性：ieTester软件的使用）"></a>处理方式：在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载三方的一个JS库来解决兼容问题（测试在IE下面的兼容性：ieTester软件的使用）</h4><blockquote><p><code>html5shiv</code>：解决ie9以下浏览器对html5新增标签的不识别，并导致CSS不起作用的问题。<br><br><code>respond</code>:让不支持css3 Media Query的浏览器包括IE6-IE8等其他浏览器支持查询。</p></blockquote><p> 我们解决的问题， 主要是针对于<code>ie</code>低版本的，也就是只有低版本<code>ie</code>才执行才对。</p><pre><code>&lt;!--[if lt IE 9]&gt;  　　&lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.js&quot;&gt;&lt;/script&gt; 　　&lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]—&gt;</code></pre><h4 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h4><pre><code>&lt;!--[if !IE]&gt;&lt;!--&gt; 除IE外都可识别 &lt;!--&lt;![endif]--&gt;&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;&lt;!--[if IE 6]&gt; 仅IE6可识别 &lt;![endif]--&gt;&lt;!--[if lte IE 6]&gt; IE6以及IE6以下版本可识别 &lt;![endif]--&gt;&lt;!--[if gte IE 6]&gt; IE6以及IE6以上版本可识别 &lt;![endif]--&gt;&lt;!--[if IE 7]&gt; 仅IE7可识别 &lt;![endif]--&gt;&lt;!--[if lt IE 7]&gt; IE7以下版本可识别 &lt;![endif]--&gt;&lt;!--[if gt IE 7]&gt; IE7以上版本可识别 &lt;![endif]--&gt;&lt;!--[if IE 8]&gt; 仅IE8可识别 &lt;![endif]--&gt;&lt;!--[if IE 9]&gt; 仅IE9可识别 &lt;![endif]--&gt;</code></pre><p><img src="https://i.loli.net/2019/10/29/Vl4hbcMGQxt8HLZ.jpg" alt="html.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Easing.js 插件</title>
      <link href="/2019/10/14/jQuery-Easing-js-%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/14/jQuery-Easing-js-%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍：easing是jquery的一个插件，使用它可以创建更加绚丽的动画效果。</p></blockquote><blockquote><p>环境：因为easing是jQuery的插件，所以必须是在引入jquery之后再引入它</p></blockquote><p>如果只想要简单的写法就用 </p><pre><code>$(&quot;.car&quot;).animate({&quot;left&quot;: &quot;150%&quot;},  4000, &quot;easeInElastic&quot;, function() {});easing:格式为json,{duration:持续时间,easing:过渡效果,complete:成功后的回调函数}</code></pre><p>示例</p><pre><code>$(element).animate({     height:500,     width:600     },{     easing: &apos;easeInOutQuad&apos;,     duration: 500,     complete: function(){} }); </code></pre><ol><li>linear</li><li>swing</li><li>easeInQuad</li><li>easeOutQuad</li><li>easeInOutQuad</li><li>easeInCubic</li><li>easeOutCubic</li><li>easeInOutCubic</li><li>easeInQuart</li><li>easeOutQuart</li><li>easeInOutQuart</li><li>easeInQuint</li><li>easeOutQuint</li><li>easeInOutQuint</li><li>easeInExpo</li><li>easeOutExpo</li><li>easeInOutExpo</li><li>easeInSine</li><li>easeOutSine</li><li>easeInOutSine</li><li>easeInCirc</li><li>easeOutCirc</li><li>easeInOutCirc</li><li>easeInElastic</li><li>easeOutElastic</li><li>easeInOutElastic</li><li>easeInBack</li><li>easeOutBack</li><li>easeInOutBack</li><li>easeInBounce</li><li>easeOutBounce</li><li>easeInOutBounce</li></ol><p><img src="https://i.loli.net/2019/10/29/OofAwYiau3vLRgk.png" alt="esse.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora添加软件桌面快捷方式</title>
      <link href="/2019/10/11/Fedora%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/10/11/Fedora%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="以下以添加Eclipse为例"><a href="#以下以添加Eclipse为例" class="headerlink" title="以下以添加Eclipse为例"></a>以下以添加<code>Eclipse</code>为例</h2><p>在桌面上新建<code>Eclipse.desktop</code> 文件，向其写入如下代码</p><pre><code>[Desktop Entry]  Name=Eclipse  Comment=用Eclipse开发  Exec=/usr/lib/eclispe/eclipse  Icon=/usr/lib/eclipse/eclipse32.png Terminal=false Type=Application Categories=Application;Development;</code></pre><p>注意修改 <code>Exec</code>软件执行路径以及<code>Icon</code>软件icon的路径</p><p>将其标记为<code>信任</code>：</p><p>直接点击它，会提示标记为<code>信任</code>。</p><p>或者右击选择<code>属性</code>，在<code>权限选项卡</code>中勾选<code>允许程序执行文件</code></p><p>下面将其放入应用程序中：</p><p>打开终端，将其拷贝到 <code>/usr/share/applications/</code>目录下（需要<code>root</code>权限）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/linuxchyu/article/details/16984683?utm_source=copy" target="_blank" rel="noopener">如何在Fedora添加桌面快捷方式、如何添加到应用程序</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> fedora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos6配置本地yum源</title>
      <link href="/2019/10/11/centos-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0yum%E6%BA%90/"/>
      <url>/2019/10/11/centos-%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0yum%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在无法访问外网时,<code>yum</code>安装软件会失败，这时候可以配置<code>yum</code>源为本地的镜像<code>iso</code>来解决这个问题 </p></blockquote><h3 id="1-使用Xftp上传iso镜像文件到服务器"><a href="#1-使用Xftp上传iso镜像文件到服务器" class="headerlink" title="1. 使用Xftp上传iso镜像文件到服务器"></a>1. 使用<code>Xftp</code>上传<code>iso</code>镜像文件到服务器</h3><h3 id="2-使用如下命令新建挂载点并挂载"><a href="#2-使用如下命令新建挂载点并挂载" class="headerlink" title="2. 使用如下命令新建挂载点并挂载"></a>2. 使用如下命令新建挂载点并挂载</h3><pre><code>sudo mkdir /media/isosudo mkdir /media/dvd1sudo mkdir /media/dvd2sudo mv  /home/user/CentOS-6.5-x86_64-bin-DVD1.iso   /media/isosudo mv  /home/user/CentOS-6.5-x86_64-bin-DVD2.iso   /media/iso#挂载centos安装盘(两个iso)sudo mount -o loop /media/iso/CentOS-6.5-x86_64-bin-DVD1.iso  /media/dvd1/sudo mount -o loop /media/iso/CentOS-6.5-x86_64-bin-DVD2.iso  /media/dvd2/</code></pre><h3 id="3-修改yum源配置，把CentOS-Base-repo文件备份"><a href="#3-修改yum源配置，把CentOS-Base-repo文件备份" class="headerlink" title="3. 修改yum源配置，把CentOS-Base.repo文件备份"></a>3. 修改<code>yum</code>源配置，把<code>CentOS-Base.repo</code>文件备份</h3><pre><code>cd /etc/yum.repos.d/cp CentOS-Base.repo CentOS-Base.repo.bak</code></pre><p><code>vim</code> <code>CentOS-Base.repo</code></p><pre><code>#修改如下内容enabled=1#将baseurl中的路径修改为 file://media/dvd1和ile://media/dvd2#保存退出</code></pre><p><img src="https://i.loli.net/2019/10/29/NlaWG1zYLxeQ4tU.png" alt></p><h3 id="4-清空yum已存在的所有源信息-重新生成缓存"><a href="#4-清空yum已存在的所有源信息-重新生成缓存" class="headerlink" title="4. 清空yum已存在的所有源信息,重新生成缓存"></a>4. 清空yum已存在的所有源信息,重新生成缓存</h3><pre><code>yum clean allyum makecache</code></pre><h3 id="5-查看本地源的所有软件"><a href="#5-查看本地源的所有软件" class="headerlink" title="5. 查看本地源的所有软件"></a>5. 查看本地源的所有软件</h3><pre><code>yum list    </code></pre><blockquote><p>注意系统重启之后，需要再次手动挂载    </p></blockquote><p>至此<code>Centos</code>本地<code>yum</code>源配置完成    </p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yum </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window下的php命令行输出汉字乱码处理</title>
      <link href="/2019/10/11/window%E4%B8%8B%E7%9A%84php%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81%E5%A4%84%E7%90%86/"/>
      <url>/2019/10/11/window%E4%B8%8B%E7%9A%84php%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA%E6%B1%89%E5%AD%97%E4%B9%B1%E7%A0%81%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-在php的代码中加入"><a href="#1-在php的代码中加入" class="headerlink" title="1. 在php的代码中加入"></a>1. 在<code>php</code>的代码中加入</h2><pre><code>header(&quot;content-type:text/html;charset=gbk&quot;);</code></pre><h2 id="2-设置命令行的字体"><a href="#2-设置命令行的字体" class="headerlink" title="2. 设置命令行的字体"></a>2. 设置命令行的字体</h2><p>在命令行上右击<code>属性</code> 字体 选择如下字体 点击<code>确定</code></p><p><img src="https://i.loli.net/2019/10/29/psCeirqRdYo4HFz.png" alt="QQ截图20191029185843.png"></p><p>我按照上面的流程基本解决问题，如果还有乱码的话，看看是不是编码不是<code>gbk</code>尝试<code>gb2312</code>以及其他的一些编码。</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷歌浏览器设置网站信任flash</title>
      <link href="/2019/10/11/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E4%BF%A1%E4%BB%BBflash/"/>
      <url>/2019/10/11/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E4%BF%A1%E4%BB%BBflash/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在我们本地开发网站，需要测试的时候，如果使用一个<code>flash</code>插件，谷歌浏览器默认会禁用<code>flash</code>,这时候需要我们手动添加该网站的<code>flash</code>信任</p></blockquote><p><img src="https://i.loli.net/2019/10/29/Rd17OD9aIcg6HX5.png" alt="QQ截图20191029183115.png"></p><p>如上图所示的<code>不安全</code>，点击会弹出一个框，点击<code>网站设置</code>，将其中的<code>flash</code>设置为<code>允许</code>即可.</p><p><img src="https://i.loli.net/2019/10/29/jfqLd1Vw5AGCpFT.png" alt="QQ截图20191029183132.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC插入中文数据出现？号地解决问题</title>
      <link href="/2019/10/11/JDBC%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%EF%BC%9F%E5%8F%B7%E5%9C%B0%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/11/JDBC%E6%8F%92%E5%85%A5%E4%B8%AD%E6%96%87%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%EF%BC%9F%E5%8F%B7%E5%9C%B0%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-查看jdbc配置是否指定编码"><a href="#1-查看jdbc配置是否指定编码" class="headerlink" title="1. 查看jdbc配置是否指定编码"></a>1. 查看jdbc配置是否指定编码</h3><pre><code>Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/testjdbc&quot;,&quot;root&quot;,&quot;123456&quot;);</code></pre><hr><p>在原先的配置上指定编码即可<code>?characterEncoding=utf8</code></p><hr><pre><code>Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/testjdbc?characterEncoding=utf8&quot;,&quot;root&quot;,&quot;123456&quot;);</code></pre><hr><h3 id="2-查看mysql数据库及表编码格式是否正常"><a href="#2-查看mysql数据库及表编码格式是否正常" class="headerlink" title="2. 查看mysql数据库及表编码格式是否正常"></a>2. 查看mysql数据库及表编码格式是否正常</h3><p><img src="https://i.loli.net/2019/10/29/csSZJDGpgE6A5WP.png" alt="QQ截图20191029180810.png"></p><p>上面的即是正确配置，防止中文字符乱码</p><h3 id="如果不是的话，需要到my-ini文件中添加或修改"><a href="#如果不是的话，需要到my-ini文件中添加或修改" class="headerlink" title="如果不是的话，需要到my.ini文件中添加或修改"></a>如果不是的话，需要到<code>my.ini</code>文件中添加或修改</h3><pre><code>[mysqld]default_authentication_plugin=mysql_native_passwordport = 3306character_set_server = utf8</code></pre><p>重启<code>mysql</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea 代码部分格式化</title>
      <link href="/2019/10/11/idea-%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2019/10/11/idea-%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>效果: 处理<code>Idea</code>使用<code>ctrl+alt+L</code>进行代码格式化时部分代码可以被忽略，不执行格式化功能(<code>webstorm</code>,<code>phpstorm</code>同理)<br>原因: 有时希望自己写的一些代码不被格式化，或者发现格式化后代码显示样式异常</p></blockquote><h2 id="配置idea开启"><a href="#配置idea开启" class="headerlink" title="配置idea开启"></a>配置<code>idea</code>开启</h2><p><code>File</code>–&gt;<code>Settings</code>–&gt;<code>Editor</code>–&gt;<code>Code Style</code> 在代码格式化选项中开启部分代码忽略功能</p><p><img src="https://i.loli.net/2019/10/29/duvrcJPUwzqlX7S.png" alt></p><p>勾选开启代码部分格式化<br>点击应用,结束配置</p><h2 id="对需要忽略格式化的代码进行配置"><a href="#对需要忽略格式化的代码进行配置" class="headerlink" title="对需要忽略格式化的代码进行配置"></a>对需要忽略格式化的代码进行配置</h2><p>这里以<code>css</code>代码为例</p><pre><code>/*@formatter:off*/    这里是需要忽略格式化的css代码/*@formatter:on*/</code></pre><h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p>源代码</p><p><img src="https://i.loli.net/2019/10/29/HEGjVOq7fhuUx93.png" alt></p><p>格式化代码</p><p><img src="https://i.loli.net/2019/10/29/3Uj9z4pyPXBCqGl.png" alt="QQ截图20191011092250.png"></p><p>添加代码忽略后，执行格式化后的代码</p><p><img src="https://i.loli.net/2019/10/29/CFRx61zrsuYAcDe.png" alt="QQ截图20191011092223.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Mislead/article/details/52130536" target="_blank" rel="noopener">IDEA(AS)代码格式化部分忽略</a></p><p><a href="https://www.jianshu.com/p/ffc44c50f688" target="_blank" rel="noopener">idea代码部分格式化</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fullpage.js全屏插件</title>
      <link href="/2019/10/10/fullpage-js%E5%85%A8%E5%B1%8F%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/10/10/fullpage-js%E5%85%A8%E5%B1%8F%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="fullpage-全屏插件"><a href="#fullpage-全屏插件" class="headerlink" title="fullpage 全屏插件"></a>fullpage 全屏插件</h1><blockquote><p>全屏滚动效果，原生js也很好实现，主要是用 mousewheel  鼠标滚轮滚动事件， 来判断上滚动还是下滚动，之后设置每次滚动的高度为屏幕的高度即可。但是，虽然效果简单，但是兼容性很差，要做很多兼容处理及比较麻烦啦！</p></blockquote><p><code>fullPage.js</code> 是一个基于 <code>jQuery</code> 的插件，它能够帮你很方便、很轻松的制作出全屏网站。</p><p><code>github</code> 官网     <code>https://github.com/alvarotrigo/fullPage.js</code>  </p><p>中文演示地址   <code>http://www.dowebok.com/demo/2014/77/</code> </p><h2 id="1-主要功能有："><a href="#1-主要功能有：" class="headerlink" title="1. 主要功能有："></a>1. 主要功能有：</h2><pre><code>支持鼠标滚动支持前进后退和键盘控制多个回调函数支持手机、平板触摸事件支持 CSS3 动画支持窗口缩放窗口缩放时自动调整可设置滚动宽度、背景颜色、滚动速度、循环选项、回调、文本对齐方式等等</code></pre><h2 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h2><h3 id="2-1-引入资源文件"><a href="#2-1-引入资源文件" class="headerlink" title="2.1 引入资源文件"></a>2.1 引入资源文件</h3><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/jquery.fullPage.css&quot;&gt;&lt;!--需要引入jquery--&gt;&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;!-- jquery.easings.min.js 是必须的，用于 easing 参数，也可以使用完整的 jQuery UI 代替 --&gt;&lt;script src=&quot;js/jquery.easing.1.3.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/jquery.fullPage.min.js&quot;&gt;&lt;/script&gt;&lt;!--引入初始化js--&gt;&lt;script src=&quot;js/myPage.js&quot;&gt;&lt;/script&gt;</code></pre><h3 id="2-2-编写HTML-结构"><a href="#2-2-编写HTML-结构" class="headerlink" title="2.2 编写HTML 结构"></a>2.2 编写HTML 结构</h3><pre><code>&lt;div id=&quot;fullpage&quot;&gt;    &lt;div class=&quot;section&quot;&gt;第一屏&lt;/div&gt;    &lt;div class=&quot;section&quot;&gt;第二屏&lt;/div&gt;    &lt;div class=&quot;section&quot;&gt;        &lt;div class=&quot;slide&quot;&gt;第三屏的第一屏&lt;/div&gt;        &lt;div class=&quot;slide&quot;&gt;第三屏的第二屏&lt;/div&gt;        &lt;div class=&quot;slide&quot;&gt;第三屏的第三屏&lt;/div&gt;        &lt;div class=&quot;slide&quot;&gt;第三屏的第四屏&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;section&quot;&gt;第四屏&lt;/div&gt;&lt;/div&gt; </code></pre><p>  结构大致如下图所示</p><p><img src="https://i.loli.net/2019/10/29/1NYbrzcOd7mpKk9.png" alt></p><h3 id="2-3-初始化"><a href="#2-3-初始化" class="headerlink" title="2.3 初始化"></a>2.3 初始化</h3><p>myPage.js</p><pre><code>$(document).ready(function() {    $(&apos;#fullpage&apos;).fullpage({        //options here        autoScrolling:true,        scrollHorizontally: true    });}); </code></pre><h2 id="3-演示效果"><a href="#3-演示效果" class="headerlink" title="3. 演示效果"></a>3. 演示效果</h2><iframe src="//player.bilibili.com/player.html?aid=70789760&cid=122649501&page=1" scrolling="no" width="100%" height="600" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="4-参数补充"><a href="#4-参数补充" class="headerlink" title="4. 参数补充"></a>4. 参数补充</h2><h3 id="4-1-详细参数"><a href="#4-1-详细参数" class="headerlink" title="4.1 详细参数"></a>4.1 详细参数</h3><p>所有选项设置的更复杂的初始化如下所示：</p><pre><code>var myFullpage = new fullpage(&apos;#fullpage&apos;, {   //导航   menu: &apos;#menu&apos;,   lockAnchors: false,   anchors:[&apos;firstPage&apos;, &apos;secondPage&apos;],   navigation: false,   navigationPosition: &apos;right&apos;,   navigationTooltips: [&apos;firstSlide&apos;, &apos;secondSlide&apos;],   showActiveTooltip: false,   slidesNavigation: false,   slidesNavPosition: &apos;bottom&apos;,   //滚动   css3: true,   scrollingSpeed: 700,   autoScrolling: true,   fitToSection: true,   fitToSectionDelay: 1000,   scrollBar: false,   easing: &apos;easeInOutCubic&apos;,   easingcss3: &apos;ease&apos;,   loopBottom: false,   loopTop: false,   loopHorizontal: true,   continuousVertical: false,   continuousHorizontal: false,   scrollHorizontally: false,   interlockedSlides: false,   dragAndMove: false,   offsetSections: false,   resetSliders: false,   fadingEffect: false,   normalScrollElements: &apos;#element1, .element2&apos;,   scrollOverflow: false,   scrollOverflowReset: false,   scrollOverflowOptions: null,   touchSensitivity: 15,   bigSectionsDestination: null,   //可访问   keyboardScrolling: true,   animateAnchor: true,   recordHistory: true,   //设计   controlArrows: true,   verticalCentered: true,   sectionsColor : [&apos;#ccc&apos;, &apos;#fff&apos;],   paddingTop: &apos;3em&apos;,   paddingBottom: &apos;10px&apos;,   fixedElements: &apos;#header, .footer&apos;,   responsiveWidth: 0,   responsiveHeight: 0,   responsiveSlides: false,   parallax: false,   parallaxOptions: {type: &apos;reveal&apos;, percentage: 62, property: &apos;translate&apos;},   cards: false,   cardsOptions: {perspective: 100, fadeContent: true, fadeBackground: true},   //自定义选择器   sectionSelector: &apos;.section&apos;,   slideSelector: &apos;.slide&apos;,   lazyLoading: true,   //事件   onLeave: function(origin, destination, direction){},   afterLoad: function(origin, destination, direction){},   afterRender: function(){},   afterResize: function(width, height){},   afterReBuild: function(){},   afterResponsive: function(isResponsive){},   afterSlideLoad: function(section, origin, destination, direction){},   onSlideLeave: function(section, origin, destination, direction){}});     </code></pre><h3 id="4-2-详细参数说明"><a href="#4-2-详细参数说明" class="headerlink" title="4.2 详细参数说明"></a>4.2 详细参数说明</h3><table><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr><tr><td>verticalCentered</td><td>字符串</td><td>true</td><td>内容是否垂直居中</td></tr><tr><td>resize</td><td>布尔值</td><td>false</td><td>字体是否随着窗口缩放而缩放</td></tr><tr><td>sectionColor</td><td>函数</td><td>无</td><td>设置背景颜色</td></tr><tr><td>anchors</td><td>数组</td><td>无</td><td>定义锚链接</td></tr><tr><td>scrollingSpeed</td><td>整数</td><td>700</td><td>滚动速度，单位为毫秒</td></tr><tr><td>easing</td><td>字符串</td><td>easeInQuart</td><td>滚动动画方式</td></tr><tr><td>menu</td><td>布尔值</td><td>false</td><td>绑定菜单，设定的相关属性与 anchors 的值对应后，菜单可以控制滚动</td></tr><tr><td>navigation</td><td>布尔值</td><td>false</td><td>是否显示项目导航</td></tr><tr><td>navigationPosition</td><td>字符串</td><td>right</td><td>项目导航的位置，可选 left 或 right</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>navigationTooltips</td><td>数组</td><td>空</td><td>项目导航的 tip</td></tr><tr><td>slidesNavigation</td><td>布尔值</td><td>false</td><td>是否显示左右滑块的项目导航</td></tr><tr><td>slidesNavPosition</td><td>字符串</td><td>bottom</td><td>左右滑块的项目导航的位置，可选 top 或 bottom</td></tr><tr><td>controlArrowColor</td><td>字符串</td><td>#fff</td><td>左右滑块的箭头的背景颜色</td></tr><tr><td>loopBottom</td><td>布尔值</td><td>false</td><td>滚动到最底部后是否滚回顶部</td></tr><tr><td>loopTop</td><td>布尔值</td><td>false</td><td>滚动到最顶部后是否滚底部</td></tr><tr><td>loopHorizontal</td><td>布尔值</td><td>true</td><td>左右滑块是否循环滑动</td></tr><tr><td>autoScrolling</td><td>布尔值</td><td>true</td><td>是否使用插件的滚动方式，如果选择 false，则会出现浏览器自带的滚动条</td></tr><tr><td>scrollOverflow</td><td>布尔值</td><td>false</td><td>内容超过满屏后是否显示滚动条</td></tr><tr><td>css3</td><td>布尔值</td><td>false</td><td>是否使用 CSS3 transforms 滚动</td></tr><tr><td>paddingTop</td><td>字符串</td><td>0</td><td>与顶部的距离</td></tr><tr><td>paddingBottom</td><td>字符串</td><td>0</td><td>与底部距离</td></tr><tr><td>fixedElements</td><td>字符串</td><td>无</td><td></td></tr><tr><td>normalScrollElements</td><td></td><td>无</td><td></td></tr><tr><td>keyboardScrolling</td><td>布尔值</td><td>true</td><td>是否使用键盘方向键导航</td></tr><tr><td>touchSensitivity</td><td>整数</td><td>5</td><td></td></tr><tr><td>continuousVertical</td><td>布尔值</td><td>false</td><td>是否循环滚动，与 loopTop 及 loopBottom 不兼容</td></tr><tr><td>animateAnchor</td><td>布尔值</td><td>true</td><td></td></tr><tr><td>normalScrollElementTouchThreshold</td><td>整数</td><td>5</td><td></td></tr></tbody></table><h3 id="4-3-fullPage-js-方法"><a href="#4-3-fullPage-js-方法" class="headerlink" title="4.3 fullPage.js 方法"></a>4.3 fullPage.js 方法</h3><p>注意方法的使用时需要添加：<br>         <code>$.fn.fullpage</code>   比如</p><pre><code>$.fn.fullpage.moveTo(1);</code></pre><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>moveSectionUp()</td><td>向上滚动</td></tr><tr><td>moveSectionDown()</td><td>向下滚动</td></tr><tr><td>moveTo(section, slide)</td><td>滚动到</td></tr><tr><td>moveSlideRight()</td><td>slide 向右滚动</td></tr><tr><td>moveSlideLeft()</td><td>slide 向左滚动</td></tr><tr><td>setAutoScrolling()</td><td>设置页面滚动方式，设置为 true 时自动滚动</td></tr><tr><td>setAllowScrolling()</td><td>添加或删除鼠标滚轮/触控板控制</td></tr><tr><td>setKeyboardScrolling()</td><td>添加或删除键盘方向键控制</td></tr><tr><td>setScrollingSpeed()</td><td>定义以毫秒为单位的滚动速度</td></tr></tbody></table><h3 id="4-4-回调函数"><a href="#4-4-回调函数" class="headerlink" title="4.4 回调函数"></a>4.4 回调函数</h3><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>afterLoad</td><td>滚动到某一屏后的回调函数，接收 anchorLink 和 index 两个参数，anchorLink 是锚链接的名称，index 是序号，从1开始计算</td></tr><tr><td>onLeave</td><td>滚动前的回调函数，接收 index、nextIndex 和 direction 3个参数：index 是离开的“页面”的序号，从1开始计算；nextIndex 是滚动到的“页面”的序号，从1开始计算；direction 判断往上滚动还是往下滚动，值是 up 或 down。</td></tr><tr><td>afterRender</td><td>页面结构生成后的回调函数，或者说页面初始化完成后的回调函数</td></tr><tr><td>afterSlideLoad</td><td>滚动到某一水平滑块后的回调函数，与 afterLoad 类似，接收 anchorLink、index、slideIndex、direction 4个参数</td></tr><tr><td>onSlideLeave</td><td>某一水平滑块滚动前的回调函数，与 onLeave 类似，接收 anchorLink、index、slideIndex、direction 4个参数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定位的盒子居中对齐完美写法</title>
      <link href="/2019/10/05/%E5%AE%9A%E4%BD%8D%E7%9A%84%E7%9B%92%E5%AD%90%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%E5%AE%8C%E7%BE%8E%E5%86%99%E6%B3%95/"/>
      <url>/2019/10/05/%E5%AE%9A%E4%BD%8D%E7%9A%84%E7%9B%92%E5%AD%90%E5%B1%85%E4%B8%AD%E5%AF%B9%E9%BD%90%E5%AE%8C%E7%BE%8E%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h4><pre><code>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;style&gt;    .box {        width: 499.9999px;        height: 400px;        background: pink;        position: absolute;        left: 50%;        top: 50%;        transform: translate(-50%, -50%);        /* 走的自己的一半 */    }&lt;/style&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-效果展示"><a href="#2-效果展示" class="headerlink" title="2. 效果展示"></a>2. 效果展示</h4><p><img src="https://i.loli.net/2019/10/29/Ll9VkfMavUCAp8O.png" alt="QQ截图20191005162933.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动门技术实现</title>
      <link href="/2019/10/05/%E6%BB%91%E5%8A%A8%E9%97%A8%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/10/05/%E6%BB%91%E5%8A%A8%E9%97%A8%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><p><img src="https://i.loli.net/2019/10/29/zZswpI9DALiMJ4X.gif" alt="h.gif"></p><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><p><img src="https://i.loli.net/2019/10/29/DrlntfJzk7w91MP.jpg" alt="wxx.jpg"></p><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><pre><code>&lt;li&gt;  &lt;a href=&quot;#&quot;&gt;    &lt;span&gt;导航栏内容&lt;/span&gt;  &lt;/a&gt;&lt;/li&gt;</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;    * {        margin: 0;        padding: 0;    }    ul {        list-style: none;    }    body {        background: url(images/wx.jpg) repeat-x;    }    .nav {        height: 75px;    }    .nav li {        float: left;        margin: 0 10px;        padding-top: 21px;    }    .nav li a {        display: block;        background: url(images/to.png) no-repeat;        color: #fff;        font-size: 14px;        line-height: 33px;        padding-left: 15px;        text-decoration: none;    }    .nav li a:hover {        background-image: url(images/ao.png);    }    .nav li a:hover span {  /* 鼠标经过a a里面的span 也要变换背景 */        background-image: url(images/ao.png);    }    .nav li a span {        display: block;        line-height: 33px;        background: url(images/to.png) no-repeat right center;        padding-right: 15px;    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;nav&quot;&gt;        &lt;ul&gt;            &lt;li&gt;                &lt;a href=&quot;#&quot;&gt;                    &lt;span&gt;首页&lt;/span&gt;                &lt;/a&gt;            &lt;/li&gt;            &lt;li&gt;                &lt;a href=&quot;#&quot;&gt;                    &lt;span&gt;帮助与反馈&lt;/span&gt;                &lt;/a&gt;            &lt;/li&gt;            &lt;li&gt;                &lt;a href=&quot;#&quot;&gt;                    &lt;span&gt;公众平台&lt;/span&gt;                &lt;/a&gt;            &lt;/li&gt;            &lt;li&gt;                &lt;a href=&quot;#&quot;&gt;                    &lt;span&gt;帮助与反馈&lt;/span&gt;                &lt;/a&gt;            &lt;/li&gt;            &lt;li&gt;                &lt;a href=&quot;#&quot;&gt;                    &lt;span&gt;帮助与反馈&lt;/span&gt;                &lt;/a&gt;            &lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2019/10/29/JuKLDNso8YA9fcx.png" alt="QQ截图20191005091212.png"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><pre><code>1. a 设置 背景左侧，padding撑开合适宽度。    2. span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。3. 之所以a包含span就是因为 整个导航都是可以点击的。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字体图标的使用</title>
      <link href="/2019/10/05/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/10/05/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><blockquote><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p></blockquote><h4 id="1-字体图标优点"><a href="#1-字体图标优点" class="headerlink" title="1. 字体图标优点"></a>1. 字体图标优点</h4><pre><code>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...本身体积更小，但携带的信息并没有削减。几乎支持所有的浏览器移动端设备必备良药...</code></pre><h4 id="2-字体图标使用流程"><a href="#2-字体图标使用流程" class="headerlink" title="2. 字体图标使用流程"></a>2. 字体图标使用流程</h4><p>总体来说，字体图标按照如下流程：</p><h4 id="2-1-设计字体图标"><a href="#2-1-设计字体图标" class="headerlink" title="2.1 设计字体图标"></a>2.1 设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p><p><img src="https://i.loli.net/2019/10/29/8LXxnsQNVC76cpI.png" alt="fontt.png"></p><p>  之后保存为svg格式，然后给我们前端人员就好了。 </p><p>  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h4 id="2-2-上传生成字体包"><a href="#2-2-上传生成字体包" class="headerlink" title="2.2 上传生成字体包"></a>2.2 上传生成字体包</h4><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p><p>推荐网站： <code>http://icomoon.io</code></p><h5 id="icomoon字库"><a href="#icomoon字库" class="headerlink" title="icomoon字库"></a>icomoon字库</h5><p><code>IcoMoon</code>成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><p>   推荐网站： <code>http://www.iconfont.cn/</code></p><h5 id="阿里icon-font字库"><a href="#阿里icon-font字库" class="headerlink" title="阿里icon font字库"></a>阿里icon font字库</h5><p><code>http://www.iconfont.cn/</code></p><p>这个是阿里妈妈<code>M2UX</code>的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p><h5 id="fontello"><a href="#fontello" class="headerlink" title="fontello"></a>fontello</h5><p><code>http://fontello.com/</code></p><p>在线定制你自己的<code>icon font</code>字体图标字库，也可以直接从<code>GitHub</code>下载整个图标集，该项目也是开源的。</p><h5 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font-Awesome"></a>Font-Awesome</h5><p><code>http://fortawesome.github.io/Font-Awesome/</code></p><p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p><h5 id="Glyphicon-Halflings"><a href="#Glyphicon-Halflings" class="headerlink" title="Glyphicon Halflings"></a>Glyphicon Halflings</h5><p><code>http://glyphicons.com/</code></p><p>这个字体图标可以在<code>Bootstrap</code>下免费使用。自带了200多个图标。</p><h5 id="Icons8"><a href="#Icons8" class="headerlink" title="Icons8"></a>Icons8</h5><p><code>https://icons8.com/</code></p><p>提供<code>PNG</code>免费下载，像素大能到500PX</p><h4 id="3-下载兼容字体包"><a href="#3-下载兼容字体包" class="headerlink" title="3. 下载兼容字体包"></a>3. 下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把UI做的<code>svg</code>图片转换为我们的字体格式， 然后下载下来就好了</p><p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p><p><img src="https://i.loli.net/2019/10/29/BbOluTIygip8Gs2.png" alt="fontt1.png"></p><p><img src="https://i.loli.net/2019/10/29/RQ2tiWwz1DOgFZf.png" alt="fontt2.png"></p><p>最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><h4 id="4-字体引入到HTML-Unicode-引用"><a href="#4-字体引入到HTML-Unicode-引用" class="headerlink" title="4. 字体引入到HTML(Unicode 引用)"></a>4. 字体引入到HTML(Unicode 引用)</h4><p><img src="https://i.loli.net/2019/10/29/dPLjfhAMkboGlOq.png" alt="QQ截图20191005083057.png"></p><p><code>Unicode</code> 是字体在网页端最原始的应用方式，特点是：</p><p>兼容性最好，支持 <code>IE6+</code>，及所有现代浏览器。<br>支持按字体的方式去动态调整图标大小，颜色等等。<br>但是因为是字体，所以不支持多色。只能使用平台里单色的图标，就算项目里有多色图标也会自动去色。<br>注意：新版 <code>iconfont</code> 支持多色图标，这些多色图标在 <code>Unicode</code> 模式下将不能使用，如果有需求建议使用<code>symbol</code> 的引用方式</p><p><code>Unicode</code> 使用步骤如下：</p><p>第一步：拷贝项目下面生成的<code>@font-face</code></p><pre><code>@font-face {  font-family: &apos;iconfont&apos;;  src: url(&apos;iconfont.eot&apos;);  src: url(&apos;iconfont.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;),      url(&apos;iconfont.woff2&apos;) format(&apos;woff2&apos;),      url(&apos;iconfont.woff&apos;) format(&apos;woff&apos;),      url(&apos;iconfont.ttf&apos;) format(&apos;truetype&apos;),      url(&apos;iconfont.svg#iconfont&apos;) format(&apos;svg&apos;);}</code></pre><p>第二步：定义使用 <code>iconfont</code> 的样式</p><pre><code>.iconfont {  font-family: &quot;iconfont&quot; !important;  font-size: 16px;  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}</code></pre><p>第三步：挑选相应图标并获取字体编码，应用于页面</p><pre><code>&lt;span class=&quot;iconfont&quot;&gt;&amp;#x33;&lt;/span&gt;</code></pre><h4 id="5-字体引入到HTML-font-class-引用"><a href="#5-字体引入到HTML-font-class-引用" class="headerlink" title="5. 字体引入到HTML(font-class 引用)"></a>5. 字体引入到HTML(font-class 引用)</h4><p> <img src="https://i.loli.net/2019/10/29/I9VPToQqMlrUJeb.png" alt="QQ截图20191005083108.png"></p><p><code>font-class</code> 是 <code>Unicode</code> 使用方式的一种变种，主要是解决 <code>Unicode</code> 书写不直观，语意不明确的问题。</p><p>与 <code>Unicode</code> 使用方式相比，具有如下特点：</p><blockquote><p>兼容性良好，支持 IE8+，及所有现代浏览器。<br>相比于 Unicode 语意明确，书写更直观。可以很容易分辨这个 icon 是什么。<br>因为使用 class 来定义图标，所以当要替换图标时，只需要修改 class 里面的 Unicode 引用。<br>不过因为本质上还是使用的字体，所以多色图标还是不支持的。</p></blockquote><p>使用步骤如下：</p><p>第一步：引入项目下面生成的 <code>fontclass</code> 代码：</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./iconfont.css&quot;&gt;</code></pre><p>第二步：挑选相应图标并获取类名，应用于页面：</p><pre><code>&lt;span class=&quot;iconfont icon-xxx&quot;&gt;&lt;/span&gt;</code></pre><h4 id="6-字体引入到HTML-Symbol-引用"><a href="#6-字体引入到HTML-Symbol-引用" class="headerlink" title="6. 字体引入到HTML(Symbol 引用)"></a>6. 字体引入到HTML(Symbol 引用)</h4><p><img src="https://i.loli.net/2019/10/29/Ot7NIbE2FB4Sva1.png" alt="QQ截图20191005083117.png"></p><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章 这种用法其实是做了一个 SVG 的集合，与另外两种相比具有如下特点：</p><p>支持多色图标了，不再受单色限制。<br>通过一些技巧，支持像字体那样，通过 <code>font-size</code>, <code>color</code> 来调整样式。<br>兼容性较差，支持 <code>IE9+</code>，及现代浏览器。<br>浏览器渲染 <code>SVG</code> 的性能一般，还不如 <code>png</code>。<br>使用步骤如下：</p><p>第一步：引入项目下面生成的 <code>symbol</code> 代码：</p><pre><code>&lt;script src=&quot;./iconfont.js&quot;&gt;&lt;/script&gt;</code></pre><p>第二步：加入通用 <code>CSS</code> 代码（引入一次就行）：</p><pre><code>&lt;style&gt;.icon {  width: 1em;  height: 1em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}&lt;/style&gt;</code></pre><p>第三步：挑选相应图标并获取类名，应用于页面：</p><pre><code>&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;  &lt;use xlink:href=&quot;#icon-xxx&quot;&gt;&lt;/use&gt;&lt;/svg&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机实现独立按键计数数码管显示</title>
      <link href="/2019/10/04/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE%E8%AE%A1%E6%95%B0%E6%95%B0%E7%A0%81%E7%AE%A1%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/10/04/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE%E8%AE%A1%E6%95%B0%E6%95%B0%E7%A0%81%E7%AE%A1%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1. 开发环境"></a>1. 开发环境</h4><blockquote><p>单片机: stc89c52</p><p>开发板: Hot51单片机增强版</p></blockquote><h4 id="2-电路图"><a href="#2-电路图" class="headerlink" title="2. 电路图"></a>2. 电路图</h4><p><img src="https://i.loli.net/2019/10/29/vFQuIynsqjwT1YX.png" alt></p><h4 id="3-程序代码"><a href="#3-程序代码" class="headerlink" title="3. 程序代码"></a>3. 程序代码</h4><h5 id="3-1-程序代码1（利用延时实现消抖）"><a href="#3-1-程序代码1（利用延时实现消抖）" class="headerlink" title="3.1 程序代码1（利用延时实现消抖）"></a>3.1 程序代码1（利用延时实现消抖）</h5><pre><code>#include&lt;reg52.h&gt;#define uchar unsigned char#define uint  unsigned intsbit KEY1 = P3^2;uchar code LedChar[]= {  //数码管显示字符编码数组    0x3F,  //&quot;0&quot;    0x06,  //&quot;1&quot;    0x5B,  //&quot;2&quot;    0x4F,  //&quot;3&quot;    0x66,  //&quot;4&quot;    0x6D,  //&quot;5&quot;    0x7D,  //&quot;6&quot;    0x07,  //&quot;7&quot;    0x7F,  //&quot;8&quot;    0x6F,  //&quot;9&quot;    0x77,  //&quot;A&quot;    0x7C,  //&quot;B&quot;    0x39,  //&quot;C&quot;    0x5E,  //&quot;D&quot;    0x79,  //&quot;E&quot;    0x71     // &quot;F&quot;};uchar code LedWei[] = {7,6,5,4,3,2,1,0 };                              //八位数码管的位置值uchar LedBuff[] = {0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F};    //八位数码管应该显示的值void showLED(uint num);void delay() {    uint i = 1000;    while(i--);}void main() {    uint num = 0;            //按键计数初值    bit keybuf = 1;        //临时保存按键的扫描值    bit backup = 1;            //定义一个位变量，保存前一次扫描的按键值    EA = 1;                            //开启总中断    TMOD = 0x01;            //设置定时器0为一个16位的定时器    TH0 = 0xFC;            //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0x66;            //设置每次定时1ms    ET0 = 1;                        //使能T0中断    TR0 = 1;            //开启定时器    while(1) {        keybuf = KEY1;        if(keybuf != backup) { //当前值与前次值不相等说明此时按键有动作            delay();            if(keybuf == KEY1)    //判断按键有无发生按键抖动            {                if(backup == 0)    //如果前次值为0，说明当前值是由0变1，即按键弹起操作                {                    num++;            //按键次数加1                    showLED(num);    //调用计算数码管显示值的方法，更新最新的计数值显示数组                }                backup = keybuf;    //更新备份值为当前值，以备进行下次比较            }        }    }}/** 计算当前八位数码管每个位置应该显示的值*/void showLED(uint num) {    LedBuff[0] = LedChar[num%10];    LedBuff[1] = LedChar[num/10%10];    LedBuff[2] = LedChar[num/100%10];    LedBuff[3] = LedChar[num/1000%10];    LedBuff[4] = LedChar[num/10000%10];    LedBuff[5] = LedChar[num/100000%10];    LedBuff[6] = LedChar[num/1000000%10];    LedBuff[7] = LedChar[num/10000000%10];}void InterruptTimer0()  interrupt 1        //定时器0触发的中断{    static uchar i = 0;    TH0 = 0xFC;            //重新设置定时器0的初始值    TL0 = 0x66;    P2 = LedWei[i];        //设置显示当前数码管需要展示的位置    P0 = LedBuff[i];        //设置当前数码管要展示的值    if(i == 7) {        i = 0;    } else {        i++;    }}</code></pre><h5 id="3-2-程序代码2-推荐使用"><a href="#3-2-程序代码2-推荐使用" class="headerlink" title="3.2 程序代码2(推荐使用)"></a>3.2 程序代码2(推荐使用)</h5><pre><code>#include&lt;reg52.h&gt;#define uchar unsigned char#define uint  unsigned intsbit KEY1 = P3^2;uchar code LedChar[]= {  //数码管显示字符编码数组    0x3F,  //&quot;0&quot;    0x06,  //&quot;1&quot;    0x5B,  //&quot;2&quot;    0x4F,  //&quot;3&quot;    0x66,  //&quot;4&quot;    0x6D,  //&quot;5&quot;    0x7D,  //&quot;6&quot;    0x07,  //&quot;7&quot;    0x7F,  //&quot;8&quot;    0x6F,  //&quot;9&quot;    0x77,  //&quot;A&quot;    0x7C,  //&quot;B&quot;    0x39,  //&quot;C&quot;    0x5E,  //&quot;D&quot;    0x79,  //&quot;E&quot;    0x71     // &quot;F&quot;};uchar code LedWei[] = {7,6,5,4,3,2,1,0 };                              //八位数码管的位置值uchar LedBuff[] = {0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F};    //八位数码管应该显示的值bit KeySta = 1;        //当前按键的状态是按下还是松开状态void showLED(uint num);void main() {    uint num = 0;            //按键计数初值    bit backup = 1;            //定义一个位变量，保存前一次扫描的按键值    EA = 1;                            //开启总中断    TMOD = 0x01;            //设置定时器0为一个16位的定时器    TH0 = 0xF8;            //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0xCD;            //设置每次定时2ms    ET0 = 1;                        //使能T0中断    TR0 = 1;            //开启定时器    while(1) {        if(KeySta != backup) { //当前值与前次值不相等说明此时按键有动作            if(backup == 0)    //如果前次值为0，说明当前值是由0变1，即按键弹起操作            {                num++;            //按键次数加1                showLED(num);    //调用计算数码管显示值的方法，更新最新的计数值显示数组            }            backup = KeySta;    //更新备份值为当前值，以备进行下次比较        }    }}/** 计算当前八位数码管每个位置应该显示的值*/void showLED(uint num) {    LedBuff[0] = LedChar[num%10];    LedBuff[1] = LedChar[num/10%10];    LedBuff[2] = LedChar[num/100%10];    LedBuff[3] = LedChar[num/1000%10];    LedBuff[4] = LedChar[num/10000%10];    LedBuff[5] = LedChar[num/100000%10];    LedBuff[6] = LedChar[num/1000000%10];    LedBuff[7] = LedChar[num/10000000%10];}void InterruptTimer0()  interrupt 1        //定时器0触发的中断,扫描按键状态并消抖{    static uchar i = 0;    static uchar keybuf = 0xff;     //扫描缓冲区，用于存储最近8次扫描的按键状态值    TH0 = 0xF8;            //重新设置定时器0的初始值    TL0 = 0xCD;    keybuf = (keybuf &lt;&lt; 1) | KEY1;    if(keybuf == 0x00) {        //表明连续的8次检测按键状态均为按下状态，即16ms内按键状态均为按下状态，即可认为按键已经按下        KeySta = 0;    } else if(keybuf == 0xff) { //表明连续的8次检测按键状态均为弹起状态，即16ms内按键状态均为弹起状态，即可认为按键已经弹起        KeySta = 1;    } else{    }    P2 = LedWei[i];        //设置显示当前数码管需要展示的位置    P0 = LedBuff[i];        //设置当前数码管要展示的值    if(i == 7) {        i = 0;    } else {        i++;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机独立按键控制灯</title>
      <link href="/2019/10/04/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE%E6%8E%A7%E5%88%B6%E7%81%AF/"/>
      <url>/2019/10/04/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%8B%AC%E7%AB%8B%E6%8C%89%E9%94%AE%E6%8E%A7%E5%88%B6%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="0-开发环境"><a href="#0-开发环境" class="headerlink" title="0. 开发环境"></a>0. 开发环境</h4><blockquote><p>单片机: stc89c52</p><p>开发板: Hot51单片机增强版</p></blockquote><h4 id="2-电路图"><a href="#2-电路图" class="headerlink" title="2. 电路图"></a>2. 电路图</h4><p><img src="https://i.loli.net/2019/10/29/Txs79RKjLU2mutz.png" alt></p><p><img src="https://i.loli.net/2019/10/29/BbIrCGak9JsA46z.png" alt></p><h4 id="3-程序代码"><a href="#3-程序代码" class="headerlink" title="3. 程序代码"></a>3. 程序代码</h4><pre><code>#include&lt;reg52.h&gt;#define uchar unsigned char#define uint  unsigned intsbit KEY1 = P3^2;sbit KEY2 = P3^3;sbit KEY3 = P3^4;sbit LED1 = P0^0;sbit LED2 = P0^1;sbit LED3 = P0^2;void main(){    while(1){         LED1 = KEY1;  //按下时，对应的led点亮        LED2 = KEY2;        LED3 = KEY3;    }}</code></pre><h4 id="4-显示效果"><a href="#4-显示效果" class="headerlink" title="4. 显示效果"></a>4. 显示效果</h4><iframe src="//player.bilibili.com/player.html?aid=69989524&cid=121269608&page=1" width="100%" height="600" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>    ]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机点阵动画显示</title>
      <link href="/2019/10/03/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%82%B9%E9%98%B5%E5%8A%A8%E7%94%BB%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/10/03/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%82%B9%E9%98%B5%E5%8A%A8%E7%94%BB%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="0-开发环境"><a href="#0-开发环境" class="headerlink" title="0. 开发环境"></a>0. 开发环境</h4><blockquote><p>单片机: stc89c52</p><p>开发板: Hot51单片机增强版</p></blockquote><h4 id="1-程序代码"><a href="#1-程序代码" class="headerlink" title="1. 程序代码"></a>1. 程序代码</h4><pre><code>#include &lt;reg52.H&gt;#define uint unsigned int#define uchar unsigned char//多种图形动态显示uchar code tabP0[]= {    0x30,0x48,0x44,0x22,0x44,0x48,0x30,0x00,    0x00,0x3c,0x42,0x42,0x42,0x42,0x3c,0x00,    0x00,0x08,0x14,0x22,0x41,0x22,0x14,0x08,    0x00,0x41,0x22,0x14,0x08,0x14,0x22,0x41,    0x00,0x1e,0x12,0x12,0x7f,0x12,0x12,0x1e};uchar code tabP2[]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};uchar i = 0;uchar index = 0;uchar count = 0;//需要连接上J16这个跳线帽。这个代码在点阵上显示相应的图形。void main() {    EA = 1;                        //开总中断    TMOD = 0x01;        //设置定时器0为一个16位的定时器    TH0 = 0xFC;        //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0x66;        //设置每次定时1ms    ET0 = 1;                    //使能T0中断    TR0 = 1;            //开启定时器0    while(1);}void InterruptTimer0()  interrupt 1        //定时器0触发的中断{    TH0 = 0xFC;            //重新设置定时器0的初始值    TL0 = 0x66;    P0 = tabP0[i+index];    P2 = tabP2[i];    if(i &gt;= 7) {        i = 0;    } else {        i++;    }    //每隔200ms移动一下    count++;    if(count == 200) {        count = 0;        if(index &gt;= 40) {            index = 0;        } else {            index++;        }    }}</code></pre><h4 id="2-显示效果"><a href="#2-显示效果" class="headerlink" title="2. 显示效果"></a>2. 显示效果</h4><iframe src="//player.bilibili.com/player.html?aid=69930655&cid=121171373&page=1" width="100%" height="600" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">  </iframe>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机实现定时动态数码管</title>
      <link href="/2019/10/03/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%8A%A8%E6%80%81%E6%95%B0%E7%A0%81%E7%AE%A1/"/>
      <url>/2019/10/03/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%8A%A8%E6%80%81%E6%95%B0%E7%A0%81%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="0-开发环境"><a href="#0-开发环境" class="headerlink" title="0. 开发环境"></a>0. 开发环境</h4><blockquote><p>单片机: stc89c52</p><p>开发板: Hot51单片机增强版</p></blockquote><h4 id="1-电路图"><a href="#1-电路图" class="headerlink" title="1. 电路图"></a>1. 电路图</h4><p><img src="https://i.loli.net/2019/10/29/QcnVM5qNCx4LgXG.png" alt></p><p><img src="https://i.loli.net/2019/10/29/8fXdqDrSNHWb5TF.png" alt></p><h4 id="3-程序代码"><a href="#3-程序代码" class="headerlink" title="3. 程序代码"></a>3. 程序代码</h4><pre><code>#include&lt;Reg52.h&gt;#define uchar unsigned char#define uint unsigned intuchar code LedChar[]= {                                                                 //数码管字符编码数组    0x3F,  //&quot;0&quot;    0x06,  //&quot;1&quot;    0x5B,  //&quot;2&quot;    0x4F,  //&quot;3&quot;    0x66,  //&quot;4&quot;    0x6D,  //&quot;5&quot;    0x7D,  //&quot;6&quot;    0x07,  //&quot;7&quot;    0x7F,  //&quot;8&quot;    0x6F,  //&quot;9&quot;    0x77,  //&quot;A&quot;    0x7C,  //&quot;B&quot;    0x39,  //&quot;C&quot;    0x5E,  //&quot;D&quot;    0x79,  //&quot;E&quot;    0x71     // &quot;F&quot;};uchar code LedWei[] = {7,6,5,4,3,2,1,0 };                                                        //八位数码管的位置值uchar LedBuff[] = {0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F};    //八位数码管应该显示的值uint count = 0; //定义一个计数初值uchar i = 0;void main() {    uint sec = 0;   //定义当前应该显示字符的索引位置    EA = 1;    TMOD = 0x01;    //设置定时器0为一个16位的定时器    TH0 = 0xFC;        //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0x66;        //设置每次定时1ms    ET0 = 1;    TR0 = 1;            //开启定时器    while(1) {        if(count &gt;= 1000) {            count = 0;            sec++;            LedBuff[0] = LedChar[sec%10];        //计算当前八位数码管每个位置应该显示的值            LedBuff[1] = LedChar[sec/10%10];            LedBuff[2] = LedChar[sec/100%10];            LedBuff[3] = LedChar[sec/1000%10];            LedBuff[4] = LedChar[sec/10000%10];            LedBuff[5] = LedChar[sec/100000%10];            LedBuff[6] = LedChar[sec/1000000%10];            LedBuff[7] = LedChar[sec/10000000%10];        }    }}void InterruptTimer0()  interrupt 1        //定时器0触发的中断{    TH0 = 0xFC;            //重新设置定时器0的初始值    TL0 = 0x66;    P2 = LedWei[i];        //设置显示当前需要展示的位置    P0 = LedBuff[i];    //设置当前要展示的值    count++;    if(i == 7) {        i = 0;    } else {        i++;    }}</code></pre><h4 id="4-效果演示"><a href="#4-效果演示" class="headerlink" title="4. 效果演示"></a>4. 效果演示</h4><iframe src="//player.bilibili.com/player.html?aid=69886245&cid=121099021&page=1" width="100%" height="600" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机的点阵图形静态显示</title>
      <link href="/2019/10/03/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E7%82%B9%E9%98%B5%E5%9B%BE%E5%BD%A2%E9%9D%99%E6%80%81%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/10/03/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%9A%84%E7%82%B9%E9%98%B5%E5%9B%BE%E5%BD%A2%E9%9D%99%E6%80%81%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="0-开发环境"><a href="#0-开发环境" class="headerlink" title="0. 开发环境"></a>0. 开发环境</h4><blockquote><p>单片机: stc89c52</p><p>开发板: Hot51单片机增强版</p></blockquote><h4 id="1-程序代码"><a href="#1-程序代码" class="headerlink" title="1. 程序代码"></a>1. 程序代码</h4><pre><code>#include &lt;reg52.H&gt;#define uint unsigned int#define uchar unsigned char//心形显示uchar code tabP0[]= {0x30,0x48,0x44,0x22,0x44,0x48,0x30,0x00};uchar code tabP2[]= {0x7F,0xBF,0xDF,0xEF,0xF7,0xFB,0xFD,0xFE};//需要连接上J16这个跳线帽。这个代码在点阵上显示相应的图形。void main() {    EA = 1;                        //开总中断    TMOD = 0x01;        //设置定时器0为一个16位的定时器    TH0 = 0xFC;        //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0x66;        //设置每次定时1ms    ET0 = 1;                    //使能T0中断    TR0 = 1;            //开启定时器0    while(1);}void InterruptTimer0()  interrupt 1        //定时器0触发的中断{    static uchar i = 0;    TH0 = 0xFC;            //重新设置定时器0的初始值    TL0 = 0x66;    P0 = tabP0[i];    P2 = tabP2[i];    if(i&gt;=7) {        i = 0;    } else {        i++;    }}</code></pre><h4 id="2-显示效果"><a href="#2-显示效果" class="headerlink" title="2. 显示效果"></a>2. 显示效果</h4><p><img src="https://i.loli.net/2019/10/29/EFmH7iZDcTN3htI.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机定时静态显示数码管</title>
      <link href="/2019/10/01/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9A%E6%97%B6%E9%9D%99%E6%80%81%E6%98%BE%E7%A4%BA%E6%95%B0%E7%A0%81%E7%AE%A1/"/>
      <url>/2019/10/01/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9A%E6%97%B6%E9%9D%99%E6%80%81%E6%98%BE%E7%A4%BA%E6%95%B0%E7%A0%81%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="0-开发环境"><a href="#0-开发环境" class="headerlink" title="0. 开发环境"></a>0. 开发环境</h4><blockquote><p>单片机: stc89c52</p><p>开发板: 清翔单片机(QX-MCS51 V2.0)</p></blockquote><h4 id="1-数码管电路原理图"><a href="#1-数码管电路原理图" class="headerlink" title="1. 数码管电路原理图"></a>1. 数码管电路原理图</h4><p><img src="https://i.loli.net/2019/10/29/Qr1mnbWVgzjYhd3.png" alt></p><p><img src="https://i.loli.net/2019/10/29/z9ri8cJxKDM2gsP.png" alt></p><p><img src="https://i.loli.net/2019/10/29/VTJ52ql9e8obIKd.png" alt></p><h4 id="2-C代码"><a href="#2-C代码" class="headerlink" title="2. C代码"></a>2. C代码</h4><pre><code>#include&lt;Reg52.h&gt;#define uchar unsigned charsbit duan = P2^6;sbit wei = P2^7;uchar code LedChar[]= { //数码管字符编码数组    0x3F,  //&quot;0&quot;    0x06,  //&quot;1&quot;    0x5B,  //&quot;2&quot;    0x4F,  //&quot;3&quot;    0x66,  //&quot;4&quot;    0x6D,  //&quot;5&quot;    0x7D,  //&quot;6&quot;    0x07,  //&quot;7&quot;    0x7F,  //&quot;8&quot;    0x6F,  //&quot;9&quot;    0x77,  //&quot;A&quot;    0x7C,  //&quot;B&quot;    0x39,  //&quot;C&quot;    0x5E,  //&quot;D&quot;    0x79,  //&quot;E&quot;    0x71,  //&quot;F&quot;    0x76,  //&quot;H&quot;    0x38,  //&quot;L&quot;    0x37,  //&quot;n&quot;    0x3E,  //&quot;u&quot;    0x73,  //&quot;P&quot;    0x5C,  //&quot;o&quot;    0x40,  //&quot;-&quot;    0x00,  //熄灭    0x00  //自定义};void main() {    uchar count = 0; //定义一个计数初值    uchar sec = 0;   //定义当前应该显示字符的索引位置    wei = 1;                //选中数码管的位    P0 = 0x00;    wei = 0;    TMOD = 0x01;    //设置定时器0为一个16位的定时器    TH0 = 0x4c;        //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0x00;        //设置每次定时50ms    TR0 = 1;            //开启定时器    while(1) {        if(TF0 == 1) {            TF0 = 0;            TH0 = 0x4c;            TL0 = 0x00;            count++;        }        if(count &gt;= 20) {            count = 0;            P0 = 0xff;            sec++;            if(sec &gt;= 25) {                sec = 0;            }            duan = 1;            P0 = LedChar[sec];            duan = 0;        }    }}</code></pre><iframe src="//player.bilibili.com/player.html?aid=69633708&cid=120678735&page=1" width="100%" height="600" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">    </iframe> ]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机定时闪烁灯</title>
      <link href="/2019/10/01/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9A%E6%97%B6%E9%97%AA%E7%83%81%E7%81%AF/"/>
      <url>/2019/10/01/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AE%9A%E6%97%B6%E9%97%AA%E7%83%81%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="0-开发环境"><a href="#0-开发环境" class="headerlink" title="0. 开发环境"></a>0. 开发环境</h4><blockquote><p>单片机: stc89c52<br>开发板: 清翔单片机(QX-MCS51 V2.0)</p></blockquote><h4 id="1-定时器存储寄存器"><a href="#1-定时器存储寄存器" class="headerlink" title="1. 定时器存储寄存器"></a>1. 定时器存储寄存器</h4><blockquote><p>时钟周期：单片机时序中的最小单位，具体计算的方法就是时钟源分之一。</p></blockquote><blockquote><p>机器周期：我们的单片机完成一个操作的最短时间。</p></blockquote><blockquote><p>定时器：打开定时器后，定时器”存储寄存器”的值经过一个机器周期自动加1，也就是说，机器周期是定时器的计数周期</p></blockquote><p><img src="https://i.loli.net/2019/10/29/f4CWuqZrQzSUbTm.png" alt></p><p><img src="https://i.loli.net/2019/10/29/NFLPp4jk5XYtbe2.png" alt></p><p><img src="https://i.loli.net/2019/10/29/G4dpytS1WmaZewO.png" alt></p><p><img src="https://i.loli.net/2019/10/29/DCg3Z2XqbQPNHEx.png" alt></p><h4 id="2-使用定时器的方法"><a href="#2-使用定时器的方法" class="headerlink" title="2. 使用定时器的方法"></a>2. 使用定时器的方法</h4><pre><code>第一：设置特殊功能寄存器TMOD，配置好工作模式。第二：设置计数寄存器TH0和TL0的初值。第三：设置TCON，通过TR0置1来让定时器开始计数。第四：判断TCON寄存器的TF0位，监测定时器溢出情况</code></pre><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><pre><code>#include&lt;Reg52.h&gt;#define uchar unsigned charsbit LED = P1^0;//实现1s闪烁灯void main() {    uchar count = 0; //定义一个计数初值    TMOD = 0x01;        //设置定时器0为一个16位的定时器    TH0 = 0xB8;        //因为定时器分高八位和低八位，根据累加到溢出从而实现定时，因此需要给定时器0设置累加初值    TL0 = 0x00;        //1011 1000 0000 0000 等于十进制的134000 ,x*12/11059200 = 0.02 x=18432 设置初始值为65536-18432 = 47104 转为16进制就是B800    TR0 = 1;            //开启定时器    while(1) {        if(TF0 == 1) {            TF0 = 0;        //清除定时器0溢出            TH0 = 0xB8;    //重新设置定时器0的初始累加值            TL0 = 0x00;            count++;            if(count &gt;= 50) {                count = 0;                LED = ~LED;            }        }    }}   </code></pre><iframe src="//player.bilibili.com/player.html?aid=69633830&cid=120678978&page=1" width="100%" height="600" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>    ]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css精灵图使用</title>
      <link href="/2019/09/30/css%E7%B2%BE%E7%81%B5%E5%9B%BE%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/30/css%E7%B2%BE%E7%81%B5%E5%9B%BE%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-精灵技术的使用"><a href="#1-精灵技术的使用" class="headerlink" title="1. 精灵技术的使用"></a>1. 精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的<code>background-image</code>、<code>background-repeat</code>和<code>background-position</code>属性进行背景定位，其中最关键的是使用<code>background-position</code>属性精确地定位。</p><h3 id="2-制作精灵图"><a href="#2-制作精灵图" class="headerlink" title="2. 制作精灵图"></a>2. 制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。</span><br><span class="line">我们精灵图的宽度取决于最宽的那个背景。 </span><br><span class="line">我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。</span><br><span class="line">在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</span><br></pre></td></tr></table></figure><h3 id="3-以京东的精灵图为例"><a href="#3-以京东的精灵图为例" class="headerlink" title="3.以京东的精灵图为例"></a>3.以京东的精灵图为例</h3><p><img src="https://i.loli.net/2019/10/29/Kw6aJsR4xQg5eBi.png" alt></p><p>使用如下</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;style type=&quot;text/css&quot;&gt;    .mod_service_duo {        border:1px solid purple;        background-repeat: no-repeat;        background-image: url(./23f3ddf914b1b527d0429a3d713cfe3a.png);        background-position: 0 -192px;        width:36px;        height:42px;    }&lt;/style&gt;&lt;body&gt;    &lt;div class=&quot;mod_service_duo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>效果如图所示</p><p><img src="https://i.loli.net/2019/10/29/BVdERmPzlT5ZHix.png" alt></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><h5 id="使用精灵图的优点"><a href="#使用精灵图的优点" class="headerlink" title="使用精灵图的优点"></a>使用精灵图的优点</h5><p>对于浏览器来说请求多张小的图片和请求一张大的图片当然是后者的性能更好，大大减少了浏览器向服务器的请求次数，减少了http请求次数，这也是精灵图被广泛使用的主要原因。<br>使用精灵图可以减少图片的字节数，如果一张图片是4K，9张就是36K，而将所有图片整合在一张图片上之后，只需要4-5K就可以了。<br>在整理图片时，不需要纠结图片的取名问题，特别是在大型浏览器中，这种小的图片非常之多。将所有图片整合在一起，只需要取一个综合的名字就可以了，这样也可以大大提高工作效率。<br>如果想改变网站的风格，只需要改变一张图就可以了，便于后期的维护和修改。</p><h5 id="使用精灵图的缺点"><a href="#使用精灵图的缺点" class="headerlink" title="使用精灵图的缺点"></a>使用精灵图的缺点</h5><p>一定要考虑当前盒子的大小会不会漏出其他图片，一般情况来说还可以，但是如果网页时自适应的，那么可能就会比较麻烦了。<br>精灵图的创建比较麻烦，要计算好每个图片之间的距离和位置，如果做的不合理，那么使用时就会比较麻烦。<br>精灵图在后期维护上也带来了一定麻烦，因为所有的图片是在一张图片上，甚至位置都是相互影响的，所以一旦改变了一个，可能整张精灵图都需要重新做。</p><h3 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h3><p><a href="https://blog.csdn.net/W_mizi/article/details/83719653" target="_blank" rel="noopener">CSS精灵图</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机流水灯</title>
      <link href="/2019/09/27/51%E5%8D%95%E7%89%87%E6%9C%BA%E6%B5%81%E6%B0%B4%E7%81%AF/"/>
      <url>/2019/09/27/51%E5%8D%95%E7%89%87%E6%9C%BA%E6%B5%81%E6%B0%B4%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机运行流水灯"><a href="#51单片机运行流水灯" class="headerlink" title="51单片机运行流水灯"></a>51单片机运行流水灯</h1><blockquote><p>单片机: stc89c52</p><p>开发板: 清翔单片机(QX-MCS51 V2.0)</p></blockquote><h3 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h3><p><img src="https://i.loli.net/2019/10/29/Txs79RKjLU2mutz.png" alt></p><h3 id="流水灯-第一种方案"><a href="#流水灯-第一种方案" class="headerlink" title="流水灯(第一种方案)"></a>流水灯(第一种方案)</h3><pre><code>#include &lt;reg52.h&gt;#include &lt;intrins.h&gt;#define uint  unsigned int//定义延时方法void delay(uint z) {    uint x,y;    for(x = 0; x &lt;= 1000; x++) {        for(y = 0; y &lt;= z; y++);    }}//主函数void main(){    P1 = 0xfe;                                //初始化流水灯状态    while(1) {        delay(50);                    //执行延时        P1 = _crol_(P1,1);    //执行移位操作    }}</code></pre><h4 id="流水灯-第二种方案"><a href="#流水灯-第二种方案" class="headerlink" title="流水灯(第二种方案)"></a>流水灯(第二种方案)</h4><pre><code>#include &lt;reg52.h&gt;#define uint  unsigned int#define uchar unsigned char//定义延时方法void delay(uint z) {    uint x,y;    for(x = 0; x &lt;= 1000; x++) {        for(y = 0; y &lt;= z; y++);    }}//主函数void main(){    uchar cnt = 0;    while(1) {        P1 = ~(0x01 &lt;&lt; cnt);        delay(100);        cnt++;        if(cnt &gt;= 8) {            cnt = 0 ;        }    }}</code></pre><iframe src="//player.bilibili.com/player.html?aid=69192045&cid=119917274&page=1" width="100%" height="600" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>   ]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
          <category> 单片机 </category>
          
          <category> 51 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keil格式化项目代码</title>
      <link href="/2019/09/27/keil%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/09/27/keil%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候需要用到一个功能，就先会在网上找到对应的程序，但是百度直接拿来的程序通常不是很规范。想着keil5要是有一个自动格式化代码的功能就好啦，上网一查还真有！需要一些设置如下（keil4与keil5都适用）</p></blockquote><p>使用<code>AStyle</code>进行代码格式化</p><h4 id="1-Astyle-下载链接-：链接：https-share-weiyun-com-5FsV7Ob-密码：aqfkk3-下载并把软件解压"><a href="#1-Astyle-下载链接-：链接：https-share-weiyun-com-5FsV7Ob-密码：aqfkk3-下载并把软件解压" class="headerlink" title="1. Astyle 下载链接 ：链接：https://share.weiyun.com/5FsV7Ob 密码：aqfkk3 下载并把软件解压"></a>1. <code>Astyle</code> 下载链接 ：链接：<code>https://share.weiyun.com/5FsV7Ob</code> 密码：<code>aqfkk3</code> 下载并把软件解压</h4><h4 id="2-keil5单击Tools菜单—-gt-Customize-Tools-Menu"><a href="#2-keil5单击Tools菜单—-gt-Customize-Tools-Menu" class="headerlink" title="2. keil5单击Tools菜单—&gt;Customize Tools Menu"></a>2. <code>keil5</code>单击<code>Tools</code>菜单—&gt;<code>Customize Tools Menu</code></h4><p><img src="https://i.loli.net/2019/10/29/ifOeS7pPNHbaMQ6.png" alt="QQ截图20190927211321.png"></p><h4 id="3-添加Astyle-All-Files-和Astyle-Current-File自定义菜单-可以使用中文"><a href="#3-添加Astyle-All-Files-和Astyle-Current-File自定义菜单-可以使用中文" class="headerlink" title="3. 添加Astyle All Files 和Astyle Current File自定义菜单(可以使用中文)"></a>3. 添加<code>Astyle All Files</code> 和<code>Astyle Current File</code>自定义菜单(可以使用中文)</h4><h5 id="添加格式化当前文件菜单的方法："><a href="#添加格式化当前文件菜单的方法：" class="headerlink" title="添加格式化当前文件菜单的方法："></a>添加<code>格式化当前文件</code>菜单的方法：</h5><ol><li>新建命令为<code>格式化当前文件</code></li><li>添加<code>Command</code>命令：单击<code>...</code>按钮，选择<code>Astyle.exe</code>。</li><li>Arguments：<br><code>Astyle Current File</code>即<code>格式化当前文件</code>菜单填写  <code>!E</code></li><li>点击<code>OK</code></li></ol><p><img src="https://i.loli.net/2019/10/29/RUhA1VSWsMnE9NF.png" alt="QQ截图20190927211604.png"></p><h5 id="添加格式化project中的所有文件菜单的方法："><a href="#添加格式化project中的所有文件菜单的方法：" class="headerlink" title="添加格式化project中的所有文件菜单的方法："></a>添加<code>格式化project中的所有文件</code>菜单的方法：</h5><ol><li>新建命令为<code>格式化project中的所有文件</code></li><li>添加<code>Command</code>命令：单击<code>...</code>按钮，选择<code>Astyle.exe</code>。</li><li>Arguments：<br><code>Astyle All Files</code>即<code>格式化项目所有文件</code>菜单填写  <code>&quot;$E*.c&quot; &quot;$E*.h&quot;</code></li><li>点击<code>OK</code></li></ol><p><img src="https://i.loli.net/2019/10/29/UEeMSHmPgBCORzf.png" alt="QQ截图20190927211535.png"></p><blockquote><p>注：!E 表示的是当前获得焦点且正在编辑的文件。<br>    $E<em>.c和$E</em>.h代表当前获得焦点且正在编辑文件所在目录下所有.c和.h文件（参考keil uVision的帮助文档）<br>    使用的是Astyle默认格式来格式化文件，另外也可以自定义格式，自定义格式参考Astyle的帮助文档。默认格式化后，会备份原文件为源文件名.orig。如果不想让Astyle备份文件，可以使用-n参数。 如：-n !E （表示格式化当前文件，不备份）</p></blockquote><h4 id="在keil中的使用效果：生成的菜单出现在Tools的下拉菜单中，Astyle的运行结构出现在keil的Build-Output窗口中。"><a href="#在keil中的使用效果：生成的菜单出现在Tools的下拉菜单中，Astyle的运行结构出现在keil的Build-Output窗口中。" class="headerlink" title="在keil中的使用效果：生成的菜单出现在Tools的下拉菜单中，Astyle的运行结构出现在keil的Build Output窗口中。"></a>在<code>keil</code>中的使用效果：生成的菜单出现在<code>Tools</code>的下拉菜单中，<code>Astyle</code>的运行结构出现在<code>keil</code>的<code>Build Output</code>窗口中。</h4><p>格式化前 </p><p><img src="https://i.loli.net/2019/10/29/l1gXxd7fIaqShO2.png" alt="QQ截图20190927212350.png"></p><p>执行格式化命令</p><p><img src="https://i.loli.net/2019/10/29/3ASkOvXUrZ8b6ce.png" alt="QQ截图20190927212504.png"></p><p>格式化后  </p><p><img src="https://i.loli.net/2019/10/29/a1NdvDqp27K5eQl.png" alt="QQ截图20190927212409.png"></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决keil5中文注释乱码方法</title>
      <link href="/2019/09/27/%E8%A7%A3%E5%86%B3keil5%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E4%B9%B1%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/27/%E8%A7%A3%E5%86%B3keil5%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E4%B9%B1%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>菜单上面的<code>edit</code>–&gt;<code>Configuration</code>–&gt;<code>Editor</code>–&gt;<code>Encoding</code><br>选择<code>Chinese GB2312</code> 点击<code>OK</code>即可解决</p><p><img src="https://i.loli.net/2019/10/29/KbqwISemc8zP6yG.png" alt="QQ截图20190927204923.png"><br><img src="https://i.loli.net/2019/10/29/Ln7HVd4jxYDhErX.png" alt="QQ截图20190927204957.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u011784994/article/details/46126327" target="_blank" rel="noopener">解决keil和source insight中文注释乱码方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用before和after双伪元素清除浮动</title>
      <link href="/2019/09/24/%E4%BD%BF%E7%94%A8before%E5%92%8Cafter%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A0%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
      <url>/2019/09/24/%E4%BD%BF%E7%94%A8before%E5%92%8Cafter%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A0%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>使用方法：</p><pre><code>.clearfix:before,.clearfix:after {   content:&quot;.&quot;;  display:table;}.clearfix:after { clear:both;}.clearfix {  *zoom:1;}</code></pre><p>优点：  代码更简洁</p><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 小米、腾讯等</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 程序优化</title>
      <link href="/2019/09/24/Laravel-%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/"/>
      <url>/2019/09/24/Laravel-%E7%A8%8B%E5%BA%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载: <a href="https://learnku.com/docs/laravel-specification/5.5/laravel-optimization/527" target="_blank" rel="noopener">Laravel 程序优化</a></p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>作为优秀的开发者，在日常编码中，应积极培养书写高执行效率代码的意识。不过项目运行效率是一个系统性工程，不应该只停留在代码层面上，有时更应该考虑整个项目架构，包括项目中使用的软件等。</p><p>本文罗列了一些常见的优化项目，并且对其做了约束。</p><h2 id="1-配置信息缓存"><a href="#1-配置信息缓存" class="headerlink" title="1. 配置信息缓存"></a>1. 配置信息缓存</h2><p>生产环境中的 <strong>应该</strong> 使用『配置信息缓存』来加速 Laravel 配置信息的读取。</p><p>使用以下 Artisan 自带命令，把 <code>config</code> 文件夹里所有配置信息合并到一个文件里，减少运行时文件的载入数量：</p><pre><code>php artisan config:cache</code></pre><p>缓存文件存放在 <code>bootstrap/cache/</code> 文件夹中。</p><p>可以使用以下命令来取消配置信息缓存：</p><pre><code>php artisan config:clear</code></pre><p>注意：配置信息缓存不会随着更新而自动重载，所以，开发时候建议关闭配置信息缓存，一般在生产环境中使用。可以配合 <a href="https://learnku.com/docs/laravel/5.5/envoy" target="_blank" rel="noopener">Envoy 任务运行器</a> 使用，在每次上线代码时执行 <code>config:clear</code> 命令。</p><h2 id="2-路由缓存"><a href="#2-路由缓存" class="headerlink" title="2. 路由缓存"></a>2. 路由缓存</h2><p>生产环境中的 <strong>应该</strong> 使用『路由缓存』来加速 Laravel 的路由注册。</p><p>路由缓存可以有效的提高路由器的注册效率，在大型应用程序中效果越加明显，可以使用以下命令：</p><pre><code>php artisan route:cache</code></pre><p>缓存文件存放在 <code>bootstrap/cache/</code> 文件夹中。另外，路由缓存不支持路由匿名函数编写逻辑，详见：<a href="https://learnku.com/docs/laravel/5.5/controllers#route-caching" target="_blank" rel="noopener">文档 - 路由缓存</a>。</p><p>可以使用下面命令清除路由缓存：</p><pre><code>php artisan route:clear</code></pre><p>注意：路由缓存不会随着更新而自动重载，所以，开发时候建议关闭路由缓存，一般在生产环境中使用。可以配合 <a href="https://learnku.com/docs/laravel/5.5/envoy" target="_blank" rel="noopener">Envoy 任务运行器</a> 使用，在每次上线代码时执行 <code>route:clear</code> 命令。</p><h2 id="3-类映射加载优化"><a href="#3-类映射加载优化" class="headerlink" title="3. 类映射加载优化"></a>3. 类映射加载优化</h2><p><code>optimize</code> 命令把常用加载的类合并到一个文件里，通过减少文件的加载，来提高运行效率。生产环境中的 <strong>应该</strong> 使用 optimize 命令来优化类的加载速度：</p><pre><code>php artisan optimize --force</code></pre><p>以上命令会在 <code>bootstrap/cache/</code> 文件夹中生成缓存文件。你可以通过修改 <code>config/compile.php</code> 文件来添加要合并的类。在 <code>production</code> 环境中，参数 <code>--force</code> 不需要指定，文件就会自动生成。</p><p>要清除类映射加载优化，请运行以下命令：</p><pre><code>php artisan clear-compiled</code></pre><p>此命令会删除上面 <code>optimize</code> 生成的两个文件。</p><p>注意：此命令要运行在 <code>php artisan config:cache</code> 后，因为 <code>optimize</code> 命令是根据配置信息（如：<code>config/app.php</code> 文件的 <code>providers</code> 数组）来生成文件的。</p><h2 id="4-自动加载优化"><a href="#4-自动加载优化" class="headerlink" title="4. 自动加载优化"></a>4. 自动加载优化</h2><p>此命令不止针对于 Laravel 程序，适用于所有使用 <code>composer</code> 来构建的程序。此命令会把 <code>PSR-0</code> 和 <code>PSR-4</code> 转换为一个类映射表，来提高类的加载速度。</p><pre><code>composer dumpautoload -o</code></pre><blockquote><p>注意：<code>php artisan optimize --force</code> 命令里已经做了这个操作。</p></blockquote><h2 id="5-使用-Memcached-来存储会话"><a href="#5-使用-Memcached-来存储会话" class="headerlink" title="5. 使用 Memcached 来存储会话"></a>5. 使用 Memcached 来存储会话</h2><p>每一个 Laravel 的请求，都会产生会话，修改会话的存储方式能有效提高程序效率。会话的配置文件是 <code>config/session.php</code>。生产环境中的 <strong>必须</strong> 使用 Memcached 或者 Redis 等专业的缓存软件来存储会话，<strong>应该</strong> 优先选择 Memcached：</p><pre><code>&apos;driver&apos; =&gt; &apos;memcached&apos;,</code></pre><h2 id="6-使用专业缓存驱动器"><a href="#6-使用专业缓存驱动器" class="headerlink" title="6. 使用专业缓存驱动器"></a>6. 使用专业缓存驱动器</h2><p>「缓存」是提高应用程序运行效率的法宝之一，Laravel 默认缓存驱动是 <code>file</code> 文件缓存，生产环境中的 <strong>必须</strong> 使用专业的缓存系统，如 Redis 或者 Memcached。<strong>应该</strong> 优先考虑 Redis。<strong>应该</strong> 避免使用数据库缓存。</p><pre><code>&apos;default&apos; =&gt; &apos;redis&apos;,</code></pre><h2 id="7-数据库请求优化"><a href="#7-数据库请求优化" class="headerlink" title="7. 数据库请求优化"></a>7. 数据库请求优化</h2><p>关联模型数据读取时 <strong>必须</strong> 使用 <a href="http://learnku.com/docs/laravel/5.5/eloquent-relationships#延迟预加载" target="_blank" rel="noopener">延迟预加载</a> 和 <a href="http://learnku.com/docs/laravel/5.5/eloquent-relationships#预加载" target="_blank" rel="noopener">预加载</a> 。</p><p>临近上线时 <strong>必须</strong> 使用 <a href="https://github.com/barryvdh/laravel-debugbar" target="_blank" rel="noopener">Laravel Debugbar</a> 或者 <a href="https://learnku.com/laravel/t/23" target="_blank" rel="noopener">Clockwork</a> 留意每一个页面的总 SQL 请求条数，进行数据库请求调优。</p><h2 id="8-为数据集书写缓存逻辑"><a href="#8-为数据集书写缓存逻辑" class="headerlink" title="8. 为数据集书写缓存逻辑"></a>8. 为数据集书写缓存逻辑</h2><p><strong>应该</strong> 合理的使用 Laravel 提供的缓存层操作，把从数据库里面拿出来的数据集合进行缓存，减少数据库的压力，运行在内存上的专业缓存软件对数据的读取也远远快于数据库。</p><pre><code>$hot_posts = Cache::remember(&apos;posts.hot_posts&apos;, $minutes = 30, function(){    return Post::getHotPosts();});</code></pre><p><code>remember</code> 甚至连数据关联模型也都一并缓存了，多么方便呀。</p><h2 id="9-使用即时编译器"><a href="#9-使用即时编译器" class="headerlink" title="9. 使用即时编译器"></a>9. 使用即时编译器</h2><p><strong>可以</strong> 使用 OpCache 进行优化。OpCache 都能轻轻松松的让你的应用程序在不用做任何修改的情况下，直接提高 50% 或者更高的性能，PHPhub 之前做过一个实验，具体请见：<a href="https://learnku.com/laravel/t/301" target="_blank" rel="noopener">使用 OpCache 提升 PHP 5.5+ 程序性能</a>。 </p><h2 id="10-前端资源合并"><a href="#10-前端资源合并" class="headerlink" title="10. 前端资源合并"></a>10. 前端资源合并</h2><p>作为优化的标准：</p><ul><li>一个页面 <strong>应该</strong> 只加载一个 CSS 文件；</li><li>一个页面 <strong>应该</strong> 只加载一个 JS 文件。</li></ul><p>另外，为了文件要能方便走 CDN，需要文件名 <strong>应该</strong> 随着修改而变化。</p><p>Laravel Elixir 提供了一套简便实用的方案，详细请见文档：<a href="https://laravel.com/docs/5.7/elixir" target="_blank" rel="noopener">Laravel Elixir 文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel5.8自定义函数存放位置</title>
      <link href="/2019/09/23/Laravel5-8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE/"/>
      <url>/2019/09/23/Laravel5-8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建文件-app-helpers-php"><a href="#1-创建文件-app-helpers-php" class="headerlink" title="1. 创建文件 app/helpers.php"></a>1. 创建文件 app/helpers.php</h4><pre><code>&lt;?php// 示例函数function foo() {    return &quot;foo&quot;;}</code></pre><h4 id="2-修改项目-composer-json"><a href="#2-修改项目-composer-json" class="headerlink" title="2. 修改项目 composer.json"></a>2. 修改项目 <code>composer.json</code></h4><p>在项目 <code>composer.json</code> 中 <code>autoload</code> 部分里的 <code>files</code> 字段加入该文件即可：</p><pre><code>{    ...    &quot;autoload&quot;: {        &quot;files&quot;: [            &quot;app/helpers.php&quot;        ]    }    ...}</code></pre><h4 id="3-然后运行"><a href="#3-然后运行" class="headerlink" title="3. 然后运行:"></a>3. 然后运行:</h4><pre><code>$ composer dump-autoload</code></pre><p>OK，然后你就可以在任何地方用到 <code>app/helpers.php</code> 中的函数了。</p><h4 id="4-转载"><a href="#4-转载" class="headerlink" title="4. 转载"></a>4. 转载</h4><p><a href="https://learnku.com/laravel/wikis/15903" target="_blank" rel="noopener"> Laravel 目录结构：自定义函数的存放位置</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git删除远程.idea目录</title>
      <link href="/2019/09/23/git%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B-idea%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/09/23/git%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B-idea%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>软件:git bash<br>已经配置ssh连接github </p></blockquote><h4 id="1-进入项目根目录"><a href="#1-进入项目根目录" class="headerlink" title="1. 进入项目根目录"></a>1. 进入项目根目录</h4><pre><code>$ cd /c/users/john/blog/</code></pre><h4 id="2-删除缓存区-idea（保留工作区-idea）"><a href="#2-删除缓存区-idea（保留工作区-idea）" class="headerlink" title="2. 删除缓存区.idea（保留工作区.idea）"></a>2. 删除缓存区<code>.idea</code>（保留工作区<code>.idea</code>）</h4><pre><code>$ git rm --cached -r .idea</code></pre><h4 id="3-提交-gitiginore文件，将-idea从源代码仓库中删除（-m-表示注解）"><a href="#3-提交-gitiginore文件，将-idea从源代码仓库中删除（-m-表示注解）" class="headerlink" title="3. 提交.gitiginore文件，将.idea从源代码仓库中删除（-m 表示注解）"></a>3. 提交<code>.gitiginore</code>文件，将<code>.idea</code>从源代码仓库中删除（-m 表示注解）</h4><pre><code>$ git commit -m &quot;commit and remove .idea&quot;</code></pre><h4 id="4-推送到远程端"><a href="#4-推送到远程端" class="headerlink" title="4. 推送到远程端"></a>4. 推送到远程端</h4><pre><code>$ git push </code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出框的简易封装和使用</title>
      <link href="/2019/09/20/layer%E5%BC%B9%E5%87%BA%E6%A1%86%E7%9A%84%E7%AE%80%E6%98%93%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/20/layer%E5%BC%B9%E5%87%BA%E6%A1%86%E7%9A%84%E7%AE%80%E6%98%93%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-封装layer"><a href="#1-封装layer" class="headerlink" title="1. 封装layer"></a>1. 封装<code>layer</code></h4><p>下载<code>layer</code>绿色版和<code>jquery</code>引入页面</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;...&lt;script src=&quot;/Public/js/jquery.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/Public/js/dialog/layer.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/Public/js/dialog.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-封装dialog-js"><a href="#2-封装dialog-js" class="headerlink" title="2. 封装dialog.js"></a>2. 封装<code>dialog.js</code></h4><pre><code>var dialog = {    // 错误弹出层    error: function(message) {        layer.open({            content:message,            icon:2,            title : &apos;错误提示&apos;,        });    },    //成功弹出层    success : function(message,url) {        layer.open({            content : message,            icon : 1,            yes : function(){                location.href=url;            },        });    },    // 确认弹出层    confirm : function(message, url) {        layer.open({            content : message,            icon:3,            btn : [&apos;是&apos;,&apos;否&apos;],            yes : function(){                location.href=url;            },        });    },    //无需跳转到指定页面的确认弹出层    toconfirm : function(message) {        layer.open({            content : message,            icon:3,            btn : [&apos;确定&apos;],        });    },}</code></pre><p>使用的时候在<code>js</code>中直接<code>dialog.error(&quot;提示信息&quot;)</code>即可实现<code>layer</code>的效果</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 弹出框 </tag>
            
            <tag> layer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云免费申请https证书</title>
      <link href="/2019/09/20/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%85%8D%E8%B4%B9%E7%94%B3%E8%AF%B7https%E8%AF%81%E4%B9%A6/"/>
      <url>/2019/09/20/%E8%85%BE%E8%AE%AF%E4%BA%91%E5%85%8D%E8%B4%B9%E7%94%B3%E8%AF%B7https%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先有一台腾讯云服务器以及一个腾讯云已备案的域名</p></blockquote><h4 id="1-打开https-cloud-tencent-com-product-ssl"><a href="#1-打开https-cloud-tencent-com-product-ssl" class="headerlink" title="1. 打开https://cloud.tencent.com/product/ssl"></a>1. 打开<code>https://cloud.tencent.com/product/ssl</code></h4><h4 id="2-点击立即购买"><a href="#2-点击立即购买" class="headerlink" title="2. 点击立即购买"></a>2. 点击立即购买</h4><p><img src="https://i.loli.net/2019/10/29/523jiWvxGfhSQ6o.png" alt="20190920123826.png"></p><h4 id="3-点击免费快速申请"><a href="#3-点击免费快速申请" class="headerlink" title="3. 点击免费快速申请"></a>3. 点击免费快速申请</h4><p><img src="https://i.loli.net/2019/10/29/ywKNBRvDuMqUGh5.png" alt="20190920124016.png"></p><h4 id="4-根据提示填写-私钥密码可以不填-，点击下一步"><a href="#4-根据提示填写-私钥密码可以不填-，点击下一步" class="headerlink" title="4. 根据提示填写(私钥密码可以不填)，点击下一步"></a>4. 根据提示填写(私钥密码可以不填)，点击下一步</h4><p><img src="https://i.loli.net/2019/10/29/RmWADFQ6Cy5eN4T.png" alt="20190920124057.png"></p><h4 id="5-点击确认申请"><a href="#5-点击确认申请" class="headerlink" title="5. 点击确认申请"></a>5. 点击确认申请</h4><p>基本上<code>Https</code>的证书申请流程差不多走完了，这时候只要审核通过即可</p><h4 id="6-配置https证书"><a href="#6-配置https证书" class="headerlink" title="6. 配置https证书"></a>6. 配置https证书</h4><p>将<code>https</code>证书下载下来，默认是一个<code>zip</code>包，解压打开后有</p><p><img src="https://i.loli.net/2019/10/29/u4Mq6S85h2AFdmn.png" alt="20190920124202.png"></p><h4 id="7-根据自己的服务器选择对应的证书-我这里用的是nginx-将证书两个上传到对应的腾讯云服务器-要给予证书执行权限"><a href="#7-根据自己的服务器选择对应的证书-我这里用的是nginx-将证书两个上传到对应的腾讯云服务器-要给予证书执行权限" class="headerlink" title="7. 根据自己的服务器选择对应的证书,我这里用的是nginx,将证书两个上传到对应的腾讯云服务器,要给予证书执行权限"></a>7. 根据自己的服务器选择对应的证书,我这里用的是<code>nginx</code>,将证书两个上传到对应的腾讯云服务器,要给予证书执行权限</h4><p><img src="https://i.loli.net/2019/10/29/pumPRvh8DENoAIF.png" alt="20190920124228.png"></p><h4 id="8-在nginx的配置文件中添加https的配置"><a href="#8-在nginx的配置文件中添加https的配置" class="headerlink" title="8. 在nginx的配置文件中添加https的配置"></a>8. 在<code>nginx</code>的配置文件中添加<code>https</code>的配置</h4><pre><code>cd /etc/nginx/conf.dvim 443.conf</code></pre><p>填入如下配置</p><pre><code>server {    listen       443;    server_name  127.0.0.1;    ssl on;    ssl_certificate /etc/nginx/ssl/server.crt;    ssl_certificate_key /etc/nginx/ssl/server.key;    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;            ssl_prefer_server_ciphers on;    ssl_verify_depth 2;    root /opt/sites ;    location / {        index  index.html index.htm;    }    location = /50x.html {        root   /usr/share/nginx/html;    }    location ~ \.php$ {        fastcgi_pass   127.0.0.1:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        include        fastcgi_params;    }}</code></pre><p>保存退出</p><h4 id="9-重启nginx"><a href="#9-重启nginx" class="headerlink" title="9. 重启nginx"></a>9. 重启nginx</h4><pre><code>nginx -s reload</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装最新稳定版nginx</title>
      <link href="/2019/09/20/centos7%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%A8%B3%E5%AE%9A%E7%89%88nginx/"/>
      <url>/2019/09/20/centos7%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%A8%B3%E5%AE%9A%E7%89%88nginx/</url>
      
        <content type="html"><![CDATA[<p>开始安装<br>yum 安装 nginx</p><h4 id="yum安装nginx文档地址"><a href="#yum安装nginx文档地址" class="headerlink" title="yum安装nginx文档地址"></a>yum安装nginx文档地址</h4><pre><code># 一切以最新的文档页面为准--搜centoshttp://nginx.org/en/linux_packages.html</code></pre><h4 id="安装基础软件"><a href="#安装基础软件" class="headerlink" title="安装基础软件"></a>安装基础软件</h4><pre><code>yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automakeyum -y install wget httpd-tools vim</code></pre><h4 id="配置nginx的repo"><a href="#配置nginx的repo" class="headerlink" title="配置nginx的repo"></a>配置<code>nginx</code>的<code>repo</code></h4><pre><code>cd /etc/yum.repos.dvim nginx.repo</code></pre><p>编辑<code>nginx.repo</code></p><pre><code>[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/7/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.key[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.key</code></pre><p>重新生成<code>Yum</code>缓存</p><pre><code>yum clean allyum makecache</code></pre><p>查看<code>nginx</code>是否可以找到</p><pre><code>yum list | grep nginx</code></pre><p>安装<code>nginx</code></p><pre><code>yum install -y nginx</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpstorm配合xdebug进行本地调试代码</title>
      <link href="/2019/09/20/phpstorm%E9%85%8D%E5%90%88xdebug%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/09/20/phpstorm%E9%85%8D%E5%90%88xdebug%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔者在使用的环境是<code>wamp3.1.6</code>和<code>phpstorm2018</code> ，<code>php</code>选择的环境是<code>php7.2</code></p></blockquote><h4 id="1-在php-ini中添加xdebug的配置信息"><a href="#1-在php-ini中添加xdebug的配置信息" class="headerlink" title="1. 在php.ini中添加xdebug的配置信息"></a>1. 在<code>php.ini</code>中添加<code>xdebug</code>的配置信息</h4><p>首先建议是先找对<code>php.ini</code>的位置,可以在<code>phpinfo()</code>方法中找到<code>php.ini</code>文件的位置</p><p><img src="https://i.loli.net/2019/10/29/LNVHcO8fKnDxu1l.png" alt="img、1580998-20190312105534466-205518377.png"></p><p>用编辑器打开<code>php.ini</code>在末尾追加关于<code>xdebug</code>的配置</p><pre><code>[XDebug]xdebug.profiler_output_dir=&quot;D:\Log\xdebug&quot;xdebug.trace_output_dir=&quot;D:\Log\xdebug&quot;xdebug.remote_log=&quot;D:/Log/xdebug.log&quot;zend_extension=&quot;C:/wamp64/bin/php/php7.2.10/zend_ext/php_xdebug-2.6.1-7.2-vc15-x86_64.dll&quot;;允许收集传递给函数的参数变量xdebug.collect_params=on;允许收集函数调用的返回值xdebug.collect_return=on;启用代码自动跟踪xdebug.auto_trace=on;性能优化，本文用不到，选择关闭（不关闭，会以约每分钟几百M的速度产生大量日志文件，用不上一天你的硬盘就哭了）xdebug.profiler_enable = Off ;关掉性能检测分析;指定性能分析信息文件的名称xdebug.profiler_output_name = cachegrind.out.%t.%p;远程端口，指phpstorm配置的端口xdebug.remote_port=9001;指定远程调试的处理协议xdebug.remote_handler = &quot;dbgp&quot;;是否允许远程终端，这个必须开启xdebug.remote_enable = on;远程IP地址，就算你phpstorm所在的IP。如果你是在本地的话直接写127.0.0.1就可以了xdebug.remote_host=127.0.0.1xdebug.idekey = PHPSTORM ;这里是调试器的关键字xdebug.remote_autostart=1xdebug.remote_mode=req</code></pre><p>重启<code>wamp</code>查看配置是否生效</p><p><img src="https://i.loli.net/2019/10/29/LNVHcO8fKnDxu1l.png" alt="img、1580998-20190312105534466-205518377.png"></p><h4 id="2-在谷歌浏览器中添加xdebug插件"><a href="#2-在谷歌浏览器中添加xdebug插件" class="headerlink" title="2. 在谷歌浏览器中添加xdebug插件"></a>2. 在谷歌浏览器中添加<code>xdebug</code>插件</h4><p><img src="https://i.loli.net/2019/10/29/K2l4mNbFM5BonYI.png" alt="img、03.png"></p><p>添加完后的效果如图所示，在插件栏中多了一个小甲虫</p><p><img src="https://i.loli.net/2019/10/29/X3dnkbPAIZDRqj4.png" alt="img、1580998-20190312110407321-1371532303.png"></p><p>这时右击小甲虫点击选项，选择<code>phpstorm</code> 点击<code>save</code></p><p><img src="https://i.loli.net/2019/10/29/SNWRsEcBLv4JhH3.png" alt="img、1580998-20190312110552171-855056154.png"></p><h4 id="3-配置phpstorm"><a href="#3-配置phpstorm" class="headerlink" title="3. 配置phpstorm"></a>3. 配置<code>phpstorm</code></h4><p>配置本地执行<code>php.exe</code>的位置和检查<code>php</code>语法的版本</p><p>配置<code>Debug</code> ：<code>Languages &amp; Frameworks</code> -&gt; <code>PHP</code> -&gt; <code>Debug</code>，只需要把端口改为<code>9001</code>，和<code>xdebug</code>的配置保持一致</p><p><img src="https://i.loli.net/2019/10/29/9LMrI1zjXHqAx4d.png" alt="img、1580998-20190312111325527-1992846745.png"></p><p>.配置<code>Server</code>（就在Debug下面一个） ：<code>Languages &amp; Frameworks</code> -&gt; <code>PHP</code> -&gt; <code>Servers</code>，新建一台本地服务器（绿色加号），填写服务器名字以及<code>host</code>，确认<code>debugger</code>是<code>xdebug</code></p><p><img src="https://i.loli.net/2019/10/29/n1yteCR4SVaXcBf.png" alt="img、1580998-20190312112042013-289121517.png"></p><p>启动<code>xdebug helper</code>：点击<code>xdebug helper</code>图标，选择<code>Debug</code>项，灰色图标变成绿色</p><p><img src="https://i.loli.net/2019/10/29/yKG6nELFwfRmVOr.png" alt="img、1580998-20190312112258403-1783506273.png"></p><p>在<code>phpstorm</code>中将需要调试的代码打上断点，点击右上角电话图标开启调试监听，由一头绿一头红变成两头绿即可</p><p><img src="https://i.loli.net/2019/10/29/bU7kSRq1flCg6Av.png" alt="img、1580998-20190312112351263-1881895127.png"></p><h4 id="4-开始debug"><a href="#4-开始debug" class="headerlink" title="4. 开始debug"></a>4. 开始<code>debug</code></h4><p>在谷歌浏览器中输入配置好的<code>Url</code>,会出现如下图所示，恭喜你<code>phpstorm</code>和<code>xdebug</code>的配置基本完成,这时候就可以愉快的进行调试了</p><p><img src="https://i.loli.net/2019/10/29/DGg3os8x5MVlTX9.png" alt="img、1580998-20190312112749516-731577817.png"></p><h4 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5. 参考文章"></a>5. 参考文章</h4><p><a href="https://segmentfault.com/a/1190000010098789" target="_blank" rel="noopener">phpStorm+xdebug断点调试环境配置最简实践</a></p><p><a href="https://segmentfault.com/a/1190000014942730" target="_blank" rel="noopener">如何愉快的在PhpStorm中进行Xdebug断点调试？</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> phpstorm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> phpstorm </tag>
            
            <tag> xdebuge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置二级虚拟目录访问 Laravel 重写</title>
      <link href="/2019/09/20/Nginx-%E9%85%8D%E7%BD%AE%E4%BA%8C%E7%BA%A7%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE-Laravel-%E9%87%8D%E5%86%99/"/>
      <url>/2019/09/20/Nginx-%E9%85%8D%E7%BD%AE%E4%BA%8C%E7%BA%A7%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE-Laravel-%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<pre><code>server {    listen          80;    server_name    _;    root            /opt/sites;    index           index.php index.html index.htm;    etag on;    gzip on;    gzip_vary on;    gzip_http_version 1.0;    gzip_min_length 1k;    gzip_buffers 4 16k;    gzip_comp_level 2;    gzip_disable msie6;    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/xml+rss;    client_max_body_size 110m;    client_body_buffer_size 1024k;    keepalive_timeout   60;    sendfile on;    sendfile_max_chunk 512k;    tcp_nopush on;    tcp_nodelay on;# 此处配置二级目录站点   location  /son{        alias   /opt/sites/cms/public;        index index.html index.php;        try_files $uri $uri/ /index.php?$query_string;        location ~ \.php$ {                if (!-f $request_filename) {                        return 404;                }                fastcgi_pass        unix:/tmp/php-fpm-72.sock;                fastcgi_index       index.php;                fastcgi_param       SCRIPT_FILENAME $request_filename;                include             fastcgi_params;        }    }  #此处是根目录下配置laravel站点    location / {        try_files $uri $uri/ /index.php?$query_string;    }    location ~ \.php$ {        fastcgi_pass        unix:/tmp/php-fpm-72.sock;        fastcgi_index       index.php;        fastcgi_param       SCRIPT_FILENAME $document_root$fastcgi_script_name;        include             fastcgi_params;    }    location = /robots.txt  { access_log off; log_not_found off; }    location = /favicon.ico { access_log off; log_not_found off; }}</code></pre><p>这次遇到的问题是在访问<code>http://localhost/son</code>访问不了<code>index.php</code>，而<code>index.html</code>可以访问。在参考了<code>https://laravel-china.org/articles/14235/nginx-configuring-two-level-virtual-directory-access-laravel-rewrite</code>解决.</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装docker-ce</title>
      <link href="/2019/09/20/centos7%E5%AE%89%E8%A3%85docker-ce/"/>
      <url>/2019/09/20/centos7%E5%AE%89%E8%A3%85docker-ce/</url>
      
        <content type="html"><![CDATA[<p>给<code>docker</code>配置国内的镜像源地址</p><h4 id="1-进入repos目录"><a href="#1-进入repos目录" class="headerlink" title="1. 进入repos目录"></a>1. 进入<code>repos</code>目录</h4><pre><code>cd /etc/yum.repos.d/</code></pre><h4 id="2-获取清华大学的docker镜像repo"><a href="#2-获取清华大学的docker镜像repo" class="headerlink" title="2. 获取清华大学的docker镜像repo"></a>2. 获取清华大学的<code>docker</code>镜像<code>repo</code></h4><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</code></pre><h4 id="3-修改docker-ce-repo改为清华docker镜像地址"><a href="#3-修改docker-ce-repo改为清华docker镜像地址" class="headerlink" title="3. 修改docker-ce.repo改为清华docker镜像地址"></a>3. 修改<code>docker-ce.repo</code>改为清华<code>docker</code>镜像地址</h4><pre><code>vim docker-ce.repo</code></pre><h4 id="4-下面是使用vim执行批量替换-这是清华的docker-的centos7稳定版的镜像地址https-mirrors-tuna-tsinghua-edu-cn-docker-ce-linux-centos-7-x86-64-stable-Packages"><a href="#4-下面是使用vim执行批量替换-这是清华的docker-的centos7稳定版的镜像地址https-mirrors-tuna-tsinghua-edu-cn-docker-ce-linux-centos-7-x86-64-stable-Packages" class="headerlink" title="4.下面是使用vim执行批量替换(这是清华的docker 的centos7稳定版的镜像地址https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/7/x86_64/stable/Packages/)"></a>4.下面是使用<code>vim</code>执行批量替换(这是清华的<code>docker</code> 的<code>centos7</code>稳定版的镜像地址<code>https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/7/x86_64/stable/Packages/</code>)</h4><pre><code>:%s@https://download.docker.com/@https://mirrors.tuna.tsinghua.edu.cn/docker-ce/</code></pre><p> 保存 退出</p><h4 id="5-安装docker"><a href="#5-安装docker" class="headerlink" title="5. 安装docker"></a>5. 安装<code>docker</code></h4><pre><code>yum install docker-ce# 一直选y docker-ce安装结束</code></pre><h4 id="6-编辑docker-ce的配置文件"><a href="#6-编辑docker-ce的配置文件" class="headerlink" title="6. 编辑docker-ce的配置文件"></a>6. 编辑<code>docker-ce</code>的配置文件</h4><pre><code>vim /etc/docker/daemon.json</code></pre><h4 id="7-docker镜像加速"><a href="#7-docker镜像加速" class="headerlink" title="7. docker镜像加速"></a>7. docker镜像加速</h4><pre><code>docker cn阿里云加速器中国科技大学</code></pre><p>在<code>daemon.json</code>中写入如下<code>json</code>,保存退出</p><pre><code>{    &quot;registry-mirrors&quot; : [&quot;https://registry.docker-cn.com&quot;]}</code></pre><p>启动<code>docker</code>并设置开机自启</p><pre><code>systemctl enable docker &amp;&amp; systemctl start docker</code></pre><p>用<code>docker info</code>查看是否配置成功</p><h5 id="centos7-docker命令"><a href="#centos7-docker命令" class="headerlink" title="centos7 docker命令"></a><code>centos7</code> <code>docker</code>命令</h5><pre><code># 启动dockersystemctl start docker.service# 查看docker 版本docker version# 查看docker更详细的信息docker info# 查看当前docker 镜像docker image lsdocker images# 搜索镜像docker search 镜像名# 拉取nginx指定tag的镜像docker image pull nginx:1.14-alpine# 列出docker所有容器进程docker psdocker container ls# 创建一个有交互且命名的容器docker run --name b1 -it busybox:latest# 创建一个在后台运行的容器docker run --name web1 -d nginx:1.14-alpine# 查看容器的信息docker inspect 容器名称# 启动一个带交互模式的容器docker start -it -a 容器名# 杀掉一个容器docker kill 容器名# 查看docker进程(包含杀死的)docker ps -a# 删除容器docker rm 容器名# 删除镜像docker rmi 镜像名:标签# 在指定的容器中执行命令(适合后台运行的容器)docker exec 容器名 执行命令docker exec -it redis1 /bin/sh# 查看容器的日志docker contanier logs 容器名docker container logs redis1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homestead安装swoole扩展</title>
      <link href="/2019/09/20/homestead%E5%AE%89%E8%A3%85swoole%E6%89%A9%E5%B1%95/"/>
      <url>/2019/09/20/homestead%E5%AE%89%E8%A3%85swoole%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<p>配置好<code>ubuntu</code>的国内镜像源并更新<br>查看<code>php</code>版本，并安装对应<code>php</code>版本的<code>dev</code></p><pre><code>sudo apt install php7.2-dev</code></pre><p>配置<code>pecl</code></p><pre><code>sudo pecl channel-update pecl.php.netsudo pear clear-cachesudo pear update-channelssudo pear upgrade</code></pre><p>安装<code>php</code>的<code>swoole</code>扩展</p><pre><code>sudo pecl install swoole</code></pre><p>在<code>php.ini</code>中增加<code>extension=swoole.so</code></p><pre><code>php -i | grep php.ini</code></pre><hr><pre><code>vim /etc/php/7.2/cli/php.ini</code></pre><hr><pre><code># 在php.ini的尾部增加如下代码extension=swoole.so</code></pre><p>重启<code>php</code></p><pre><code>sudo service php7.2-fpm restart</code></pre><p>查看<code>php</code>是否成功安装<code>swoole</code>模块</p><pre><code>php -m | grep swoole</code></pre><p>补充</p><pre><code>默认数据库账号密码账号： homestead 密码：secret默认 ssh 账号密码账号：vagrant 密码：vagrant创建默认 root 用户sudo passwd root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> ubuntu </tag>
            
            <tag> swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 18.04修改默认源为国内源</title>
      <link href="/2019/09/20/Ubuntu-18-04%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%BA%90%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/"/>
      <url>/2019/09/20/Ubuntu-18-04%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E6%BA%90%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>安装Ubuntu 18.04后，使用国外源太慢了，修改为国内源会快很多。</p><p>修改阿里源为Ubuntu 18.04默认的源</p><p>备份<code>/etc/apt/sources.list</code></p><p>备份</p><pre><code>cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></pre><p>在<code>/etc/apt/sources.list</code>文件前面添加如下条目</p><p>添加阿里源</p><pre><code>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</code></pre><p>最后执行如下命令更新源</p><p>更新</p><pre><code>sudo apt-get updatesudo apt-get upgrade</code></pre><p>另外其他几个国内源如下：</p><h4 id="中科大源"><a href="#中科大源" class="headerlink" title="中科大源"></a>中科大源</h4><pre><code>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><h4 id="163源"><a href="#163源" class="headerlink" title="163源"></a>163源</h4><pre><code>deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</code></pre><h4 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h4><pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>homestead修改php版本</title>
      <link href="/2019/09/20/homestead%E4%BF%AE%E6%94%B9php%E7%89%88%E6%9C%AC/"/>
      <url>/2019/09/20/homestead%E4%BF%AE%E6%94%B9php%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>登录后</p><p>如果之前没有设置过<code>root</code>密码</p><pre><code>sudo passwd root</code></pre><p>以<code>root</code> 权限执行如下命令，选择对应<code>php</code>版本</p><pre><code># 查看所有 php 版本和当前版本update-alternatives --display php # 执行后，会列出当前 php 所有版本和编号，输入编号，切换到执行的版本update-alternatives --config php </code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> php </category>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> ubuntu </tag>
            
            <tag> homestead </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm搭建kubernetes集群</title>
      <link href="/2019/09/19/centos7%E4%BD%BF%E7%94%A8kubeadm%E6%90%AD%E5%BB%BAkubernetes%E9%9B%86%E7%BE%A4/"/>
      <url>/2019/09/19/centos7%E4%BD%BF%E7%94%A8kubeadm%E6%90%AD%E5%BB%BAkubernetes%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、本地实验环境准备"><a href="#一、本地实验环境准备" class="headerlink" title="一、本地实验环境准备"></a>一、本地实验环境准备</h2><ol><li>服务器虚拟机准备</li></ol><table><thead><tr><th align="center">IP</th><th align="center">CPU</th><th align="center">内存</th><th align="center">hostname</th></tr></thead><tbody><tr><td align="center">192.168.222.129</td><td align="center">&gt;=2c</td><td align="center">&gt;=2G</td><td align="center">master</td></tr><tr><td align="center">192.168.222.130</td><td align="center">&gt;=2c</td><td align="center">&gt;=2G</td><td align="center">node1</td></tr><tr><td align="center">192.168.222.131</td><td align="center">&gt;=2c</td><td align="center">&gt;=2G</td><td align="center">node2</td></tr></tbody></table><p>本实验我这里用的虚拟机是<code>vmware workstation</code>创建的，我的机器配置较低，所以<code>master</code>给了4G 4C，<code>node</code>每个给了4G 4C，大家根据自己的资源情况，按照上面给的建议最低值创建即可。<br>注意：<code>hostname</code>不能有大写字母，比如<code>Master</code>这样的。</p><h4 id="1-软件版本"><a href="#1-软件版本" class="headerlink" title="1. 软件版本"></a>1. 软件版本</h4><pre><code>系统：CentOS7.5.1804Kubernetes：1.15.3docker-ce版本：19.03.1</code></pre><h4 id="2-环境初始化操作"><a href="#2-环境初始化操作" class="headerlink" title="2. 环境初始化操作"></a>2. 环境初始化操作</h4><h5 id="2-1-配置hostname"><a href="#2-1-配置hostname" class="headerlink" title="2.1 配置hostname"></a>2.1 配置<code>hostname</code></h5><pre><code>## 192.168.222.129hostnamectl set-hostname master##  192.168.222.130hostnamectl set-hostname node1## 192.168.222.131hostnamectl set-hostname node2</code></pre><h5 id="2-2-配置三台虚拟机的-etc-hosts"><a href="#2-2-配置三台虚拟机的-etc-hosts" class="headerlink" title="2.2 配置三台虚拟机的/etc/hosts"></a>2.2 配置三台虚拟机的<code>/etc/hosts</code></h5><pre><code>echo &quot;192.168.222.129 master&quot; &gt;&gt; /etc/hostsecho &quot;192.168.222.130 node1&quot; &gt;&gt; /etc/hostsecho &quot;192.168.222.131 node2&quot; &gt;&gt; /etc/hosts</code></pre><h5 id="2-3-安装必要软件以及升级所有软件-关闭防火墙、selinux、swap"><a href="#2-3-安装必要软件以及升级所有软件-关闭防火墙、selinux、swap" class="headerlink" title="2.3 安装必要软件以及升级所有软件,关闭防火墙、selinux、swap"></a>2.3 安装必要软件以及升级所有软件,关闭防火墙、<code>selinux</code>、<code>swap</code></h5><pre><code>yum -y install vim-enhanced wget curl net-tools conntrack-tools bind-utils socat ipvsadm ipsetyum -y update## 停防火墙systemctl stop firewalld systemctl disable firewalld## 关闭Selinuxsed -i &apos;s#SELINUX=enforcing#SELINUX=disabled#g&apos;  /etc/sysconfig/selinuxsed -i &apos;s#SELINUX=enforcing#SELINUX=disabled#g&apos;  /etc/selinux/config ## 关闭不必要服务systemctl disable auditdsystemctl disable postfixsystemctl disable irqbalancesystemctl disable remote-fssystemctl disable tunedsystemctl disable rhel-configuresystemctl disable firewalld## 安装kernel-lt(kernel 4.4.178)rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgyum -y install https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpmyum --enablerepo=elrepo-kernel install kernel-lt -ygrub2-set-default 0grub2-mkconfig -o /etc/grub2.cfg## 优化内核cat &gt;&gt;/etc/sysctl.conf &lt;&lt;EOFnet.ipv4.ip_forward = 1vm.swappiness = 0net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.tcp_max_syn_backlog = 65536net.core.netdev_max_backlog =  32768net.core.somaxconn = 32768net.core.wmem_default = 8388608net.core.rmem_default = 8388608net.core.rmem_max = 16777216net.core.wmem_max = 16777216net.ipv4.tcp_timestamps = 0net.ipv4.tcp_synack_retries = 2net.ipv4.tcp_syn_retries = 2net.ipv4.tcp_tw_recycle = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_mem = 94500000 915000000 927000000net.ipv4.tcp_max_orphans = 3276800net.ipv4.ip_local_port_range = 1024  65535EOFsysctl -p## 修改文件打开数cat &gt;&gt;/etc/security/limits.conf &lt;&lt;EOF* soft memlock unlimited* hard memlock unlimited* soft nofile 65535* hard nofile 65535* soft nproc 65535* hard nproc 65535EOF## 系统关闭使用交换内存echo &quot;swapoff -a&quot;&gt;&gt;/etc/rc.localchmod +x /etc/rc.localswapoff -a## 注释掉/etc/fstab的swap行# /dev/mapper/centos-swap swap                    swap    defaults        0 0## 创建k8s.confvim /etc/sysctl.d/k8s.conf## 写入如下配置net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1## 加载br_netfiltermodprobe br_netfiltersysctl -p /etc/sysctl.d/k8s.conf</code></pre><h4 id="3-配置CentOS-YUM源"><a href="#3-配置CentOS-YUM源" class="headerlink" title="3. 配置CentOS YUM源"></a>3. 配置CentOS YUM源</h4><pre><code>## 配置国内tencent yum源地址、epel源地址、Kubernetes源地址mkdir -p /etc/yum.repo.d/repo.bakmv /etc/yum.repo.d/*.repo /etc/yum.repo.d/repo.bakwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repowget -O /etc/yum.repos.d/epel.repo http://mirrors.cloud.tencent.com/repo/epel-7.repo</code></pre><p> 配置国内Kubernetes源地址<br>  <code>vim  /etc/yum.repos.d/kubernetes.repo</code></p><pre><code>[kubernetes]name=Kubernetes Repobaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpgenabled=1</code></pre><hr><pre><code>yum clean all &amp;&amp; yum makecache</code></pre><h4 id="4-安装一些依赖软件包"><a href="#4-安装一些依赖软件包" class="headerlink" title="4. 安装一些依赖软件包"></a>4. 安装一些依赖软件包</h4><pre><code>yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp bash-completion yum-utils device-mapper-persistent-data lvm2 net-tools conntrack-tools vim libtool-ltdl</code></pre><h4 id="5-时间同步配置"><a href="#5-时间同步配置" class="headerlink" title="5. 时间同步配置"></a>5. 时间同步配置</h4><pre><code>yum install chrony –y systemctl enable chronyd.service &amp;&amp; systemctl start chronyd.service &amp;&amp; systemctl status chronyd.service chronyc sources</code></pre><p>   运行<code>date</code>命令看下系统时间，过一会儿时间就会同步。如果同步失败检查是不是因为公司内部网导致无法同步时间</p><h4 id="6-以上操作后，全部重启一下。"><a href="#6-以上操作后，全部重启一下。" class="headerlink" title="6. 以上操作后，全部重启一下。"></a>6. 以上操作后，全部重启一下。</h4><h4 id="7-安装docker"><a href="#7-安装docker" class="headerlink" title="7. 安装docker"></a>7. 安装<code>docker</code></h4><pre><code>## 配置docker yum 源cd /etc/yum.repos.d &amp;&amp; wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo## 查看docker-ce的可用资源yum list docker-ce.x86_64 --showduplicates | sort -r </code></pre><p>会显示如下的<code>docker-ce</code>信息</p><pre><code>Repository cr is listed more than once in the configurationRepository fasttrack is listed more than once in the configuration已加载插件：fastestmirror, langpacks已安装的软件包可安装的软件包Loading mirror speeds from cached hostfile * elrepo: mirrors.tuna.tsinghua.edu.cndocker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable docker-ce.x86_64            3:19.03.1-3.el7                    @docker-ce-stabledocker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable docker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable docker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable docker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</code></pre><h5 id="选择你想要得版本，我使用了最新版本"><a href="#选择你想要得版本，我使用了最新版本" class="headerlink" title="选择你想要得版本，我使用了最新版本"></a>选择你想要得版本，我使用了最新版本</h5><pre><code>yum -y  install docker-ce </code></pre><h5 id="配置镜像加速器和docker数据存放路径"><a href="#配置镜像加速器和docker数据存放路径" class="headerlink" title="配置镜像加速器和docker数据存放路径"></a>配置镜像加速器和<code>docker</code>数据存放路径</h5><p><code>vim /etc/docker/daemon.json</code><br>写入如下配置</p><pre><code>{     &quot;registry-mirrors&quot;: [&quot;https://q2hy3fzi.mirror.aliyuncs.com&quot;],     &quot;graph&quot;: &quot;/tol/docker-data&quot; ,    &quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;]} </code></pre><h5 id="设置自启动"><a href="#设置自启动" class="headerlink" title="设置自启动"></a>设置自启动</h5><pre><code>systemctl enable docker &amp;&amp; systemctl start docker</code></pre><h4 id="8-安装-kubeadm、kubelet、kubectl-K8S-VERSION-v1-15-3"><a href="#8-安装-kubeadm、kubelet、kubectl-K8S-VERSION-v1-15-3" class="headerlink" title="8.  安装 kubeadm、kubelet、kubectl K8S_VERSION=v1.15.3"></a>8.  安装 kubeadm、kubelet、kubectl K8S_VERSION=v1.15.3</h4><pre><code> cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF yum install -y  kubeadm kubelet  kubectl  kubelet --version //v1.15.3</code></pre><h5 id="kubelet启动设置"><a href="#kubelet启动设置" class="headerlink" title="kubelet启动设置"></a>kubelet启动设置</h5><p><code>vim /etc/sysconfig/kubelet</code><br>写入如下配置</p><pre><code>KUBELET_EXTRA_ARGS=&quot;--fail-swap-on=false&quot;</code></pre><p>再重启</p><pre><code>systemctl daemon-reload  </code></pre><h4 id="9-master节点设置-192-168-222-129"><a href="#9-master节点设置-192-168-222-129" class="headerlink" title="9. master节点设置(192.168.222.129)"></a>9. master节点设置(192.168.222.129)</h4><h5 id="下载相关镜像"><a href="#下载相关镜像" class="headerlink" title="下载相关镜像"></a>下载相关镜像</h5><pre><code>#!/bin/bash# master 节点 shellK8S_VERSION=v1.15.3ETCD_VERSION=3.3.10DNS_VERSION=1.3.1PAUSE_VERSION=3.1FLANNEL_VERSION=v0.11.0-amd64DASHBOARD_VERSION=v1.10.1// 下载镜像docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$DNS_VERSIONdocker pull jmgao1983/flannel:$FLANNEL_VERSIONdocker pull siriuszg/kubernetes-dashboard-amd64:$DASHBOARD_VERSION# 修改tagdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:$K8S_VERSION           k8s.gcr.io/kube-apiserver:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:$K8S_VERSION  k8s.gcr.io/kube-controller-manager:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:$K8S_VERSION           k8s.gcr.io/kube-scheduler:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSION               k8s.gcr.io/kube-proxy:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION                  k8s.gcr.io/pause:$PAUSE_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSION                    k8s.gcr.io/etcd:$ETCD_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$DNS_VERSION                   k8s.gcr.io/coredns:$DNS_VERSIONdocker tag jmgao1983/flannel:$FLANNEL_VERSION                                                           quay.io/coreos/flannel:$FLANNEL_VERSIONdocker tag siriuszg/kubernetes-dashboard-amd64:$DASHBOARD_VERSION                                    k8s.gcr.io/kubernetes-dashboard-amd64:$DASHBOARD_VERSION#删除冗余的imagesdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:$ETCD_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:$DNS_VERSIONdocker rmi jmgao1983/flannel:$FLANNEL_VERSIONdocker rmi siriuszg/kubernetes-dashboard-amd64:$DASHBOARD_VERSION</code></pre><h5 id="集群安装初始化-192-168-222-129"><a href="#集群安装初始化-192-168-222-129" class="headerlink" title="集群安装初始化(192.168.222.129)"></a>集群安装初始化(192.168.222.129)</h5><pre><code>## 初始化命令 kubeadm init --kubernetes-version=v1.15.3 --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=Swap </code></pre><p>这时候出现如下信息表明安装成功</p><pre><code>Your Kubernetes master has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/You can now join any number of machines by running the following on each nodeas root:kubeadm join 192.168.222.129:6443 --token 981it6.k4kqs2i73e1bfd1p \    --discovery-token-ca-cert-hash sha256:5cc5c1c2ace7b720a178840c951b2a05c679d26b8d6a1cfc81aa7e006e6a6ef9 </code></pre><p>按照上面的提示执行推荐操作</p><pre><code>mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><h5 id="查看集群健康状况"><a href="#查看集群健康状况" class="headerlink" title="查看集群健康状况"></a>查看集群健康状况</h5><pre><code>kubectl get cs</code></pre><h5 id="集群安装过程中遇到问题，重置操作（报错时使用-不报错不用）"><a href="#集群安装过程中遇到问题，重置操作（报错时使用-不报错不用）" class="headerlink" title="集群安装过程中遇到问题，重置操作（报错时使用,不报错不用）"></a>集群安装过程中遇到问题，重置操作（报错时使用,不报错不用）</h5><pre><code>kubeadm reset</code></pre><h5 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h5><pre><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><h5 id="查看集群中的组件运行状态"><a href="#查看集群中的组件运行状态" class="headerlink" title="查看集群中的组件运行状态"></a>查看集群中的组件运行状态</h5><pre><code>kubectl get pods --all-namespaces</code></pre><h4 id="10-node节点设置-192-168-222-130和192-168-222-131子节点配置"><a href="#10-node节点设置-192-168-222-130和192-168-222-131子节点配置" class="headerlink" title="10. node节点设置(192.168.222.130和192.168.222.131子节点配置)"></a>10. node节点设置(192.168.222.130和192.168.222.131子节点配置)</h4><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><pre><code>#!/bin/bash# node 节点 shellK8S_VERSION=v1.15.3ETCD_VERSION=3.3.10DNS_VERSION=1.3.1PAUSE_VERSION=3.1FLANNEL_VERSION=v0.11.0-amd64DASHBOARD_VERSION=v1.10.1## node 安装插件docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSIONdocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSIONdocker pull jmgao1983/flannel:v0.11.0-amd64docker pull siriuszg/kubernetes-dashboard-amd64:$DASHBOARD_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSION  k8s.gcr.io/kube-proxy:$K8S_VERSIONdocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSION     k8s.gcr.io/pause:$PAUSE_VERSIONdocker tag jmgao1983/flannel:$FLANNEL_VERSION                                           quay.io/coreos/flannel:$FLANNEL_VERSIONdocker tag siriuszg/kubernetes-dashboard-amd64:$DASHBOARD_VERSION                       k8s.gcr.io/kubernetes-dashboard-amd64:$DASHBOARD_VERSIONdocker rmi jmgao1983/flannel:$FLANNEL_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:$PAUSE_VERSIONdocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:$K8S_VERSIONdocker rmi siriuszg/kubernetes-dashboard-amd64:$DASHBOARD_VERSION</code></pre><h5 id="加入节点"><a href="#加入节点" class="headerlink" title="加入节点"></a>加入节点</h5><p>这里的信息在主节点初始化完成后会出现，按照自己初始化完后的信息操作，这里仅供参考</p><pre><code>kubeadm join 192.168.222.129:6443 --token 9ump71.6fnndushlwn87fnf \   --discovery-token-ca-cert-hash sha256:addb0cd073a460331fe4cadd1f02c69e9b1bdad4e62188fae788ff65e0a8fb11 --ignore-preflight-errors=Swap</code></pre><p>出现下面的信息表明子节点加入主节点成功,可以使用该命令<code>kubectl get nodes</code>查看</p><pre><code>This node has joined the cluster:* Certificate signing request was sent to master and a response  was received.* The Kubelet was informed of the new secure connection details.Run &apos;kubectl get nodes&apos; on the master to see this node join the cluster.</code></pre><h5 id="如果执行上述命令报The-connection-to-the-server-localhost-8080-was-refused-did-you-specify-the-right-host-or-port"><a href="#如果执行上述命令报The-connection-to-the-server-localhost-8080-was-refused-did-you-specify-the-right-host-or-port" class="headerlink" title="如果执行上述命令报The connection to the server localhost:8080 was refused - did you specify the right host or port?"></a>如果执行上述命令报<code>The connection to the server localhost:8080 was refused - did you specify the right host or port?</code></h5><p>操作如下</p><pre><code>1. 将主节点中的【/etc/kubernetes/admin.conf】文件拷贝到从节点相同目录下2. echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile3. source ~/.bash_profile</code></pre><h4 id="11-安装-dashboard组件-我是在主节点上操作的"><a href="#11-安装-dashboard组件-我是在主节点上操作的" class="headerlink" title="11. 安装 dashboard组件(我是在主节点上操作的)"></a>11. 安装 dashboard组件(我是在主节点上操作的)</h4><h5 id="配置dashboard"><a href="#配置dashboard" class="headerlink" title="配置dashboard"></a>配置dashboard</h5><pre><code>kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta1/aio/deploy/recommended.yaml</code></pre><h5 id="集群配置，生成浏览器证书-这些证书在后面浏览器打开dashboard时需要导入"><a href="#集群配置，生成浏览器证书-这些证书在后面浏览器打开dashboard时需要导入" class="headerlink" title="集群配置，生成浏览器证书(这些证书在后面浏览器打开dashboard时需要导入)"></a>集群配置，生成浏览器证书(这些证书在后面浏览器打开dashboard时需要导入)</h5><pre><code># 生成client-certificate-datagrep &apos;client-certificate-data&apos; ~/.kube/config | head -n 1 | awk &apos;{print $2}&apos; | base64 -d &gt;&gt; kubecfg.crt# 生成client-key-datagrep &apos;client-key-data&apos; ~/.kube/config | head -n 1 | awk &apos;{print $2}&apos; | base64 -d &gt;&gt; kubecfg.key# 生成p12openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name &quot;kubernetes-client&quot;# 导入证书后浏览器重启</code></pre><h5 id="创建admin-user账号，并放在kube-system名称空间下"><a href="#创建admin-user账号，并放在kube-system名称空间下" class="headerlink" title="创建admin-user账号，并放在kube-system名称空间下"></a>创建<code>admin-user</code>账号，并放在<code>kube-system</code>名称空间下</h5><p><code>vim admin-user.yaml</code><br>写入如下配置</p><pre><code>apiVersion: v1kind: ServiceAccountmetadata:  name: admin-user  namespace: kube-system</code></pre><p>使用该命令加载配置</p><pre><code>kubectl create -f admin-user.yaml</code></pre><h5 id="绑定角色"><a href="#绑定角色" class="headerlink" title="绑定角色"></a>绑定角色</h5><p><code>vim admin-user-role-binding.yaml</code><br>写入如下配置</p><pre><code>apiVersion: rbac.authorization.k8s.io/v1beta1kind: ClusterRoleBindingmetadata:  name: admin-userroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: admin-user  namespace: kube-system</code></pre><p>使用该命令加载配置</p><pre><code>kubectl create -f  admin-user-role-binding.yaml</code></pre><h5 id="登录dashboard"><a href="#登录dashboard" class="headerlink" title="登录dashboard"></a>登录<code>dashboard</code></h5><p>在浏览器中访问如下url</p><pre><code>https://127.0.0.1:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></pre><h5 id="在打开的页面中选择token方式-获取token的方式如下"><a href="#在打开的页面中选择token方式-获取token的方式如下" class="headerlink" title="在打开的页面中选择token方式,获取token的方式如下"></a>在打开的页面中选择<code>token</code>方式,获取<code>token</code>的方式如下</h5><pre><code>kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &apos;{print $1}&apos;)</code></pre><h4 id="12-集成Heapster"><a href="#12-集成Heapster" class="headerlink" title="12. 集成Heapster"></a>12. 集成<code>Heapster</code></h4><p><code>Heapster</code>是容器集群监控和性能分析工具</p><p>执行命令</p><pre><code>kubectl create -f http://mirror.faasx.com/kubernetes/heapster/deploy/kube-config/influxdb/influxdb.yamlkubectl create -f http://mirror.faasx.com/kubernetes/heapster/deploy/kube-config/influxdb/grafana.yamlkubectl create -f http://mirror.faasx.com/kubernetes/heapster/deploy/kube-config/influxdb/heapster.yamlkubectl create -f http://mirror.faasx.com/kubernetes/heapster/deploy/kube-config/rbac/heapster-rbac.yaml</code></pre><p>当pod的状态全都变成了running，则能够使用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h4 id="Kubeadm安装Kubernetes-1-15-1"><a href="#Kubeadm安装Kubernetes-1-15-1" class="headerlink" title="Kubeadm安装Kubernetes 1.15.1 "></a><a href="https://www.cnblogs.com/ferhat/p/11312516.html" target="_blank" rel="noopener">Kubeadm安装Kubernetes 1.15.1 </a></h4><h4 id="kubeadm-虚拟机实践"><a href="#kubeadm-虚拟机实践" class="headerlink" title="kubeadm 虚拟机实践"></a><a href="https://github.com/G-Bruin/k8s" target="_blank" rel="noopener">kubeadm 虚拟机实践</a></h4>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos7 </tag>
            
            <tag> k8s集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地管理多个rsa的key</title>
      <link href="/2019/09/19/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AArsa%E7%9A%84key/"/>
      <url>/2019/09/19/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AArsa%E7%9A%84key/</url>
      
        <content type="html"><![CDATA[<h1 id="同一台电脑关于多个SSH-KEY管理"><a href="#同一台电脑关于多个SSH-KEY管理" class="headerlink" title="同一台电脑关于多个SSH KEY管理"></a>同一台电脑关于多个<code>SSH KEY</code>管理</h1><blockquote><p>笔者之前为电脑中的homestead虚拟机配置过id_rsa，但现在因为想在github上搭建基于hexo的博客，所以需要配置github的ssh key，因此产生需要同一台机器上使用多个SSH key 切换的需求.</p></blockquote><h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><pre><code>window7系统</code></pre><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><pre><code>git软件(携带的bash终端类似linux的终端很好用建议安装)有一个可用的github账号</code></pre><h3 id="开始配置-这里仅配置一个，多个类似"><a href="#开始配置-这里仅配置一个，多个类似" class="headerlink" title="开始配置(这里仅配置一个，多个类似)"></a>开始配置(这里仅配置一个，多个类似)</h3><h4 id="1-先生成需要的PUBLIC-KEY"><a href="#1-先生成需要的PUBLIC-KEY" class="headerlink" title="1. 先生成需要的PUBLIC KEY"></a>1. 先生成需要的<code>PUBLIC KEY</code></h4><p>打开<code>bash</code>软件执行如下命令</p><p><code>ssh-keygen -t rsa</code> 指定生成key的路径名称,一路回车即可</p><pre><code>$ ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/c/Users/lenovo/.ssh/id_rsa): /c/Users/lenovo/.ssh/id_rsa_github_hexoEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /c/Users/lenovo/.ssh/id_rsa_github_hexo.Your public key has been saved in /c/Users/lenovo/.ssh/id_rsa_github_hexo.pub.The key fingerprint is:SHA256:ULsfGWCKY1aJqFQ24QkUxuPu3TiBqoJHXy6mHpQ/i0k lenovo@lenovo-PCThe key&apos;s randomart image is:+---[RSA 2048]----+|o=o*....+        ||.+= +o.+ o       ||o..o= o . .      ||.. + . . . o     ||. +     S o      || +.o  .  . .     ||+.E.*o    .      ||+o.B++.          ||+o=oo.           |+----[SHA256]-----+</code></pre><p> 这样我们就在<code>~/.ssh</code>路径下生成两个文件<code>id_rsa_github_hexo</code>和<code>id_rsa_github_hexo.pub</code></p><pre><code>$ ll ~/.sshtotal 15-rw-r--r-- 1 lenovo 197121  114 九月   19 14:32 config-rw-r--r-- 1 lenovo 197121 1679 九月   17 14:58 id_rsa-rw-r--r-- 1 lenovo 197121  398 九月   17 14:58 id_rsa.pub-rw-r--r-- 1 lenovo 197121 1679 九月   19 14:25 id_rsa_github_hexo-rw-r--r-- 1 lenovo 197121  398 九月   19 14:25 id_rsa_github_hexo.pub</code></pre><h5 id="注意这里"><a href="#注意这里" class="headerlink" title="注意这里"></a>注意这里</h5><pre><code>#设置路径,如果不设置默认生成 id_rsa  和  id_rsa.pubEnter file in which to save the key (/root/.ssh/id_rsa):/root/.ssh/id_rsa_aaa  </code></pre><h4 id="2-查看系统ssh-key代理-执行如下命令"><a href="#2-查看系统ssh-key代理-执行如下命令" class="headerlink" title="2. 查看系统ssh-key代理,执行如下命令"></a>2. 查看系统ssh-key代理,执行如下命令</h4><p>执行如下命令查看ssh-key代理</p><pre><code>ssh-add -l</code></pre><p>如果如下提示，说明系统代理里没有任何key</p><pre><code>Could not open a connection to your authentication agent.</code></pre><p>如果发现上面的提示,,请执行如下操作</p><pre><code>exec ssh-agent bash</code></pre><p>如果系统已经有<code>ssh-key</code>代理 ,执行下面的命令可以删除</p><pre><code>ssh-add -D</code></pre><h4 id="3-把-ssh-目录下的新创建的私钥添加的-ssh-agent"><a href="#3-把-ssh-目录下的新创建的私钥添加的-ssh-agent" class="headerlink" title="3. 把 .ssh 目录下的新创建的私钥添加的 ssh-agent"></a>3. 把 .ssh 目录下的新创建的私钥添加的 ssh-agent</h4><pre><code>$ ssh-add ~/.ssh/id_rsa_github_hexo# 添加成功会有如下提示Identity added: /c/Users/lenovo/.ssh/id_rsa_github_hexo (/c/Users/lenovo/.ssh/id_rsa_github_hexo)</code></pre><h4 id="4-打开github的-ssh-管理页面把-对应的公钥提交保存到代码管理服务器-pub-结尾"><a href="#4-打开github的-ssh-管理页面把-对应的公钥提交保存到代码管理服务器-pub-结尾" class="headerlink" title="4. 打开github的 ssh 管理页面把 对应的公钥提交保存到代码管理服务器 (.pub 结尾)"></a>4. 打开github的 ssh 管理页面把 对应的公钥提交保存到代码管理服务器 (.pub 结尾)</h4><p>在终端执行</p><pre><code>cat ~/.ssh/id_rsa_github_hexo.pub</code></pre><p><code>github</code>具体位置在 点击账户的<code>Settings</code>中的<code>SSH and FPG keys</code> 点击<code>New SSH key</code>绿色按钮 输入自己本地<code>id_rsa_github_hexo.pub</code>中的内容</p><h4 id="5-在-ssh-目录创建-config-配置文件"><a href="#5-在-ssh-目录创建-config-配置文件" class="headerlink" title="5. 在 .ssh 目录创建 config 配置文件"></a>5. 在 .ssh 目录创建 config 配置文件</h4><pre><code>vim ~/.ssh/config</code></pre><p>输入如下配置信息(这是配置单个的，多个类似)</p><pre><code># 配置github 的keyHost github    HostName github.com    User git    IdentityFile ~/.ssh/id_rsa_github_hexo</code></pre><h4 id="6-测试配置完毕后是否可以ssh访问github"><a href="#6-测试配置完毕后是否可以ssh访问github" class="headerlink" title="6. 测试配置完毕后是否可以ssh访问github"></a>6. 测试配置完毕后是否可以ssh访问github</h4><pre><code>$ ssh -T git@github.comHi qnyt1993! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>这里表明已经可以了，配置结束</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h5 id="同一台电脑关于多个SSH-KEY管理-1"><a href="#同一台电脑关于多个SSH-KEY管理-1" class="headerlink" title="同一台电脑关于多个SSH KEY管理"></a><a href="https://www.cnblogs.com/dfyg-xiaoxiao/p/7281009.html" target="_blank" rel="noopener">同一台电脑关于多个SSH KEY管理</a></h5>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsa </tag>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
